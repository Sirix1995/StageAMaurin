#if (!$generate)
	#set ($generate = true)
	#foreach ($type in $types_void)
		$pp.setType($type)
		#set ($Type = $pp.firstToUpperCase($type))
		#set ($out = "de/grogra/graph/${Type}Attribute.java")
		#if ($pp.Object)
			#set ($T = "T")
			#set ($TT = "T")
		#else
			#set ($T = "$pp.wrapper")
			#set ($TT = "$type")
		#end
		$generator.parse("de/grogra/graph/Attribute.vm", $out)
	#end
#else

$pp.autogenerated

/*
 * Copyright (C) 2002 - 2007 Lehrstuhl Grafische Systeme, BTU Cottbus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


package de.grogra.graph;

import de.grogra.reflect.*;
import de.grogra.util.*;

#if ($pp.Object)
public class ${Type}Attribute<T> extends Attribute<T>
#else
public class ${Type}Attribute extends Attribute<$T>
#end
{

#if ($pp.Object)

	public class IdentityAccessor implements ObjectAttributeAccessor<T>
	{

		public $T getObject (Object object, GraphState gs)
		{
			return ($T) object;
		}


		public $T getObject (Object object, $T placeIn,
								 GraphState gs)
		{
			return ($T) object;
		}


		public $T setObject (Object object, $T value,
								 GraphState gs)
		{
			throw new UnsupportedOperationException ();
		}


		public Object setSubfield (Object object, FieldChain field,
								   int[] indices, Object value, GraphState gs)
		{
			throw new UnsupportedOperationException ();
		}


		public Type getType ()
		{
			return ObjectAttribute.this.getType ();
		}


		public Attribute<T> getAttribute ()
		{
			return ObjectAttribute.this;
		}


		public Field getField ()
		{
			return null;
		}


		public boolean isWritable (Object object, GraphState gs)
		{
			return false;
		}
	}


	private final boolean convert;

	public ObjectAttribute (Type type, boolean convert, Quantity quantity)
	{
		super (type, quantity);
		this.convert = convert;
	}


	public ObjectAttribute (Class<T> type, boolean convert, Quantity quantity)
	{
		this (ClassAdapter.wrap (type), convert, quantity);
	}


	public T valueOf (Object v)
	{
		return (T) (convert ? Reflection.toType (v, attrType) : v);
	}


	public Object toType ($T v, Type t)
	{
		return convert ? Reflection.toType (v, t) : v;
	}


	protected T getDerived (Object object, boolean asNode, $T placeIn,
								 GraphState gs)
	{
		throw new AssertionError ("getDerived not implemented in "
								  + this.getClass ());
	}


	public Object setSubfield (Object object, boolean asNode, FieldChain field,
							   int[] indices, Object value, GraphState gs)
	{
		if (isDerived ())
		{
			assert field.length () == 0;
			return setDerived (object, asNode, (T) value, gs);
		}
		AttributeAccessor a;
		if ((a = gs.getGraph ().getAccessor (object, asNode, this)) != null)
		{
			return ((ObjectAttributeAccessor) a)
				.setSubfield (object, field, indices, value, gs);
		}
		throw new NoSuchKeyException (object, this);
	}


#elseif ($pp.fnumeric)

	public ${Type}Attribute (Type type, Quantity quantity)
	{
		super (type, quantity);
	}


	public ${Type}Attribute (Quantity quantity)
	{
		this (Type.$pp.TYPE, quantity);
	}

#elseif ($pp.void)

	public VoidAttribute ()
	{
		super (Type.VOID, null);
	}

#else

	public ${Type}Attribute (Type type)
	{
		super (type, null);
	}


	public ${Type}Attribute ()
	{
		this (Type.$pp.TYPE);
	}

#end


	@Override
	public final $T get (Object o, boolean asNode, GraphState gs)
	{
#if ($pp.void)
		throw new UnsupportedOperationException ();
#else
		return $pp.wrap("gs.get$Type (o, asNode, this)");
#end
	}


	@Override
	public final $T set (Object o, boolean asNode, Object value, GraphState gs)
	{
#if ($pp.void)
		throw new UnsupportedOperationException ();
#else
		$TT v = set$Type (o, asNode, ($T) $pp.unwrap("value"), gs);
		return $pp.wrap("v");
#end
	}


#if (!$pp.void)

#if (!$pp.Object)

	protected $TT getDerived (Object object, boolean asNode,
								GraphState gs)
	{
		throw new AssertionError ("getDerived not implemented in "
								  + this.getClass ());
	}

#end

	public $TT set$Type (Object object, boolean asNode, $TT value, GraphState gs)
	{
		if (isDerived ())
		{
			return setDerived (object, asNode, value, gs);
		}
		AttributeAccessor a;
		if ((a = gs.getGraph ().getAccessor (object, asNode, this)) != null)
		{
#if ($pp.Object)
			return ((${Type}AttributeAccessor<T>) a).set$Type (object, ($T) toType (value, a.getType ()), gs);
#else
			return ((${Type}AttributeAccessor) a).set$Type (object, value, gs);
#end
		}
		throw new NoSuchKeyException (object, this);
	}


	protected $TT setDerived (Object object, boolean asNode, $TT value, GraphState gs)
	{
		throw new UnsupportedOperationException ();
	}

#end


#if ($pp.numeric)
	public $type getMinValue ()
	{
#if ($pp.fnumeric)
		return -${pp.wrapper}.MAX_VALUE;
#else
		return ${pp.wrapper}.MIN_VALUE;
#end
	}


	public $type getMaxValue ()
	{
		return ${pp.wrapper}.MAX_VALUE;
	}
#end

}

#end
