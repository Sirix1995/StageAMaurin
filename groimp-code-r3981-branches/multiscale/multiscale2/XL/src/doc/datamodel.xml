<chapter id="c-datamodel">
<title>Data Model Interface</title>

<para>
In constrast to the Java programming language, a programme of
the XL programming language depends on a
<firstterm>data model</firstterm> both at compile-time and run-time,
at least if it makes use of some of the new features.
Such a data model parametrizes the XL programming language for
the concrete <firstterm>relational data source</firstterm> in use.
It is not specified of what nature such a relational data source may be,
but it has to fit into the data model interface. For example, the XL
programming language could be used for XML documents as relational
data source, for relational databases, or for graphs of Java objects.
The XL programming language provides common syntax and semantics
for these kinds of data sources, however, it is clear that each data
source represents its data using a specific model, and that each
data source supports a different set of operations.
</para>
<para>
The interface between the XL programming language and a specific
data source is split into two parts: At compile-time, the
<link linkend="s-ctmodel">compile-time model</link> provides
static information about the data source to a
compiler for the XL programming language. At run-time, a
<link linkend="s-rtmodel">run-time model</link> is associated with
the compile-time model and offers a set of requests and operations
on the data source. The run-time model is used by the run-time
system of the XL programming language in order to implement
the semantics of, e.g., queries, rules, and quasi-parallel assignments.
</para>

<section id="s-ctmodel"><title>Compile-Time Model</title>

<para>
A <firstterm>compile-time model</firstterm> is used by a compiler
for the XL programming language. It describes static properties
of the relational data source, among them the base class of node
terms, encodings of some standard edge relations, and
declarations of <link linkend="s-properties">properties</link>.
</para>
<para>
A compile-time model is represented by an instance of the interface
<classname>de.grogra.xl.compiletime.Model</classname>. At every
point of a compilation unit of the XL programming language, there
has to be exactly one such model which is associated with that point.
How this association is done is not defined
by this specification; it depends on the compiler.
</para>
<para>
The interface <classname>Model</classname> specifies the method
<methodname>getRuntimeName</methodname>. The returned value is used
by a compiler for the XL programming language to tag compiled code
with a name which allows for the determination of a corresponding
<link linkend="s-rtmodel">run-time model</link> at run-time.
</para>
<para>
The method <methodname>needsWrapperFor</methodname> determines
for a given type whether values of this type can be represented
at run-time as <firstterm>nodes</firstterm> of an
<firstterm>extent</firstterm> (<xref linkend="s-rtmodel"/>) or not:
If a wrapper is needed, values of the given type have to be
wrapped by <firstterm>wrapper nodes</firstterm> before they can be
represented in the extent. The type of the corresponding wrapper
node is obtained by the method <methodname>getWrapperClassFor</methodname>,
it has to be a reference type.
The method <methodname>needsWrapperFor</methodname> has to return
<literal>true</literal> for primitive types, i.e., only
objects are allowed as nodes.
</para>
<para>
Besides the discussed methods, the interface <classname>Model</classname>
specifies a set of further methods. Their meaning will be described in the
sequel in the context of their usage.
</para>

</section>

<section id="s-rtmodel"><title>Run-Time Model</title>

<para>
A <firstterm>run-time model</firstterm> is used by the run-time
system of the XL programming language. It describes the
properties of relational data sources at run-time, i.e., it provides
methods for obtaining information and performing operations on
relational data sources.
</para>
<para>
A run-time model is represented by an instance of the interface
<classname>de.grogra.xl.runtime.Model</classname>, together with
instances of <classname>de.grogra.xl.runtime.Extent</classname>
and <classname>de.grogra.xl.runtime.Property</classname> which
are returned by methods of <classname>Model</classname>.
While a <classname>Model</classname> provides methods for obtaining
information and performing operations which are common to a set of
relational data sources with an equal structure, an
<classname>Extent</classname> provides methods which operate
on a single instance of these data sources. E.g., a
<classname>Model</classname> could represent
features of XML documents in general, while an
<classname>Extent</classname> of this model represents a single
XML document. <classname>Property</classname> instances represent
<link linkend="s-properties">properties</link> at run-time.
The exact meaning of these classes and interfaces will be described in the
sequel in the context of their usage.
</para>
<para>
The instance of <classname>Model</classname> that is responsible
for a specific part of a programme is determined as follows:
At compile-time, a <link linkend="s-ctmodel">compile-time model</link>
is associated with that specific part. The invocation of the method
<methodname>getRuntimeName</methodname> on this compile-time model
returns a name, this name <replaceable>m</replaceable> is used
at run-time in order to obtain the corresponding instance of
<classname>de.grogra.xl.runtime.Model</classname>: If
<replaceable>c</replaceable> is the class-loader of the
class containing the specific part, then the run-time model is
obtained by the invocation
<literal>ModelFactory.getInstance().modelForName(</literal>
<replaceable>m, c</replaceable><literal>)</literal>.
</para>

<section id="s-currextent"><title>Current Extent</title>

<para>
The current <classname>Extent</classname> for a run-time model
<replaceable>r</replaceable> is obtained by the invocation
<replaceable>r</replaceable><literal>.getCurrentExtent()</literal>.
If the current extent is to be determined and this method
returns <literal>null</literal>, a
<classname>NoCurrentExtentException</classname> is thrown.
</para>

</section>

<section id="s-currqc"><title>Current Queue Collection</title>

<para>
The current <classname>QueueCollection</classname> of an extent
<replaceable>e</replaceable> is obtained by the invocation
<replaceable>e</replaceable><literal>.getQueues(</literal><replaceable>x</replaceable><literal>)</literal>, where <replaceable>x</replaceable>
is the current extended state (<xref linkend="c-vmxstate"/>).
If the current queue collection is to be determined and this method
returns <literal>null</literal>, a
<classname>NoActiveTransformationException</classname> is thrown.
The current queue collection of a run-time model is determined by
first determining the current extent of the run-time model and then
determining its current queue-collection.
</para>

</section>

</section>

</chapter>
