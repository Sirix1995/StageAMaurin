#if (!$generate)
	#set ($generate = true)
	#foreach ($t in ["RH", "RL", "RU", "URotation"])
		#set ($out = "de/grogra/turtle/${t}.java")
		#if ($t == "URotation")
		  #set ($mods = "public abstract")
		#else
		  #set ($mods = "public")
		#end
		#if ($t == "RU")
		  #set ($ext = "URotation")
		#else
		  #set ($ext = "Rotation")
		#end
		$generator.parse("de/grogra/turtle/RotationModules.vm", $out)
	#end
#else

$pp.autogenerated

/*
 * Copyright (C) 2002 - 2007 Lehrstuhl Grafische Systeme, BTU Cottbus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package de.grogra.turtle;

import javax.vecmath.Matrix4d;

/**
 * This class implements a rotation about the local
#if ($t == "RH")
 * z-axis (the turtle's head axis).
#elseif ($t == "RL")
 * x-axis (the turtle's left axis).
#else
 * y-axis (the turtle's up axis).
#end
 * 
 * @author Ole Kniemeyer
 */
$mods class $t extends $ext
{
#if ($t != "URotation")

	//enh:insert

	public static class Pattern extends de.grogra.xl.impl.base.FieldListPattern
	{
		public Pattern ()
		{
			super (${t}.$TYPE, angle$FIELD);
		}

		public static void signature (@In @Out ${t} n, float a)
		{
		}
	}

#end

	/**
	 * Creates a new <code>$t</code> node with an initial
	 * angle of 0 degrees.
	 */
	public $t ()
	{
		this (0);
	}


	/**
	 * Creates a new <code>$t</code> node which performs
	 * a counter-clockwise rotation of <code>angle</code>
	 * degrees.
	 * 
	 * @param angle rotation angle in degrees
	 */
	public $t (float angle)
	{
		super (angle);
	}

#if ($t != "RU")

	@Override
	protected void transform (double c, double s, Matrix4d in, Matrix4d out)
	{
		double t;
#if ($t == "RL")
		out.m00 = in.m00;
		out.m01 = c * (t = in.m01) + s * in.m02;
		out.m02 = c * in.m02 - s * t;
		out.m03 = in.m03;
		out.m10 = in.m10;
		out.m11 = c * (t = in.m11) + s * in.m12;
		out.m12 = c * in.m12 - s * t;
		out.m13 = in.m13;
		out.m20 = in.m20;
		out.m21 = c * (t = in.m21) + s * in.m22;
		out.m22 = c * in.m22 - s * t;
		out.m23 = in.m23;
#elseif ($t == "URotation")
		out.m00 = c * (t = in.m00) - s * in.m02;
		out.m01 = in.m01;
		out.m02 = s * t + c * in.m02;
		out.m03 = in.m03;
		out.m10 = c * (t = in.m10) - s * in.m12;
		out.m11 = in.m11;
		out.m12 = s * t + c * in.m12;
		out.m13 = in.m13;
		out.m20 = c * (t = in.m20) - s * in.m22;
		out.m21 = in.m21;
		out.m22 = s * t + c * in.m22;
		out.m23 = in.m23;
#else
		out.m00 = c * (t = in.m00) + s * in.m01;
		out.m01 = c * in.m01 - s * t;
		out.m02 = in.m02;
		out.m03 = in.m03;
		out.m10 = c * (t = in.m10) + s * in.m11;
		out.m11 = c * in.m11 - s * t;
		out.m12 = in.m12;
		out.m13 = in.m13;
		out.m20 = c * (t = in.m20) + s * in.m21;
		out.m21 = c * in.m21 - s * t;
		out.m22 = in.m22;
		out.m23 = in.m23;
#end
	}

#end

}
#end
