#if (!$generate)
	#set ($generate = true)
	#foreach ($type in $types)
		$pp.setType($type)
		#set ($Type = "${pp.Type}Const")
		#set ($out = "de/grogra/xl/expr/${Type}.java")
		$generator.parse("de/grogra/xl/expr/Const.vm", $out)
	#end
#else

$pp.autogenerated

/*
 * Copyright (C) 2002 - 2007 Lehrstuhl Grafische Systeme, BTU Cottbus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package de.grogra.xl.expr;

#if ($pp.boolean)

import org.objectweb.asm.Label;
import org.objectweb.asm.Opcodes;

#end

import de.grogra.xl.compiler.BytecodeWriter;
import de.grogra.xl.vmx.*;
import de.grogra.reflect.*;

public class $Type extends EvalExpression implements Constant
{
	public $type value;


	public $Type ()
	{
		super (Type.$pp.TYPE);
	}


#if ($pp.Object)

	private boolean nullInBytecode = false;

	public ObjectConst (Object value, Type type)
	{
		this (value, false, type);
	}


	public ObjectConst (Object value, boolean nullInBytecode, Type type)
	{
		this ();
		setType (type);
		this.value = value;
		this.nullInBytecode = nullInBytecode;
	}

#else
	public $Type ($type value)
	{
		this ();
		this.value = value;
	}
#end

	@Override
	protected $type evaluate${pp.Type}Impl (VMXState t)
	{
		return value;
	}


	@Override
	protected void writeImpl (BytecodeWriter out, boolean discard)
	{
		if (!discard)
		{
#if ($pp.Object)
			out.visitaconst (nullInBytecode ? null : value);
#else
			out.visit${pp.prefix}const (value $pp.type2vm);
#end
		}
	}

#if ($pp.boolean)
	
	@Override
	public boolean isConditional ()
	{
		return true;
	}


	@Override
	public int writeConditional (BytecodeWriter writer, Label falseLabel, Label trueLabel)
	{
		if ((trueLabel != null) && value)
		{
			writer.visitJumpInsn (Opcodes.GOTO, trueLabel);
		}
		else if ((falseLabel != null) && !value)
		{
			writer.visitJumpInsn (Opcodes.GOTO, falseLabel);
		}
		return value ? 1 : -1;
	}

#end

}

#end
