<?xml version="1.0" encoding="UTF-8"?>
<java-to-xml creation="Tue Aug 13 14:35:33 CEST 2013" doclet="jeldoclet-2.0">
	<jelclass abstract="true" visibility="public" package="de.grogra.graph" interface="true" fulltype="de.grogra.graph.Graph" type="Graph">
		<comment>
			<description>A &lt;code&gt;Graph&lt;/code&gt; represents a graph-like structure. It consists of 
 nodes, connected by directed edges. Both nodes and edges are objects,
 their classes are not restricted by this interface.
 
 &lt;h3&gt;Topological Structure&lt;/h3&gt;
 
 The nodes and edges of a graph are obtained in the following way:
 &lt;ul&gt;
 &lt;li&gt;The method {@link #getRootKeys()} returns an array of strings, the
 &lt;em&gt;root keys&lt;/em&gt;. These are used as arguments to
 {@link #getRoot(String)}. The returned value is a node, namely the root
 of the subgraph identified by the root key. The root key
 {@link #MAIN_GRAPH} is a predefined root key, it identifies the root
 of the main graph which should always be present. Further root keys
 may be defined, depending on the &lt;code&gt;Graph&lt;/code&gt;.
 &lt;li&gt;For every node &lt;em&gt;n&lt;/em&gt;, there is a linked list of edges with
 unspecified order. The first edge of this linked list is obtained by
 {@link #getFirstEdge(Object)} with &lt;em&gt;n&lt;/em&gt; passed as argument, the
 next edges are obtained by {@link #getNextEdge(Object, Object)} with
 the previous edge as first argument and &lt;em&gt;n&lt;/em&gt; as second.
 Thus, a loop over all edges of &lt;em&gt;n&lt;/em&gt; in a graph &lt;em&gt;g&lt;/em&gt;
 can be implemented as follows:
 &lt;pre&gt;
 for (Object e = g.getFirstEdge(n); e != null; e = g.getNextEdge(e, n))
 {
     // do something with the current edge e
 }
 &lt;/pre&gt;
 &lt;li&gt;Given an edge &lt;em&gt;e&lt;/em&gt;, its source and target nodes are obtained by
 the method {@link #getSourceNode(Object)} and
 {@link #getTargetNode(Object)}.
 &lt;/ul&gt;
 
 &lt;h3&gt;Attributes&lt;/h3&gt;
 
 Besides topological information, a &lt;code&gt;Graph&lt;/code&gt; provides
 attribute-like information for nodes and edges:
 &lt;ul&gt;
 &lt;li&gt;Every node has a unique id which is obtained by {@link #getId(Object)}.
 The inverse method {@link #getNodeForId(long)} returns the node identified
 by the given id.
 &lt;li&gt;Every node and every edge has a name which is obtained by
 {@link #getName(Object, boolean)}. The name is not necessarily unique,
 the inverse method {@link #getObjectForName(boolean, String)} returns
 one of the nodes or edges with the given name.
 &lt;li&gt;Every edge has a set of &lt;em&gt;edge bits&lt;/em&gt;
 ({@link #getEdgeBits(Object)}). These are stored in a single
 &lt;code&gt;int&lt;/code&gt;-value which is interpreted
 as a set of sub-edges in the following way:
  &lt;ul&gt;
  &lt;li&gt;The bits 0 to 7 (masked by {@link #SPECIAL_EDGE_MASK})
  represent the edge&apos;s special sub-edge.
  If these bits, interpreted as a byte, have the value 0, no special
  sub-edge is present. Otherwise, the special sub-edge identified by
  this byte is present in this edge. The value 255 (all bits set)
  is reserved for special purposes. Note that at most one special edge
  may exist at a time between an ordered tuple of nodes.
  &lt;li&gt;The other 24 bits (bits 8 to 31) represent 24 possible
  sub-edges, each indicated by the presence of its specific bit in the
  &lt;code&gt;int&lt;/code&gt;-value. It is up to the concrete graph to specify the
  meaning of the sub-edges. The &lt;code&gt;Graph&lt;/code&gt; interface provides
  three standard meanings: {@link #SUCCESSOR_EDGE}, {@link #BRANCH_EDGE},
  and {@link #CONTAINMENT_EDGE}.
  &lt;/ul&gt;
 &lt;li&gt;Every node and every edge has a set of attributes which is returned by
 {@link #getAttributes(Object, boolean)}. Each attribute is represented by
 an instance of {@link de.grogra.graph.Attribute},
 attribute values are read and written
 on nodes and edges within the context of a
 {@link de.grogra.graph.GraphState}.
 &lt;/ul&gt;
 
 &lt;h3&gt;Threading Issues&lt;/h3&gt;
 
 In order to ensure a stable and predictable behaviour in the context
 of multiple threads, the following rules have to be followed:
 &lt;ol&gt;
 &lt;li&gt;Modifications to a graph may only be performed within the context
 of the &lt;em&gt;main graph state&lt;/em&gt; (see {@link #getMainState()}), and
 only when a write lock has been obtained by
 (see {@link de.grogra.util.Lockable} which is extended by this interface).
 &lt;li&gt;In principle, reading of structure and attributes can be done
 without any special arrangement. However, it is safer to do this
 when a read lock has been obtained
 (again see {@link de.grogra.util.Lockable}). 
 because then it is guaranteed that no other thread may modify the graph
 during the invocation (if the other threads conform to these rules).
 &lt;li&gt;The methods for adding and removing of event listeners in this
 interface have to be implemented thread-safe.
 &lt;li&gt;The implementation of this interface has to
 ensure that its event listeners are notified about modifications
 only within the context of the main graph state. 
 &lt;/ol&gt;
 
 &lt;h3&gt;The Tree of a Graph&lt;/h3&gt;
 
 A graph defines a &lt;em&gt;tree pattern&lt;/em&gt; (see {@link #getTreePattern()}).
 Starting at the root of the main graph
 ({@link #getRoot(String)}, {@link #MAIN_GRAPH}), this pattern is used
 as a filter to construct a subgraph out of the whole graph. The subgraph
 has to be a tree, but it is not necessarily a spanning tree for the whole
 graph. The &lt;em&gt;parent attribute&lt;/em&gt; (see {@link #getParentAttribute()})
 of the graph has to be a derived attribute which has as value for every node
 of the tree its parent edge and for every edge of the tree its parent
 node. For objects which are not part of the tree the value is
 &lt;code&gt;null&lt;/code&gt;.</description>
			<attribute name="@author">
				<description>Ole Kniemeyer</description>
			</attribute>
			<attribute name="@see">
				<description>de.grogra.graph.GraphState</description>
			</attribute>
			<attribute name="@see">
				<description>de.grogra.graph.Attribute</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="128" visibility="public" name="SPECIAL_EDGE_OF_SOURCE_BIT" constexpr="128" fulltype="int" type="int" />
			<field final="true" static="true" const="255" visibility="public" name="SPECIAL_EDGE_MASK" constexpr="255" fulltype="int" type="int">
				<comment>
					<description>The bit mask for the special edge in edge bits.</description>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
					<attribute name="@see">
						<description>#getEdgeBits(Object)</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="1" visibility="public" name="EDGENODE_IN_EDGE" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="128" visibility="public" name="EDGENODE_OUT_EDGE" constexpr="128" fulltype="int" type="int" />
			<field final="true" static="true" const="8" visibility="public" name="MIN_NORMAL_BIT_INDEX" constexpr="8" fulltype="int" type="int" />
			<field final="true" static="true" const="256" visibility="public" name="SUCCESSOR_EDGE" constexpr="256" fulltype="int" type="int">
				<comment>
					<description>The bit mask indicating the presence of a successor edge in edge bits.
 This means that the target node of the edge is the successor
 (in some graph-dependent sense) of the source node of the edge.</description>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
					<attribute name="@see">
						<description>#getEdgeBits(Object)</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="512" visibility="public" name="BRANCH_EDGE" constexpr="512" fulltype="int" type="int">
				<comment>
					<description>The bit mask indicating the presence of a branch edge in edge bits.
 This means that the target node of the edge is the first node of
 a branch (in some graph-dependent sense) originating at the source
 node of the edge.</description>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
					<attribute name="@see">
						<description>#getEdgeBits(Object)</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="1024" visibility="public" name="CONTAINMENT_EDGE" constexpr="1024" fulltype="int" type="int">
				<comment>
					<description>The bit mask indicating the presence of a containment edge in edge bits.
 This means that the target node of the edge is contained
 (in some graph-dependent sense) in the source node of the edge.</description>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
					<attribute name="@see">
						<description>#getEdgeBits(Object)</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="2048" visibility="public" name="CONTAINMENT_END_EDGE" constexpr="2048" fulltype="int" type="int">
				<comment>
					<description>The bit mask indicating the presence in edge bits
 of an edge signalling &quot;end of containment&quot;.</description>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
					<attribute name="@see">
						<description>#getEdgeBits(Object)</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="4096" visibility="public" name="REFINEMENT_EDGE" constexpr="4096" fulltype="int" type="int" />
			<field final="true" static="true" const="8192" visibility="public" name="MARK_EDGE" constexpr="8192" fulltype="int" type="int">
				<comment>
					<description>The bit mask indicating the presence of a mark edge in edge bits.
 The precise meaning of a mark edge is not specified by this interface,
 it may be used for multiple purposes.</description>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
					<attribute name="@see">
						<description>#getEdgeBits(Object)</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="16384" visibility="public" name="NOTIFIES_EDGE" constexpr="16384" fulltype="int" type="int" />
			<field final="true" static="true" const="32768" visibility="public" name="STD_EDGE_5" constexpr="32768" fulltype="int" type="int" />
			<field final="true" static="true" const="65536" visibility="public" name="STD_EDGE_6" constexpr="65536" fulltype="int" type="int" />
			<field final="true" static="true" const="131072" visibility="public" name="MIN_UNUSED_EDGE" constexpr="131072" fulltype="int" type="int" />
			<field final="true" static="true" const="17" visibility="public" name="MIN_UNUSED_EDGE_BIT" constexpr="17" fulltype="int" type="int" />
			<field final="true" static="true" const="0" visibility="public" name="RECTANGLE_SYMBOL" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="ROUND_RECTANGLE_SYMBOL" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="ELLIPSE_SYMBOL" constexpr="2" fulltype="int" type="int" />
			<field final="true" static="true" const="3" visibility="public" name="RHOMBUS_SYMBOL" constexpr="3" fulltype="int" type="int" />
			<field final="true" static="true" const="0" visibility="public" name="PERSISTENT" constexpr="0" fulltype="int" type="int">
				<comment>
					<description>Return value for {@link #getLifeCycleState} indicating that the object
 is persistent, i.e., it belongs the graph.</description>
				</comment>
			</field>
			<field final="true" static="true" const="1" visibility="public" name="PERSISTENT_DELETED" constexpr="1" fulltype="int" type="int">
				<comment>
					<description>Return value for {@link #getLifeCycleState} indicating that the object
 has been persistent and is currently being deleted from the graph.</description>
				</comment>
			</field>
			<field final="true" static="true" const="2" visibility="public" name="TRANSIENT" constexpr="2" fulltype="int" type="int">
				<comment>
					<description>Return value for {@link #getLifeCycleState} indicating that the object
 is transient, i.e., it does not belong to the graph.</description>
				</comment>
			</field>
			<field final="true" static="true" const="MainGraph" visibility="public" name="MAIN_GRAPH" constexpr="&quot;MainGraph&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>The predefined root key which identifies the main graph.</description>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<method visibility="public" name="getMainState" returncomment="this graph&apos;s main graph state" fulltype="GraphState" type="GraphState">
				<comment>
					<description>Returns the main graph state. The main graph state is the only
 graph state within which modifications to the graph may be done.
 The notification of event listeners is done in the context
 of this state, too.</description>
					<attribute name="@return">
						<description>this graph&apos;s main graph state</description>
					</attribute>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getStamp" returncomment="a stamp for the whole graph" fulltype="int" type="int">
				<comment>
					<description>Returns a modification stamp for the whole graph. Each modification
 increments the value, so that the test whether some modification
 occured can be simply performed on values of the stamp.</description>
					<attribute name="@return">
						<description>a stamp for the whole graph</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getRootKeys" returncomment="an array of root keys" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns the root keys for the graph.</description>
					<attribute name="@return">
						<description>an array of root keys</description>
					</attribute>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
					<attribute name="@see">
						<description>#getRoot(String)</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getRoot" returncomment="the root node of the graph identified by &lt;code&gt;key&lt;/code&gt;,
 or &lt;code&gt;null&lt;/code&gt; if no such root node exists" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the root node for the given root key.</description>
					<attribute name="@param">
						<description>key a root key, one of {@link #getRootKeys()}</description>
					</attribute>
					<attribute name="@return">
						<description>the root node of the graph identified by &lt;code&gt;key&lt;/code&gt;,
 or &lt;code&gt;null&lt;/code&gt; if no such root node exists</description>
					</attribute>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="a root key, one of {@link #getRootKeys()}" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getFirstEdge" returncomment="the first edge of the linked list" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the first edge of the linked list of edges of
 &lt;code&gt;node&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>node the common node of the edges of the linked list</description>
					</attribute>
					<attribute name="@return">
						<description>the first edge of the linked list</description>
					</attribute>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
					<attribute name="@see">
						<description>#getNextEdge(Object, Object)</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="the common node of the edges of the linked list" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getNextEdge" returncomment="the next edge of the linked list" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the edge after &lt;code&gt;edge&lt;/code&gt; in the linked list
 of edges of &lt;code&gt;node&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>edge the previous edge in the linked list</description>
					</attribute>
					<attribute name="@param">
						<description>node the common node of the edges of the linked list</description>
					</attribute>
					<attribute name="@return">
						<description>the next edge of the linked list</description>
					</attribute>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
					<attribute name="@see">
						<description>#getFirstEdge(Object)</description>
					</attribute>
				</comment>
				<params>
					<param name="edge" comment="the previous edge in the linked list" fulltype="java.lang.Object" type="Object" />
					<param name="node" comment="the common node of the edges of the linked list" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getSourceNode" returncomment="the source node" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the source node of &lt;code&gt;edge&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>edge an edge</description>
					</attribute>
					<attribute name="@return">
						<description>the source node</description>
					</attribute>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
				</comment>
				<params>
					<param name="edge" comment="an edge" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getTargetNode" returncomment="the target node" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the target node of &lt;code&gt;edge&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>edge an edge</description>
					</attribute>
					<attribute name="@return">
						<description>the target node</description>
					</attribute>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
				</comment>
				<params>
					<param name="edge" comment="an edge" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getLifeCycleState" returncomment="life cycle state, one of {@link #PERSISTENT}, {@link #PERSISTENT_DELETED},
 {@link #TRANSIENT}" fulltype="int" type="int">
				<comment>
					<description>Returns the life cycle state of the given object as part of this graph.</description>
					<attribute name="@param">
						<description>object the object to test</description>
					</attribute>
					<attribute name="@param">
						<description>asNode &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is a node,
 &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is an edge</description>
					</attribute>
					<attribute name="@return">
						<description>life cycle state, one of {@link #PERSISTENT}, {@link #PERSISTENT_DELETED},
 {@link #TRANSIENT}</description>
					</attribute>
				</comment>
				<params>
					<param name="object" comment="the object to test" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" comment="&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is a node,
 &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is an edge" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getId" returncomment="the node&apos;s unique identifier" fulltype="long" type="long">
				<comment>
					<description>Returns a unique identifier for the given &lt;code&gt;node&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the node&apos;s unique identifier</description>
					</attribute>
					<attribute name="@see">
						<description>#getNodeForId(long)</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="a node" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getNodeForId" returncomment="the corresponding node, or &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;id&lt;/code&gt;
 identifies no node" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the node identified by &lt;code&gt;id&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>id an identifier</description>
					</attribute>
					<attribute name="@return">
						<description>the corresponding node, or &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;id&lt;/code&gt;
 identifies no node</description>
					</attribute>
					<attribute name="@see">
						<description>#getId(Object)</description>
					</attribute>
				</comment>
				<params>
					<param name="id" comment="an identifier" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="getName" returncomment="a name" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a name for the given object. Names are not necessarily
 unique.</description>
					<attribute name="@param">
						<description>object the object</description>
					</attribute>
					<attribute name="@param">
						<description>asNode &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is a node,
 &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is an edge</description>
					</attribute>
					<attribute name="@return">
						<description>a name</description>
					</attribute>
					<attribute name="@see">
						<description>#getObjectForName(boolean, String)</description>
					</attribute>
				</comment>
				<params>
					<param name="object" comment="the object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" comment="&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is a node,
 &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is an edge" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getObjectForName" returncomment="an object of the given kind (node or edge) with the given name,
 or &lt;code&gt;null&lt;/code&gt; if no such object exists" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the object with the given name. If several such objects
 exist, one of them is chosen in an unspecified manner. If no such
 object exists, &lt;code&gt;null&lt;/code&gt; is returned.</description>
					<attribute name="@param">
						<description>node &lt;code&gt;true&lt;/code&gt; if a node of the given name is to be found,
 &lt;code&gt;false&lt;/code&gt; if an edge is to be found</description>
					</attribute>
					<attribute name="@param">
						<description>name the name of the object</description>
					</attribute>
					<attribute name="@return">
						<description>an object of the given kind (node or edge) with the given name,
 or &lt;code&gt;null&lt;/code&gt; if no such object exists</description>
					</attribute>
					<attribute name="@see">
						<description>#getName(Object, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="&lt;code&gt;true&lt;/code&gt; if a node of the given name is to be found,
 &lt;code&gt;false&lt;/code&gt; if an edge is to be found" fulltype="boolean" type="boolean" />
					<param name="name" comment="the name of the object" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getEdgeBits" returncomment="the edge&apos;s edge bits" fulltype="int" type="int">
				<comment>
					<description>Returns the edge bits of an edge.</description>
					<attribute name="@param">
						<description>edge the edge</description>
					</attribute>
					<attribute name="@return">
						<description>the edge&apos;s edge bits</description>
					</attribute>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
				</comment>
				<params>
					<param name="edge" comment="the edge" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getAttributes" returncomment="the object&apos;s attributes" fulltype="Attribute[]" type="Attribute">
				<comment>
					<description>Returns the set of attributes which are available for the given object.</description>
					<attribute name="@param">
						<description>object the object</description>
					</attribute>
					<attribute name="@param">
						<description>asNode &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is a node,
 &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is an edge</description>
					</attribute>
					<attribute name="@return">
						<description>the object&apos;s attributes</description>
					</attribute>
				</comment>
				<params>
					<param name="object" comment="the object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" comment="&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is a node,
 &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is an edge" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getDependent" returncomment="the set of dependent attributes" fulltype="Attribute[]" type="Attribute">
				<comment>
					<description>Returns the set of attributes whose values depend on the given
 attribute &lt;code&gt;a&lt;/code&gt; for the given &lt;code&gt;object&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>object the object</description>
					</attribute>
					<attribute name="@param">
						<description>asNode &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is a node,
 &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is an edge</description>
					</attribute>
					<attribute name="@param">
						<description>a the attribute</description>
					</attribute>
					<attribute name="@return">
						<description>the set of dependent attributes</description>
					</attribute>
				</comment>
				<params>
					<param name="object" comment="the object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" comment="&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is a node,
 &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is an edge" fulltype="boolean" type="boolean" />
					<param name="a" comment="the attribute" fulltype="Attribute" type="Attribute" />
				</params>
			</method>
			<method visibility="public" name="getAccessor" returncomment="an accessor for the object&apos;s attribute value" fulltype="AttributeAccessor" type="AttributeAccessor">
				<comment>
					<description>Returns an attribute accessor for the given attribute on the given
 object.</description>
					<attribute name="@param">
						<description>object the object</description>
					</attribute>
					<attribute name="@param">
						<description>asNode &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is a node,
 &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is an edge</description>
					</attribute>
					<attribute name="@param">
						<description>attribute the attribute</description>
					</attribute>
					<attribute name="@return">
						<description>an accessor for the object&apos;s attribute value</description>
					</attribute>
				</comment>
				<params>
					<param name="object" comment="the object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" comment="&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is a node,
 &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is an edge" fulltype="boolean" type="boolean" />
					<param name="attribute" comment="the attribute" fulltype="Attribute" type="Attribute" />
				</params>
			</method>
			<method visibility="public" name="getInstantiator" fulltype="Instantiator" type="Instantiator">
				<params>
					<param name="node" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="accept" fulltype="void" type="void">
				<params>
					<param name="startNode" fulltype="java.lang.Object" type="Object" />
					<param name="visitor" fulltype="Visitor" type="Visitor" />
					<param name="placeInPath" fulltype="ArrayPath" type="ArrayPath" />
				</params>
			</method>
			<method visibility="public" name="getStateMap" fulltype="java.util.Map" type="Map" />
			<method visibility="public" name="createBooleanMap" fulltype="BooleanMap" type="BooleanMap" />
			<method visibility="public" name="createObjectMap" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
			<method visibility="public" name="getParentAttribute" returncomment="the parent attribute" fulltype="ObjectAttribute" type="ObjectAttribute">
				<comment>
					<description>Defines the derived attribute which has as value the parent object.</description>
					<attribute name="@return">
						<description>the parent attribute</description>
					</attribute>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
					<attribute name="@see">
						<description>#getTreePattern()</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getTreePattern" returncomment="an edge pattern" fulltype="EdgePattern" type="EdgePattern">
				<comment>
					<description>Defines the pattern used for the construction of this graph&apos;s tree.</description>
					<attribute name="@return">
						<description>an edge pattern</description>
					</attribute>
					<attribute name="@see">
						<description>Graph</description>
					</attribute>
					<attribute name="@see">
						<description>#getParentAttribute()</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSpecialEdgeDescriptors" fulltype="SpecialEdgeDescriptor[]" type="SpecialEdgeDescriptor">
				<params>
					<param name="node" fulltype="java.lang.Object" type="Object" />
					<param name="asSource" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getDescription" returncomment="a description of the given type, or &lt;code&gt;null&lt;/code&gt;" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns a description for the given object. The type of
 the desired description (e.g., text, icon) is specified in the argument
 &lt;code&gt;type&lt;/code&gt;; it is interpreted as in
 {@link Described#getDescription(String)}.</description>
					<attribute name="@param">
						<description>object the object</description>
					</attribute>
					<attribute name="@param">
						<description>asNode &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is a node,
 &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is an edge</description>
					</attribute>
					<attribute name="@param">
						<description>type the type of description</description>
					</attribute>
					<attribute name="@return">
						<description>a description of the given type, or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="object" comment="the object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" comment="&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is a node,
 &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is an edge" fulltype="boolean" type="boolean" />
					<param name="type" comment="the type of description" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getSymbol" fulltype="int" type="int">
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getColor" fulltype="int" type="int">
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="addChangeBoundaryListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="ChangeBoundaryListener" type="ChangeBoundaryListener" />
				</params>
			</method>
			<method visibility="public" name="removeChangeBoundaryListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="ChangeBoundaryListener" type="ChangeBoundaryListener" />
				</params>
			</method>
			<method visibility="public" name="addAttributeChangeListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="AttributeChangeListener" type="AttributeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="removeAttributeChangeListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="AttributeChangeListener" type="AttributeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="addEdgeChangeListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="EdgeChangeListener" type="EdgeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="removeEdgeChangeListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="EdgeChangeListener" type="EdgeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="addAttributeChangeListener" fulltype="void" type="void">
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
					<param name="l" fulltype="AttributeChangeListener" type="AttributeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="removeAttributeChangeListener" fulltype="void" type="void">
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
					<param name="l" fulltype="AttributeChangeListener" type="AttributeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="addEdgeChangeListener" fulltype="void" type="void">
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
					<param name="l" fulltype="EdgeChangeListener" type="EdgeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="removeEdgeChangeListener" fulltype="void" type="void">
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
					<param name="l" fulltype="EdgeChangeListener" type="EdgeChangeListener" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="PersistenceManager" visibility="public" package="de.grogra.graph.impl" superclassfulltype="PersistenceManager" fulltype="de.grogra.graph.impl.GraphManager" type="GraphManager">
		<implements>
			<interface fulltype="de.grogra.graph.Graph" type="Graph" />
		</implements>
		<fields>
			<field final="true" static="true" visibility="public" name="I18N" fulltype="I18NBundle" type="I18NBundle" />
			<field final="true" static="true" const="MetaGraph" visibility="public" name="META_GRAPH" constexpr="&quot;MetaGraph&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" visibility="public" name="STATIC" fulltype="de.grogra.graph.impl.GraphManager" type="GraphManager" />
			<field final="true" static="true" visibility="public" name="STATIC_STATE" fulltype="GraphState" type="GraphState" />
			<field final="true" static="true" const="1" visibility="package-private" name="GC_BITMARK_HANDLE" constexpr="1" fulltype="int" type="int" />
			<field final="true" visibility="package-private" name="support" fulltype="EventSupport" type="EventSupport" />
			<field visibility="public" name="rate" fulltype="double[]" type="double">
				<comment>
					<description>Stores a reference to the rate vector.
 When integration starts, a reference to the rate vector is stored here,
 so that PropertyRuntime.GraphProperty can access the rate vector.</description>
					<attribute name="@see">
						<description>de.grogra.rgg.model.PropertyRuntime.GraphProperty#defRateAssign()</description>
					</attribute>
				</comment>
			</field>
			<field final="true" visibility="public" name="baseMap" fulltype="LongToIntHashMap" type="LongToIntHashMap">
				<comment>
					<description>A mapping of each node ID (participating in integration) to an index into
 the rate vector is stored here. It is assumed, that all properties of a
 node participating in integration are stored in the rate array in a
 continuous block, where the start index of the block is the number stored
 in this mapping.</description>
				</comment>
			</field>
			<field visibility="package-private" name="loggingSuppressed" fulltype="boolean" type="boolean" />
			<field final="true" visibility="package-private" name="nodeForName" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
		</fields>
		<methods>
			<constructor visibility="public" name="GraphManager">
				<params>
					<param name="cx" fulltype="PersistenceConnection" type="PersistenceConnection" />
					<param name="key" fulltype="java.lang.String" type="String" />
					<param name="logLifeCycle" fulltype="boolean" type="boolean" />
					<param name="checkLock" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="initMainState" fulltype="void" type="void">
				<params>
					<param name="sync" fulltype="java.util.concurrent.Executor" type="Executor" />
				</params>
			</method>
			<method visibility="public" name="getMainState" fulltype="GraphState" type="GraphState">
				<annotation type="Override" fulltype="java.lang.Override" />
			</method>
			<method visibility="public" name="getStateMap" fulltype="java.util.Map" type="Map">
				<annotation type="Override" fulltype="java.lang.Override" />
			</method>
			<method visibility="public" name="addChangeBoundaryListener" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="l" fulltype="ChangeBoundaryListener" type="ChangeBoundaryListener" />
				</params>
			</method>
			<method visibility="public" name="removeChangeBoundaryListener" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="l" fulltype="ChangeBoundaryListener" type="ChangeBoundaryListener" />
				</params>
			</method>
			<method visibility="public" name="addAttributeChangeListener" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="l" fulltype="AttributeChangeListener" type="AttributeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="addEdgeChangeListener" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="l" fulltype="EdgeChangeListener" type="EdgeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="removeAttributeChangeListener" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="l" fulltype="AttributeChangeListener" type="AttributeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="removeEdgeChangeListener" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="l" fulltype="EdgeChangeListener" type="EdgeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="addAttributeChangeListener" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
					<param name="l" fulltype="AttributeChangeListener" type="AttributeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="removeAttributeChangeListener" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
					<param name="l" fulltype="AttributeChangeListener" type="AttributeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="addEdgeChangeListener" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
					<param name="l" fulltype="EdgeChangeListener" type="EdgeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="removeEdgeChangeListener" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
					<param name="l" fulltype="EdgeChangeListener" type="EdgeChangeListener" />
				</params>
			</method>
			<method visibility="public" name="setRoot" fulltype="void" type="void">
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
					<param name="root" fulltype="Node" type="Node" />
				</params>
			</method>
			<method visibility="public" name="getRoot" returncomment="root node of main graph" fulltype="Node" type="Node">
				<comment>
					<description>Returns the root node of the {@link Graph#MAIN_GRAPH} of this graph.</description>
					<attribute name="@return">
						<description>root node of main graph</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getRoot" fulltype="java.lang.Object" type="Object">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getRootKeys" fulltype="java.lang.String[]" type="String">
				<annotation type="Override" fulltype="java.lang.Override" />
			</method>
			<method visibility="public" name="logDataOnPersistenceChange" fulltype="void" type="void">
				<params>
					<param name="value" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="suppressLogging" fulltype="void" type="void">
				<params>
					<param name="value" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="createXAApplier" fulltype="TransactionApplier" type="TransactionApplier">
				<annotation type="Override" fulltype="java.lang.Override" />
			</method>
			<method visibility="protected" name="createTransaction" fulltype="Transaction" type="Transaction">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="thread" fulltype="java.lang.Thread" type="Thread" />
				</params>
			</method>
			<method visibility="protected" name="isAllowedThread" fulltype="boolean" type="boolean">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="write" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="executeInAllowedThread" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="r" fulltype="java.lang.Runnable" type="Runnable" />
				</params>
			</method>
			<method visibility="protected" name="invokeRun" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="task" fulltype="LockProtectedRunnable" type="LockProtectedRunnable" />
					<param name="sameThread" fulltype="boolean" type="boolean" />
					<param name="lock" fulltype="Lock" type="Lock" />
				</params>
			</method>
			<method visibility="protected" name="enterWriteLock" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
			</method>
			<method visibility="protected" name="leaveWriteLock" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
			</method>
			<method visibility="protected" name="prepareCompletion" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="t" fulltype="Transaction" type="Transaction" />
					<param name="commit" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="transactionApplied" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="xa" fulltype="Transaction.Data" type="Transaction.Data" />
					<param name="rollback" fulltype="boolean" type="boolean" />
					<param name="t" fulltype="Transaction" type="Transaction" />
				</params>
			</method>
			<method visibility="protected" name="completeTransaction" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="t" fulltype="Transaction" type="Transaction" />
					<param name="commit" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setProperty" fulltype="void" type="void">
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getProperty" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="package-private" name="getNodeOrPlaceholder" fulltype="Node" type="Node">
				<params>
					<param name="id" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="removeAllFromExtent" fulltype="void" type="void">
				<comment>
					<description>Removes all nodes in graph from extent.
 Used when automatically generated modules are recompiled.
 Then instances of the modules must be replaced with new instances of the newly compiled types.
 Old nodes of the old modules must be removed from the extent so they are no longer referenced.</description>
				</comment>
			</method>
			<method visibility="package-private" name="removeFromExtent" fulltype="void" type="void">
				<comment>
					<description>Removes a node from extent. Throws error if 
 illegal nodes (nodes without persistant implementation, i.e. nodes without id)
 are encountered.</description>
					<attribute name="@param">
						<description>n</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="" fulltype="Node" type="Node" />
				</params>
			</method>
			<method visibility="public" name="prepareId" fulltype="long" type="long">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="node" fulltype="PersistenceCapable" type="PersistenceCapable" />
				</params>
			</method>
			<method visibility="public" name="setMakePersistentTransitive" fulltype="void" type="void">
				<params>
					<param name="value" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="makePersistentImpl" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="o" fulltype="PersistenceCapable" type="PersistenceCapable" />
					<param name="id" fulltype="long" type="long" />
					<param name="t" fulltype="Transaction" type="Transaction" />
				</params>
			</method>
			<method visibility="package-private" name="finishMakePersistent" fulltype="void" type="void">
				<params>
					<param name="nodes" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
					<param name="start" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getExtent" fulltype="Extent" type="Extent">
				<params>
					<param name="type" fulltype="Type" type="Type" />
				</params>
			</method>
			<method visibility="public" name="getExtent" fulltype="Extent" type="Extent">
				<params>
					<param name="type" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="rebuildExtents" fulltype="void" type="void" />
			<method visibility="protected" name="makeTransientImpl" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="o" fulltype="PersistenceCapable" type="PersistenceCapable" />
					<param name="t" fulltype="Transaction" type="Transaction" />
				</params>
			</method>
			<method visibility="public" name="getObject" fulltype="Node" type="Node">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="id" fulltype="long" type="long" />
				</params>
			</method>
			<method final="true" visibility="public" name="allocateBitMark" fulltype="int" type="int">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="resetOnDispose" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="disposeBitMark" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="handle" fulltype="int" type="int" />
					<param name="resetAll" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="disposeBitMark" fulltype="void" type="void">
				<params>
					<param name="handle" fulltype="int" type="int" />
					<param name="resetAll" fulltype="boolean" type="boolean" />
					<param name="onlyNodes" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="allocateObjectMark" fulltype="int" type="int">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="resetOnDispose" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="disposeObjectMark" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="handle" fulltype="int" type="int" />
					<param name="resetAll" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="disposeObjectMark" fulltype="void" type="void">
				<params>
					<param name="handle" fulltype="int" type="int" />
					<param name="resetAll" fulltype="boolean" type="boolean" />
					<param name="onlyNodes" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="package-private" name="bitMarkSet" fulltype="void" type="void">
				<params>
					<param name="object" fulltype="Edge" type="Edge" />
					<param name="handle" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="package-private" name="objectMarkSet" fulltype="void" type="void">
				<params>
					<param name="object" fulltype="Edge" type="Edge" />
					<param name="handle" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="createBooleanMap" fulltype="BooleanMap" type="BooleanMap">
				<annotation type="Override" fulltype="java.lang.Override" />
			</method>
			<method visibility="public" name="createObjectMap" fulltype="&lt;any&gt;" type="&lt;any&gt;">
				<annotation type="Override" fulltype="java.lang.Override" />
			</method>
			<method visibility="public" name="writeExtent" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="out" fulltype="PersistenceOutputStream" type="PersistenceOutputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="writeExtent" fulltype="void" type="void">
				<params>
					<param name="out" fulltype="GraphOutput" type="GraphOutput" />
					<param name="root" fulltype="Node" type="Node" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="package-private" name="writeExtent0" fulltype="void" type="void">
				<params>
					<param name="out" fulltype="GraphOutput" type="GraphOutput" />
					<param name="root" fulltype="Node" type="Node" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="readExtent" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="in" fulltype="PersistenceInputStream" type="PersistenceInputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="package-private" name="sharedObjectModified" fulltype="void" type="void">
				<params>
					<param name="e" fulltype="java.beans.PropertyChangeEvent" type="PropertyChangeEvent" />
				</params>
			</method>
			<method visibility="public" name="addSharedObjectListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="java.beans.PropertyChangeListener" type="PropertyChangeListener" />
				</params>
			</method>
			<method visibility="public" name="removeSharedObjectListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="java.beans.PropertyChangeListener" type="PropertyChangeListener" />
				</params>
			</method>
			<method final="true" visibility="public" name="accept" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="start" fulltype="java.lang.Object" type="Object" />
					<param name="v" fulltype="Visitor" type="Visitor" />
					<param name="placeInPath" fulltype="ArrayPath" type="ArrayPath" />
				</params>
			</method>
			<method static="true" visibility="public" name="acceptGraph" fulltype="void" type="void">
				<params>
					<param name="root" fulltype="Node" type="Node" />
					<param name="v" fulltype="Visitor" type="Visitor" />
					<param name="pathToUse" fulltype="ArrayPath" type="ArrayPath" />
				</params>
			</method>
			<method visibility="public" name="createStaticState" fulltype="GraphState" type="GraphState">
				<params>
					<param name="tc" fulltype="ThreadContext" type="ThreadContext" />
				</params>
			</method>
			<method visibility="public" name="getParentAttribute" fulltype="ObjectAttribute" type="ObjectAttribute">
				<annotation type="Override" fulltype="java.lang.Override" />
			</method>
			<method visibility="public" name="getTreePattern" fulltype="EdgePattern" type="EdgePattern">
				<annotation type="Override" fulltype="java.lang.Override" />
			</method>
			<method visibility="public" name="getProviderName" fulltype="java.lang.String" type="String">
				<annotation type="Override" fulltype="java.lang.Override" />
			</method>
			<method visibility="public" name="readReference" fulltype="ResolvableReference" type="ResolvableReference">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="in" fulltype="PersistenceInput" type="PersistenceInput" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="writeObject" fulltype="void" type="void">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="object" fulltype="Shareable" type="Shareable" />
					<param name="out" fulltype="PersistenceOutput" type="PersistenceOutput" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="addMetaNode" fulltype="void" type="void">
				<params>
					<param name="node" fulltype="Node" type="Node" />
					<param name="t" fulltype="Transaction" type="Transaction" />
				</params>
			</method>
			<method visibility="public" name="removeMetaNode" fulltype="void" type="void">
				<params>
					<param name="node" fulltype="Node" type="Node" />
					<param name="t" fulltype="Transaction" type="Transaction" />
				</params>
			</method>
			<method visibility="public" name="getLifeCycleState" fulltype="int" type="int">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getId" fulltype="long" type="long">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="node" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getNodeForId" fulltype="java.lang.Object" type="Object">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="id" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="getObjectForName" fulltype="java.lang.Object" type="Object">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="node" fulltype="boolean" type="boolean" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getNodeForName" fulltype="Node" type="Node">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getDescription" fulltype="java.lang.Object" type="Object">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
					<param name="type" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getSpecialEdgeDescriptors" fulltype="SpecialEdgeDescriptor[]" type="SpecialEdgeDescriptor">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="node" fulltype="java.lang.Object" type="Object" />
					<param name="asSource" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getSymbol" fulltype="int" type="int">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getColor" fulltype="int" type="int">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getAttributes" fulltype="Attribute[]" type="Attribute">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getDependent" fulltype="Attribute[]" type="Attribute">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
					<param name="a" fulltype="Attribute" type="Attribute" />
				</params>
			</method>
			<method visibility="public" name="getAccessor" fulltype="AttributeAccessor" type="AttributeAccessor">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
					<param name="asNode" fulltype="boolean" type="boolean" />
					<param name="attribute" fulltype="Attribute" type="Attribute" />
				</params>
			</method>
			<method visibility="public" name="getFirstEdge" fulltype="java.lang.Object" type="Object">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="node" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getInstantiator" fulltype="Instantiator" type="Instantiator">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="node" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getEdgeBits" fulltype="int" type="int">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="edge" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getSourceNode" fulltype="java.lang.Object" type="Object">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="edge" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getTargetNode" fulltype="java.lang.Object" type="Object">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="edge" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getNextEdge" fulltype="java.lang.Object" type="Object">
				<annotation type="Override" fulltype="java.lang.Override" />
				<params>
					<param name="edge" fulltype="java.lang.Object" type="Object" />
					<param name="parentNode" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="dumpNodeStatistics" fulltype="void" type="void">
				<params>
					<param name="out" fulltype="java.io.PrintWriter" type="PrintWriter" />
				</params>
			</method>
			<method visibility="public" name="dumpNodeStatistics" fulltype="void" type="void">
				<params>
					<param name="out" fulltype="java.io.OutputStream" type="OutputStream" />
				</params>
			</method>
			<method visibility="public" name="toXLString" returncomment="" fulltype="java.lang.String" type="String">
				<comment>
					<description>Parses the GraphManager.MAIN_GRAPH and generates a textual representation of it.
 with classes and id&apos;s</description>
					<attribute name="@param">
						<description>qualified</description>
					</attribute>
					<attribute name="@param">
						<description>ids</description>
					</attribute>
					<attribute name="@return" />
				</comment>
				<params>
					<param name="qualified" comment="" fulltype="boolean" type="boolean" />
					<param name="ids" comment="" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="toXLString" returncomment="" fulltype="java.lang.String" type="String">
				<comment>
					<description>Parses the GraphManager.MAIN_GRAPH and generates a textual representation of it. 
 with classes</description>
					<attribute name="@param">
						<description>qualified</description>
					</attribute>
					<attribute name="@return" />
				</comment>
				<params>
					<param name="qualified" comment="" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="toXLString" returncomment="" fulltype="java.lang.String" type="String">
				<comment>
					<description>Parses the graph from the rootKey and generates a textual representation of it.</description>
					<attribute name="@param">
						<description>qualified</description>
					</attribute>
					<attribute name="@param">
						<description>rootKey {GraphManager.MAIN_GRAPH, GraphManager.META_GRAPH, GraphManager.COMPONENT_GRAPH}</description>
					</attribute>
					<attribute name="@return" />
				</comment>
				<params>
					<param name="qualified" comment="" fulltype="boolean" type="boolean" />
					<param name="rootKey" comment="{GraphManager.MAIN_GRAPH, GraphManager.META_GRAPH, GraphManager.COMPONENT_GRAPH}" fulltype="java.lang.String" type="String" />
					<param name="ids" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getGraphSize" returncomment="" fulltype="int" type="int">
				<comment>
					<description>Number of nodes of the specified graph.</description>
					<attribute name="@param">
						<description>graph identification key (one of: MAIN_GRAPH, COMPONENT_GRAPH, META_GRAPH)</description>
					</attribute>
					<attribute name="@return" />
				</comment>
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getGraphSize" returncomment="" fulltype="int" type="int">
				<comment>
					<description>Number of nodes in the main graph.
 same as count((* Node *))</description>
					<attribute name="@return" />
				</comment>
			</method>
			<method visibility="public" name="getMetaGraphSize" returncomment="" fulltype="int" type="int">
				<comment>
					<description>Number of nodes in the meta graph.</description>
					<attribute name="@return" />
				</comment>
			</method>
			<method visibility="public" name="contains" returncomment="true, if the graph starting with root contains a node with the specified name" fulltype="boolean" type="boolean">
				<comment>
					<description>Check if the graph contains a node with the specified name.</description>
					<attribute name="@param">
						<description>String name</description>
					</attribute>
					<attribute name="@param">
						<description>Node root</description>
					</attribute>
					<attribute name="@return">
						<description>true, if the graph starting with root contains a node with the specified name</description>
					</attribute>
				</comment>
				<params>
					<param name="root" fulltype="Node" type="Node" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getNodeForName" returncomment="node, if the graph starting with root contains a node with the specified name" fulltype="Node" type="Node">
				<comment>
					<description>Check if the graph contains a node with the specified name and possibly returns it.</description>
					<attribute name="@param">
						<description>String name</description>
					</attribute>
					<attribute name="@param">
						<description>Node root</description>
					</attribute>
					<attribute name="@return">
						<description>node, if the graph starting with root contains a node with the specified name</description>
					</attribute>
				</comment>
				<params>
					<param name="root" fulltype="Node" type="Node" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="de.grogra.rgg" superclassfulltype="java.lang.Object" fulltype="de.grogra.rgg.Library" type="Library">
		<comment>
			<description>This class contains a collection of methods and constants which are
 useful in RGG modelling, especially in 3D.</description>
			<attribute name="@author">
				<description>Ole Kniemeyer</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="256" visibility="public" name="successor" constexpr="256" fulltype="int" type="int">
				<comment>
					<description>This is a redefinition of {@link Graph#SUCCESSOR_EDGE}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="512" visibility="public" name="branch" constexpr="512" fulltype="int" type="int">
				<comment>
					<description>This is a redefinition of {@link Graph#BRANCH_EDGE}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="1024" visibility="public" name="contains" constexpr="1024" fulltype="int" type="int">
				<comment>
					<description>This is a redefinition of {@link Graph#CONTAINMENT_EDGE}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="4096" visibility="public" name="refine" constexpr="4096" fulltype="int" type="int">
				<comment>
					<description>This is a redefinition of {@link Graph#REFINEMENT_EDGE}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="16384" visibility="public" name="notifies" constexpr="16384" fulltype="int" type="int">
				<comment>
					<description>This is a redefinition of {@link Graph#NOTIFIES_EDGE}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="8192" visibility="public" name="mark" constexpr="8192" fulltype="int" type="int">
				<comment>
					<description>This is a redefinition of {@link Graph#MARK_EDGE}.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="updates" fulltype="int" type="int">
				<comment>
					<description>This is a redefinition of {@link FieldUpdater#UPDATES}.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="master" fulltype="int" type="int">
				<comment>
					<description>This is a redefinition of {@link Instance3D#MASTER}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="131072" visibility="public" name="EDGE_0" constexpr="131072" fulltype="int" type="int" />
			<field final="true" static="true" const="262144" visibility="public" name="EDGE_1" constexpr="262144" fulltype="int" type="int" />
			<field final="true" static="true" const="524288" visibility="public" name="EDGE_2" constexpr="524288" fulltype="int" type="int" />
			<field final="true" static="true" const="1048576" visibility="public" name="EDGE_3" constexpr="1048576" fulltype="int" type="int" />
			<field final="true" static="true" const="2097152" visibility="public" name="EDGE_4" constexpr="2097152" fulltype="int" type="int" />
			<field final="true" static="true" const="4194304" visibility="public" name="EDGE_5" constexpr="4194304" fulltype="int" type="int" />
			<field final="true" static="true" const="8388608" visibility="public" name="EDGE_6" constexpr="8388608" fulltype="int" type="int" />
			<field final="true" static="true" const="16777216" visibility="public" name="EDGE_7" constexpr="16777216" fulltype="int" type="int" />
			<field final="true" static="true" const="33554432" visibility="public" name="EDGE_8" constexpr="33554432" fulltype="int" type="int" />
			<field final="true" static="true" const="67108864" visibility="public" name="EDGE_9" constexpr="67108864" fulltype="int" type="int" />
			<field final="true" static="true" const="134217728" visibility="public" name="EDGE_10" constexpr="134217728" fulltype="int" type="int" />
			<field final="true" static="true" const="268435456" visibility="public" name="EDGE_11" constexpr="268435456" fulltype="int" type="int" />
			<field final="true" static="true" const="536870912" visibility="public" name="EDGE_12" constexpr="536870912" fulltype="int" type="int" />
			<field final="true" static="true" const="1073741824" visibility="public" name="EDGE_13" constexpr="1073741824" fulltype="int" type="int" />
			<field final="true" static="true" const="-2147483648" visibility="public" name="EDGE_14" constexpr="-2147483648" fulltype="int" type="int" />
			<field final="true" static="true" visibility="public" name="SKIN" fulltype="byte" type="byte">
				<comment>
					<description>Constant for {@link NURBSSurface#NURBSSurface(byte)} indicating a
 skinned surface (defined by a set of profile curves in space).</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SWEEP" fulltype="byte" type="byte">
				<comment>
					<description>Constant for {@link NURBSSurface#NURBSSurface(byte)} indicating a
 swept surface (defined by a set of vertices in space).</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="I18N" fulltype="I18NBundle" type="I18NBundle">
				<comment>
					<description>The resource bundle for the &lt;code&gt;de.grogra.rgg&lt;/code&gt; package.</description>
				</comment>
			</field>
			<field final="true" static="true" const="0.017453292519943295" visibility="public" name="DEG" constexpr="0.017453292519943295" fulltype="double" type="double">
				<comment>
					<description>Conversion factor from degree to radians.</description>
				</comment>
			</field>
			<field final="true" static="true" const="57.29577951308232" visibility="public" name="R2D" constexpr="57.29577951308232" fulltype="double" type="double">
				<comment>
					<description>Conversion factor from radians to degree.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LEFT" fulltype="Vector3d" type="Vector3d">
				<comment>
					<description>Vector pointing in the x-direction (the turtle&apos;s left axis).
 Do not modify its contents.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="UP" fulltype="Vector3d" type="Vector3d">
				<comment>
					<description>Vector pointing in the y-direction (the turtle&apos;s up axis).
 Do not modify its contents.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="HEAD" fulltype="Vector3d" type="Vector3d">
				<comment>
					<description>Vector pointing in the z-direction (the turtle&apos;s head axis).
 Do not modify its contents.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ORIGIN" fulltype="Point3d" type="Point3d">
				<comment>
					<description>Point having coordinates (0, 0, 0).
 Do not modify its contents.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="makeGraph" fulltype="RGGProducer.Creator" type="RGGProducer.Creator" />
			<field final="true" static="true" const="1" visibility="public" name="CONVEXHULL" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="0" visibility="public" name="BOUNDING_RECTANGLE" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="ALPHA_SHAPE" constexpr="2" fulltype="int" type="int" />
			<field static="true" visibility="public" name="DEFAULT_LEAF3D" fulltype="float[][]" type="float" />
			<field static="true" visibility="public" name="DEFAULT_LEAF3D_NAME" fulltype="java.lang.String[]" type="String" />
			<field final="true" static="true" visibility="public" name="out" fulltype="java.io.PrintWriter" type="PrintWriter">
				<comment>
					<description>This field provides a &lt;code&gt;PrintWriter&lt;/code&gt; to write
 to the XL console.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Library" />
			<method static="true" visibility="public" name="console" returncomment="current console or &lt;code&gt;null&lt;/code&gt;" fulltype="Console" type="Console">
				<comment>
					<description>Returns the currently active &lt;code&gt;Console&lt;/code&gt;. This may return
 &lt;code&gt;null&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>current console or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="workbench" returncomment="current workbench or &lt;code&gt;null&lt;/code&gt;" fulltype="IMPWorkbench" type="IMPWorkbench">
				<comment>
					<description>Returns the currently active &lt;code&gt;Workbench&lt;/code&gt;. This may return
 &lt;code&gt;null&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>current workbench or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="closeWorkbench" fulltype="void" type="void">
				<comment>
					<description>Closes the currently active &lt;code&gt;Workbench&lt;/code&gt; if such a workbench
 exists. Note that unsaved modifications are lost, because the user is
 not asked.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="graph" returncomment="current project graph or &lt;code&gt;null&lt;/code&gt;" fulltype="de.grogra.graph.impl.GraphManager" type="GraphManager">
				<comment>
					<description>Returns the current project graph, i.e., the project graph of the
 currently active &lt;code&gt;Workbench&lt;/code&gt;. This may return
 &lt;code&gt;null&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>current project graph or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="graphState" returncomment="current graph state" fulltype="GraphState" type="GraphState">
				<comment>
					<description>Returns the current graph state, i.e., the current graph state of the
 project graph of the currently active &lt;code&gt;Workbench&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>current graph state</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="extent" fulltype="RGGGraph" type="RGGGraph">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
			</method>
			<method static="true" visibility="public" name="rggGraph" fulltype="RGGGraph" type="RGGGraph" />
			<method static="true" visibility="public" name="allowNoninjectiveMatchesByDefault" fulltype="void" type="void">
				<params>
					<param name="value" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="allowNoninjectiveMatchesForNextQuery" fulltype="void" type="void">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="value" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="setDerivationMode" fulltype="void" type="void">
				<params>
					<param name="mode" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="undo" fulltype="void" type="void">
				<comment>
					<description>Undo the last derivation step.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="namedNode" returncomment="a node whose name is &lt;code&gt;name&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;
 if no such node exists" fulltype="Node" type="Node">
				<comment>
					<description>Returns a node having the specified &lt;code&gt;name&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>name name of a node</description>
					</attribute>
					<attribute name="@return">
						<description>a node whose name is &lt;code&gt;name&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;
 if no such node exists</description>
					</attribute>
					<attribute name="@see">
						<description>GraphManager#getNodeForName</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="name of a node" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="setStatus" fulltype="void" type="void">
				<comment>
					<description>Displays &lt;code&gt;text&lt;/code&gt; in the current status bar.</description>
					<attribute name="@param">
						<description>text a text to be displayed</description>
					</attribute>
				</comment>
				<params>
					<param name="text" comment="a text to be displayed" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="chart" fulltype="void" type="void">
				<comment>
					<description>Shows the data referenced by &lt;code&gt;ds&lt;/code&gt; in a chart panel.
 &lt;code&gt;type&lt;/code&gt; is one of the constants declared in
 {@link ChartPanel}, this specifies the type of chart.</description>
					<attribute name="@param">
						<description>ds reference to a {@link de.grogra.pf.data.Dataset}</description>
					</attribute>
					<attribute name="@param">
						<description>type chart type</description>
					</attribute>
				</comment>
				<params>
					<param name="ds" comment="reference to a {@link de.grogra.pf.data.Dataset}" fulltype="DatasetRef" type="DatasetRef" />
					<param name="type" comment="chart type" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="axisparent" fulltype="Node" type="Node">
				<params>
					<param name="child" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="isAncestor" returncomment="&lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;a&lt;/code&gt; is an ancestor
 of &lt;code&gt;d&lt;/code&gt;" fulltype="boolean" type="boolean">
				<comment>
					<description>Tests whether &lt;code&gt;a&lt;/code&gt; is an ancestor of &lt;code&gt;d&lt;/code&gt;
 (or &lt;code&gt;d&lt;/code&gt; itself), i.e., if &lt;code&gt;a&lt;/code&gt; can be reached
 from &lt;code&gt;d&lt;/code&gt; by a backward traversal of edges matching
 &lt;code&gt;edgeMask&lt;/code&gt; (see {@link Edge#testEdgeBits(int)}).
 Note that this method expects the relevant part of the subgraph
 spanned by matching edges to be a tree.</description>
					<attribute name="@param">
						<description>a the potential ancestor</description>
					</attribute>
					<attribute name="@param">
						<description>d the potential descendant</description>
					</attribute>
					<attribute name="@param">
						<description>edgeMask the edge mask to use</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;a&lt;/code&gt; is an ancestor
 of &lt;code&gt;d&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the potential ancestor" fulltype="Node" type="Node" />
					<param name="d" comment="the potential descendant" fulltype="Node" type="Node" />
					<param name="edgeMask" comment="the edge mask to use" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="irandom" returncomment="integral random number between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;" fulltype="int" type="int">
				<comment>
					<description>Returns a uniformly distributed integral pseudorandom number
 between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; (inclusive).</description>
					<attribute name="@param">
						<description>min minimal value</description>
					</attribute>
					<attribute name="@param">
						<description>max maximal value</description>
					</attribute>
					<attribute name="@return">
						<description>integral random number between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>#setSeed(long)</description>
					</attribute>
				</comment>
				<params>
					<param name="min" comment="minimal value" fulltype="int" type="int" />
					<param name="max" comment="maximal value" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="random" returncomment="random number between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;" fulltype="float" type="float">
				<comment>
					<description>Returns a uniformly distributed pseudorandom number
 between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>min minimal value</description>
					</attribute>
					<attribute name="@param">
						<description>max maximal value</description>
					</attribute>
					<attribute name="@return">
						<description>random number between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>#setSeed(long)</description>
					</attribute>
				</comment>
				<params>
					<param name="min" comment="minimal value" fulltype="float" type="float" />
					<param name="max" comment="maximal value" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="probability" returncomment="random value" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the value of a &lt;code&gt;boolean&lt;/code&gt; pseudorandom variable
 whose probability for &lt;code&gt;true&lt;/code&gt; is &lt;code&gt;p&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>p probability for &lt;code&gt;true&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>random value</description>
					</attribute>
					<attribute name="@see">
						<description>#setSeed(long)</description>
					</attribute>
				</comment>
				<params>
					<param name="p" comment="probability for &lt;code&gt;true&lt;/code&gt;" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="normal" returncomment="normally distributed random number" fulltype="float" type="float">
				<comment>
					<description>Returns a pseudorandom number which is distributed according
 to a normal distribution with mean value &lt;code&gt;mu&lt;/code&gt; and standard
 deviation &lt;code&gt;sigma&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>mu mean value</description>
					</attribute>
					<attribute name="@param">
						<description>sigma standard deviation</description>
					</attribute>
					<attribute name="@return">
						<description>normally distributed random number</description>
					</attribute>
					<attribute name="@see">
						<description>#setSeed(long)</description>
					</attribute>
				</comment>
				<params>
					<param name="mu" comment="mean value" fulltype="float" type="float" />
					<param name="sigma" comment="standard deviation" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="lognormal" fulltype="double" type="double">
				<params>
					<param name="mu" fulltype="double" type="double" />
					<param name="sigma" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="normal" returncomment="normally distributed random number" fulltype="double" type="double">
				<comment>
					<description>Returns a pseudorandom number which is distributed according
 to a normal distribution with mean value &lt;code&gt;mu&lt;/code&gt; and standard
 deviation &lt;code&gt;sigma&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>mu mean value</description>
					</attribute>
					<attribute name="@param">
						<description>sigma standard deviation</description>
					</attribute>
					<attribute name="@return">
						<description>normally distributed random number</description>
					</attribute>
					<attribute name="@see">
						<description>#setSeed(long)</description>
					</attribute>
				</comment>
				<params>
					<param name="mu" comment="mean value" fulltype="double" type="double" />
					<param name="sigma" comment="standard deviation" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="distribution" returncomment="random number according to &lt;code&gt;probabilities&lt;/code&gt;" fulltype="int" type="int">
				<comment>
					<description>Returns an integral pseudorandom number according to the
 discrete distribution &lt;code&gt;probabilities&lt;/code&gt;. The
 value &lt;code&gt;i&lt;/code&gt; has the probability
 &lt;code&gt;probabilities[i]&lt;/code&gt; for
 &lt;code&gt;0 &lt;= i &lt; probabilities.length&lt;/code&gt;, the
 value &lt;code&gt;probabilities.length&lt;/code&gt; has the
 remaining probability, i.e., the difference between
 the sum of &lt;code&gt;probabilities&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>probabilities array of discrete probabilities</description>
					</attribute>
					<attribute name="@return">
						<description>random number according to &lt;code&gt;probabilities&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>#setSeed(long)</description>
					</attribute>
				</comment>
				<params>
					<param name="probabilities" comment="array of discrete probabilities" fulltype="float[]" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="setSeed" fulltype="void" type="void">
				<comment>
					<description>This method sets the seed for the pseudorandom number generator
 which is used by the random methods in this class. This is the
 generator obtained by {@link Operators#getRandomGenerator()}
 within the current thread.</description>
					<attribute name="@param">
						<description>seed a seed</description>
					</attribute>
				</comment>
				<params>
					<param name="seed" comment="a seed" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="ancestor" returncomment="nearest ancestor of type &lt;code&gt;t&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;" fulltype="Node" type="Node">
				<comment>
					<description>Returns the nearest ancestor of &lt;code&gt;n&lt;/code&gt; which is an instance
 of &lt;code&gt;t&lt;/code&gt;. Ancestors are those nodes which can be reached by
 traversing {@link #successor}- or {@link #branch}-edges backwards.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>t the type so search for</description>
					</attribute>
					<attribute name="@return">
						<description>nearest ancestor of type &lt;code&gt;t&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="a node" fulltype="Node" type="Node" />
					<param name="t" comment="the type so search for" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="minDescendants" returncomment="&lt;code&gt;null&lt;/code&gt;" fulltype="Node" type="Node">
				<comment>
					<description>This generator method yields all descendants of &lt;code&gt;n&lt;/code&gt;
 which are instances of &lt;code&gt;t&lt;/code&gt; and which have no
 other instance of &lt;code&gt;t&lt;/code&gt; in their path to &lt;code&gt;n&lt;/code&gt;.
 Descendants are those nodes which can be reached by
 traversing {@link #successor}- or {@link #branch}-edges forwards.</description>
					<attribute name="@param">
						<description>cb a consumer instance receiving the nodes (provided by the XL compiler)</description>
					</attribute>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>t the type to seach for</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="cb" comment="a consumer instance receiving the nodes (provided by the XL compiler)" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
					<param name="n" comment="a node" fulltype="Node" type="Node" />
					<param name="t" comment="the type to seach for" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="ancestor" returncomment="nearest ancestor fulfilling &lt;code&gt;condition&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;" fulltype="Node" type="Node">
				<comment>
					<description>Returns the nearest ancestor of &lt;code&gt;n&lt;/code&gt; which fulfills
 &lt;code&gt;condition&lt;/code&gt;. Ancestors are those nodes which can be reached by
 traversing {@link #successor}- or {@link #branch}-edges backwards.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>condition a condition</description>
					</attribute>
					<attribute name="@return">
						<description>nearest ancestor fulfilling &lt;code&gt;condition&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="a node" fulltype="Node" type="Node" />
					<param name="condition" comment="a condition" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="successor" returncomment="nearest successor fulfilling &lt;code&gt;condition&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;" fulltype="Node" type="Node">
				<comment>
					<description>Returns the nearest successor of &lt;code&gt;n&lt;/code&gt; which fulfills
 &lt;code&gt;condition&lt;/code&gt;. Successors are those nodes which can be reached by
 traversing {@link #successor}-edges forwards.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>condition a condition</description>
					</attribute>
					<attribute name="@return">
						<description>nearest successor fulfilling &lt;code&gt;condition&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="a node" fulltype="Node" type="Node" />
					<param name="condition" comment="a condition" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="descendants" returncomment="&lt;code&gt;null&lt;/code&gt;" fulltype="Node" type="Node">
				<comment>
					<description>This generator method yields all descendants of &lt;code&gt;n&lt;/code&gt;
 which are instances of &lt;code&gt;cls&lt;/code&gt;.
 Descendants are those nodes which can be reached by
 traversing {@link #successor}- or {@link #branch}-edges forwards.</description>
					<attribute name="@param">
						<description>cb a consumer instance receiving the nodes (provided by the XL compiler)</description>
					</attribute>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>cls the type to seach for</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="cb" comment="a consumer instance receiving the nodes (provided by the XL compiler)" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
					<param name="n" comment="a node" fulltype="Node" type="Node" />
					<param name="cls" comment="the type to seach for" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="filter" returncomment="a condition" fulltype="&lt;any&gt;" type="&lt;any&gt;">
				<comment>
					<description>Creates a condition which is fulfilled for an object
 iff it is an instance of at least one of the specified
 &lt;code&gt;classes&lt;/code&gt; (or iff it is not an instance
 in case &lt;code&gt;isTrue&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;).</description>
					<attribute name="@param">
						<description>classes list of classes</description>
					</attribute>
					<attribute name="@param">
						<description>isTrue condition value iff object is an instance of one of &lt;code&gt;classes&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>a condition</description>
					</attribute>
				</comment>
				<params>
					<param name="classes" comment="list of classes" fulltype="java.lang.Class[]" type="Class" />
					<param name="isTrue" comment="condition value iff object is an instance of one of &lt;code&gt;classes&lt;/code&gt;" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="transformation" returncomment="the node&apos;s global coordinate transformation" fulltype="Matrix34d" type="Matrix34d">
				<comment>
					<description>Computes the global coordinate transformation of the &lt;code&gt;node&lt;/code&gt;.
 The returned matrix must not be modified.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the node&apos;s global coordinate transformation</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="transformation" returncomment="the node&apos;s global coordinate transformation" fulltype="Matrix34d" type="Matrix34d">
				<comment>
					<description>Computes the global coordinate transformation of the &lt;code&gt;node&lt;/code&gt;.
 If &lt;code&gt;post&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the transformation of
 the &lt;code&gt;node&lt;/code&gt; itself is returned, otherwise the
 transformation of its children. These may differ if &lt;code&gt;node&lt;/code&gt;
 induces a change of coordinates.
 The returned matrix must not be modified.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@param">
						<description>post &lt;code&gt;true&lt;/code&gt; iff the post-transformation (of the
 node&apos;s children) shall be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the node&apos;s global coordinate transformation</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="a node" fulltype="Node" type="Node" />
					<param name="post" comment="&lt;code&gt;true&lt;/code&gt; iff the post-transformation (of the
 node&apos;s children) shall be returned" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="location" fulltype="void" type="void">
				<comment>
					<description>Computes the location of &lt;code&gt;node&lt;/code&gt; in global coordinates.
 The computed value is written to &lt;code&gt;location&lt;/code&gt;. The location
 is defined by the point (0, 0, 0) in local coordinates of the
 &lt;code&gt;node&lt;/code&gt; if &lt;code&gt;end&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;,
 or of the &lt;code&gt;node&lt;/code&gt;&apos;s children if &lt;code&gt;end&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>loc receives the location</description>
					</attribute>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@param">
						<description>end use location or end location of &lt;code&gt;node&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="loc" comment="receives the location" fulltype="Tuple3d" type="Tuple3d" />
					<param name="node" comment="a node" fulltype="Node" type="Node" />
					<param name="end" comment="use location or end location of &lt;code&gt;node&lt;/code&gt;" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="direction" fulltype="void" type="void">
				<comment>
					<description>Computes the growth direction of the turtle
 at &lt;code&gt;node&lt;/code&gt; in global coordinates.
 The computed value is written to &lt;code&gt;direction&lt;/code&gt;. The direction
 is defined by the direction (0, 0, 1) in local coordinates of the
 &lt;code&gt;node&lt;/code&gt; if &lt;code&gt;end&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;,
 or of the &lt;code&gt;node&lt;/code&gt;&apos;s children if &lt;code&gt;end&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>dir receives the direction</description>
					</attribute>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@param">
						<description>end use location or end location of &lt;code&gt;node&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="dir" comment="receives the direction" fulltype="Tuple3d" type="Tuple3d" />
					<param name="node" comment="a node" fulltype="Node" type="Node" />
					<param name="end" comment="use location or end location of &lt;code&gt;node&lt;/code&gt;" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="location" returncomment="the &lt;code&gt;node&lt;/code&gt;&apos;s location in global coordinates" fulltype="Point3d" type="Point3d">
				<comment>
					<description>Computes the location of &lt;code&gt;node&lt;/code&gt; in global coordinates.
 The location is defined by the point (0, 0, 0) in local coordinates.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the &lt;code&gt;node&lt;/code&gt;&apos;s location in global coordinates</description>
					</attribute>
					<attribute name="@see">
						<description>#location(Tuple3d, Node, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="toPoint3d" returncomment="the &lt;code&gt;node&lt;/code&gt;&apos;s location in global coordinates" fulltype="Point3d" type="Point3d">
				<comment>
					<description>The same as {@link #location(Node)}. This method is designed
 as an auto-conversion method.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the &lt;code&gt;node&lt;/code&gt;&apos;s location in global coordinates</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="toTuple3d" fulltype="Tuple3d" type="Tuple3d">
				<params>
					<param name="node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="direction" returncomment="the turtle&apos;s growth direction at &lt;code&gt;node&lt;/code&gt;" fulltype="Vector3d" type="Vector3d">
				<comment>
					<description>Computes the growth direction of the turtle
 at &lt;code&gt;node&lt;/code&gt; in global coordinates.
 The direction is defined by the direction (0, 0, 1) in local coordinates.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the turtle&apos;s growth direction at &lt;code&gt;node&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>#direction(Tuple3d, Node, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="endlocation" returncomment="the &lt;code&gt;node&lt;/code&gt;&apos;s end location in global coordinates" fulltype="Point3d" type="Point3d">
				<comment>
					<description>Computes the end location of &lt;code&gt;node&lt;/code&gt; in global coordinates.
 The end location is defined by the point (0, 0, 0) in local coordinates
 of &lt;code&gt;node&lt;/code&gt;&apos;s children.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the &lt;code&gt;node&lt;/code&gt;&apos;s end location in global coordinates</description>
					</attribute>
					<attribute name="@see">
						<description>#location(Tuple3d, Node, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="enddirection" returncomment="the turtle&apos;s growth direction at &lt;code&gt;node&lt;/code&gt;&apos;s
 children" fulltype="Vector3d" type="Vector3d">
				<comment>
					<description>Computes the growth direction of the turtle
 at the end of &lt;code&gt;node&lt;/code&gt; in global coordinates.
 The direction is defined by the direction (0, 0, 1) in
 local coordinates of &lt;code&gt;node&lt;/code&gt;&apos;s children.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the turtle&apos;s growth direction at &lt;code&gt;node&lt;/code&gt;&apos;s
 children</description>
					</attribute>
					<attribute name="@see">
						<description>#direction(Tuple3d, Node, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="angle" returncomment="the rotation angle of the transformation of &lt;code&gt;node&lt;/code&gt;,
 in degrees" fulltype="double" type="double">
				<comment>
					<description>Computes the rotation angle in degrees of the transformation
 defined by &lt;code&gt;node&lt;/code&gt;. The computed value will be correct
 if the transformation is a rotation, possibly combined with a uniform
 scaling.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the rotation angle of the transformation of &lt;code&gt;node&lt;/code&gt;,
 in degrees</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="inclination" fulltype="double" type="double">
				<params>
					<param name="node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="angle" fulltype="double" type="double">
				<params>
					<param name="a" fulltype="Tuple3d" type="Tuple3d" />
					<param name="b" fulltype="Tuple3d" type="Tuple3d" />
				</params>
			</method>
			<method static="true" visibility="public" name="setRandomTransform" fulltype="void" type="void">
				<params>
					<param name="target" fulltype="Null" type="Null" />
					<param name="center" fulltype="Transform3D" type="Transform3D" />
					<param name="sigma" fulltype="double" type="double" />
					<param name="minX" fulltype="double" type="double" />
					<param name="minY" fulltype="double" type="double" />
					<param name="maxX" fulltype="double" type="double" />
					<param name="maxY" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="distanceSquared" returncomment="squared distance between a and b" fulltype="double" type="double">
				<comment>
					<description>Calculate squared distance between node a an node b.</description>
					<attribute name="@param">
						<description>a node a</description>
					</attribute>
					<attribute name="@param">
						<description>b node b</description>
					</attribute>
					<attribute name="@return">
						<description>squared distance between a and b</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="node a" fulltype="Node" type="Node" />
					<param name="b" comment="node b" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="distance" returncomment="global distance between nodes" fulltype="double" type="double">
				<comment>
					<description>Computes the global distance between two nodes. The distance is
 measured between the points (0, 0, 0) in the local coordinate
 systems of the nodes.</description>
					<attribute name="@param">
						<description>a first node</description>
					</attribute>
					<attribute name="@param">
						<description>b second node</description>
					</attribute>
					<attribute name="@return">
						<description>global distance between nodes</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="first node" fulltype="Node" type="Node" />
					<param name="b" comment="second node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="cone" returncomment="instance of &lt;code&gt;Cone&lt;/code&gt; corresponding to the specified geometry" fulltype="Cone" type="Cone">
				<comment>
					<description>Returns a cone whose tip is located at &lt;code&gt;origin&lt;/code&gt;,
 whose central axis has &lt;code&gt;direction&lt;/code&gt; as direction,
 and whose half opening angle is &lt;code&gt;angle&lt;/code&gt; (in degrees).
 The cone has no base plane, i.e., it extends to infinity.</description>
					<attribute name="@param">
						<description>origin location of the cone&apos;s tip</description>
					</attribute>
					<attribute name="@param">
						<description>direction direction of the cone&apos;s axis</description>
					</attribute>
					<attribute name="@param">
						<description>angle half opening angle in degrees</description>
					</attribute>
					<attribute name="@return">
						<description>instance of &lt;code&gt;Cone&lt;/code&gt; corresponding to the specified geometry</description>
					</attribute>
				</comment>
				<params>
					<param name="origin" comment="location of the cone&apos;s tip" fulltype="Tuple3d" type="Tuple3d" />
					<param name="direction" comment="direction of the cone&apos;s axis" fulltype="Vector3d" type="Vector3d" />
					<param name="angle" comment="half opening angle in degrees" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="cone" returncomment="instance of &lt;code&gt;Cone&lt;/code&gt; corresponding to the specified geometry" fulltype="Cone" type="Cone">
				<comment>
					<description>Returns a cone whose tip is defined by the location
 of &lt;code&gt;node&lt;/code&gt;. Depending on &lt;code&gt;end&lt;/code&gt;, the location
 or end location of &lt;code&gt;node&lt;/code&gt; is used
 (see {@link #location(Tuple3d, Node, boolean)}).
 The axis of the cone points into the local z-direction
 of the coordinate system of &lt;code&gt;node&lt;/code&gt;
 or &lt;code&gt;node&lt;/code&gt;&apos;s children (again depending on &lt;code&gt;end&lt;/code&gt;).
 The cone has no base plane, i.e., it extends to infinity.</description>
					<attribute name="@param">
						<description>node node which defines the cone&apos;s tip</description>
					</attribute>
					<attribute name="@param">
						<description>end use location or end location of &lt;code&gt;node&lt;/code&gt;</description>
					</attribute>
					<attribute name="@param">
						<description>angle half opening angle in degrees</description>
					</attribute>
					<attribute name="@return">
						<description>instance of &lt;code&gt;Cone&lt;/code&gt; corresponding to the specified geometry</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="node which defines the cone&apos;s tip" fulltype="Node" type="Node" />
					<param name="end" comment="use location or end location of &lt;code&gt;node&lt;/code&gt;" fulltype="boolean" type="boolean" />
					<param name="angle" comment="half opening angle in degrees" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="ray" returncomment="new ray" fulltype="Line" type="Line">
				<comment>
					<description>Constructs a &lt;code&gt;Line&lt;/code&gt; which represents a ray emanating at
 &lt;code&gt;origin&lt;/code&gt; in the specified &lt;code&gt;direction&lt;/code&gt;. The
 &lt;code&gt;start&lt;/code&gt; parameter of the line is set to 0, the
 &lt;code&gt;end&lt;/code&gt; parameter is set to infinity.</description>
					<attribute name="@param">
						<description>origin origin of the ray</description>
					</attribute>
					<attribute name="@param">
						<description>direction direction of the ray</description>
					</attribute>
					<attribute name="@return">
						<description>new ray</description>
					</attribute>
				</comment>
				<params>
					<param name="origin" comment="origin of the ray" fulltype="Tuple3d" type="Tuple3d" />
					<param name="direction" comment="direction of the ray" fulltype="Tuple3d" type="Tuple3d" />
				</params>
			</method>
			<method static="true" visibility="public" name="intersect" returncomment="list containing all intersections of the line
 and the volume&apos;s surface" fulltype="IntersectionList" type="IntersectionList">
				<comment>
					<description>Compute all intersections between &lt;code&gt;line&lt;/code&gt; and the surface
 of &lt;code&gt;volume&lt;/code&gt;. The returned list is valid until the next
 invocation of this method within the same thread.</description>
					<attribute name="@param">
						<description>line a line</description>
					</attribute>
					<attribute name="@param">
						<description>volume a volume</description>
					</attribute>
					<attribute name="@return">
						<description>list containing all intersections of the line
 and the volume&apos;s surface</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="a line" fulltype="Line" type="Line" />
					<param name="volume" comment="a volume" fulltype="Volume" type="Volume" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$and" returncomment="list containing all intersections of the line
 and the volume&apos;s surface" fulltype="IntersectionList" type="IntersectionList">
				<comment>
					<description>This operator method is an alias for {@link #intersect}.</description>
					<attribute name="@param">
						<description>line a line</description>
					</attribute>
					<attribute name="@param">
						<description>volume a volume</description>
					</attribute>
					<attribute name="@return">
						<description>list containing all intersections of the line
 and the volume&apos;s surface</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="a line" fulltype="Line" type="Line" />
					<param name="volume" comment="a volume" fulltype="Volume" type="Volume" />
				</params>
			</method>
			<method static="true" visibility="public" name="toPoint3d" returncomment="first intersection point, or &lt;code&gt;null&lt;/code&gt;" fulltype="Point3d" type="Point3d">
				<comment>
					<description>This autoconversion method returns the first intersection point of
 &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is empty.
 The returned point may be modified.</description>
					<attribute name="@param">
						<description>list list of previously computed intersections</description>
					</attribute>
					<attribute name="@return">
						<description>first intersection point, or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="list of previously computed intersections" fulltype="IntersectionList" type="IntersectionList" />
				</params>
			</method>
			<method static="true" visibility="public" name="height" returncomment="height of &lt;code&gt;volume&lt;/code&gt; at &lt;code&gt;(x, y)&lt;/code&gt;, or 0" fulltype="double" type="double">
				<comment>
					<description>This method returns the height of a volume at a point &lt;code&gt;(x, y)&lt;/code&gt;
 (in global coordinates). This is the maximum z-coordinate of the volume
 at &lt;code&gt;(x, y)&lt;/code&gt;. If the volume does not contain a point with
 matching xy-coordinates, 0 is returned.</description>
					<attribute name="@param">
						<description>volume a volume</description>
					</attribute>
					<attribute name="@param">
						<description>x global x-coordinate</description>
					</attribute>
					<attribute name="@param">
						<description>y global y-coordinate</description>
					</attribute>
					<attribute name="@return">
						<description>height of &lt;code&gt;volume&lt;/code&gt; at &lt;code&gt;(x, y)&lt;/code&gt;, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="volume" comment="a volume" fulltype="Volume" type="Volume" />
					<param name="x" comment="global x-coordinate" fulltype="double" type="double" />
					<param name="y" comment="global y-coordinate" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="toLine" returncomment="central line of the node" fulltype="Line" type="Line">
				<comment>
					<description>Returns a line which corresponds to the central line of &lt;code&gt;node&lt;/code&gt;.
 The central line starts at the {@link #location(Node)} of the node
 and extends to the {@link #endlocation(Node)} of the node.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>central line of the node</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="volume" returncomment="volume corresponding the &lt;code&gt;node&lt;/code&gt;&apos;s shape" fulltype="Volume" type="Volume">
				<comment>
					<description>Returns a volume which corresponds to the shape of
 &lt;code&gt;node&lt;/code&gt;. If &lt;code&gt;node&lt;/code&gt; has no shape, an empty
 volume is returned.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>volume corresponding the &lt;code&gt;node&lt;/code&gt;&apos;s shape</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="distanceToLine" returncomment="distance between &lt;code&gt;point&lt;/code&gt; and &lt;code&gt;line&lt;/code&gt;" fulltype="double" type="double">
				<comment>
					<description>Returns the distance between &lt;code&gt;point&lt;/code&gt; and
 &lt;code&gt;line&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>point a point</description>
					</attribute>
					<attribute name="@param">
						<description>line a line</description>
					</attribute>
					<attribute name="@return">
						<description>distance between &lt;code&gt;point&lt;/code&gt; and &lt;code&gt;line&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>Line#distance(Tuple3d)</description>
					</attribute>
				</comment>
				<params>
					<param name="point" comment="a point" fulltype="Tuple3d" type="Tuple3d" />
					<param name="line" comment="a line" fulltype="Line" type="Line" />
				</params>
			</method>
			<method static="true" visibility="public" name="intersectionLength" returncomment="fraction of &lt;code&gt;line&lt;/code&gt; which intersects &lt;code&gt;cone&lt;/code&gt;" fulltype="double" type="double">
				<comment>
					<description>Determines the fraction of the &lt;code&gt;line&lt;/code&gt; which
 intersects the specified &lt;code&gt;cone&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>line line to intersect</description>
					</attribute>
					<attribute name="@param">
						<description>cone cone to intersect</description>
					</attribute>
					<attribute name="@return">
						<description>fraction of &lt;code&gt;line&lt;/code&gt; which intersects &lt;code&gt;cone&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="line to intersect" fulltype="Line" type="Line" />
					<param name="cone" comment="cone to intersect" fulltype="Cone" type="Cone" />
				</params>
			</method>
			<method static="true" visibility="public" name="directionalTropism" returncomment="&lt;code&gt;true&lt;/code&gt; iff a rotation matrix has been computed" fulltype="boolean" type="boolean">
				<comment>
					<description>Computes the rotation matrix which implements a directional
 tropism towards a &lt;code&gt;direction&lt;/code&gt;. This is done as follows:
 The matrix &lt;code&gt;m&lt;/code&gt; is interpreted as the transformation
 matrix from local to global coordinates. Thus, the local z-direction
 (the growth direction) has the value
 &lt;code&gt;v = (m.m02, m.m12, m.m22)&lt;/code&gt;
 in global coordinates. Now the cross product
 &lt;code&gt;d = v&lt;sup&gt;0&lt;/sup&gt; &amp;#215; direction&lt;/code&gt;,
 where &lt;code&gt;v&lt;sup&gt;0&lt;/sup&gt;&lt;/code&gt; is the unit vector in direction of
 &lt;code&gt;v&lt;/code&gt;, defines the axis about which
 a rotation has to be performed in order to achieve the desired tropism. This
 direction is transformed to the local coordinates of &lt;code&gt;m&lt;/code&gt;,
 and &lt;code&gt;out&lt;/code&gt; is set to a rotation about this
 transformed direction, its angle being the length
 of &lt;code&gt;d&lt;/code&gt; multiplied by &lt;code&gt;e&lt;/code&gt; (in radians). 
 &lt;br&gt;
 If the absolute value of the angle is less than &lt;code&gt;1e-10&lt;/code&gt;,
 no rotation matrix is computed and this method returns
 &lt;code&gt;false&lt;/code&gt;. Then &lt;code&gt;out&lt;/code&gt; does not
 contain a valid rotation matrix and should be ignored.
 This case happens when the growth direction 
 is (anti-)parallel to the desired &lt;code&gt;direction&lt;/code&gt;
 of the tropism.</description>
					<attribute name="@param">
						<description>m transformation matrix from local to global coordinates</description>
					</attribute>
					<attribute name="@param">
						<description>direction direction of the tropism in global coordinates</description>
					</attribute>
					<attribute name="@param">
						<description>e strength of the tropism</description>
					</attribute>
					<attribute name="@param">
						<description>out the computed rotation matrix is placed in here (only
 valid if the returned value is &lt;code&gt;true&lt;/code&gt;)</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; iff a rotation matrix has been computed</description>
					</attribute>
				</comment>
				<params>
					<param name="m" comment="transformation matrix from local to global coordinates" fulltype="Matrix34d" type="Matrix34d" />
					<param name="direction" comment="direction of the tropism in global coordinates" fulltype="Tuple3d" type="Tuple3d" />
					<param name="e" comment="strength of the tropism" fulltype="float" type="float" />
					<param name="out" comment="the computed rotation matrix is placed in here (only
 valid if the returned value is &lt;code&gt;true&lt;/code&gt;)" fulltype="Matrix4d" type="Matrix4d" />
				</params>
			</method>
			<method static="true" visibility="public" name="positionalTropism" returncomment="&lt;code&gt;true&lt;/code&gt; iff a rotation matrix has been computed" fulltype="boolean" type="boolean">
				<comment>
					<description>Computes the rotation matrix which implements a positional
 tropism towards a &lt;code&gt;target&lt;/code&gt; location. For the
 details of computation, see {@link #directionalTropism},
 where the &lt;code&gt;direction&lt;/code&gt; argument is the normalized
 direction vector from the origin of the local coordinate system
 &lt;code&gt;(m.m03, m.m13, m.m23)&lt;/code&gt; to &lt;code&gt;target&lt;/code&gt;.
 &lt;br&gt;
 If, for mathematical reasons, no rotation matrix can be computed
 or if no rotation is needed because the local growth direction
 already points to &lt;code&gt;target&lt;/code&gt;, this method returns
 &lt;code&gt;false&lt;/code&gt;. In this case, &lt;code&gt;out&lt;/code&gt; does not
 contain a valid rotation matrix and should be ignored.</description>
					<attribute name="@param">
						<description>m transformation matrix from local to global coordinates</description>
					</attribute>
					<attribute name="@param">
						<description>target target location of the tropism in global coordinates</description>
					</attribute>
					<attribute name="@param">
						<description>e strength of the tropism</description>
					</attribute>
					<attribute name="@param">
						<description>out the computed rotation matrix is placed in here (only
 valid if the returned value is &lt;code&gt;true&lt;/code&gt;)</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; iff a rotation matrix has been computed</description>
					</attribute>
				</comment>
				<params>
					<param name="m" comment="transformation matrix from local to global coordinates" fulltype="Matrix34d" type="Matrix34d" />
					<param name="target" comment="target location of the tropism in global coordinates" fulltype="Tuple3d" type="Tuple3d" />
					<param name="e" comment="strength of the tropism" fulltype="float" type="float" />
					<param name="out" comment="the computed rotation matrix is placed in here (only
 valid if the returned value is &lt;code&gt;true&lt;/code&gt;)" fulltype="Matrix4d" type="Matrix4d" />
				</params>
			</method>
			<method static="true" visibility="public" name="orthogonalTropism" returncomment="&lt;code&gt;true&lt;/code&gt; iff a rotation matrix has been computed" fulltype="boolean" type="boolean">
				<comment>
					<description>Computes the rotation matrix which implements an orthogonal
 tropism into a plane perpendicular to &lt;code&gt;direction&lt;/code&gt;. This is done as follows:
 The matrix &lt;code&gt;m&lt;/code&gt; is interpreted as the transformation
 matrix from local to global coordinates. Thus, the local z-direction
 (the growth direction) has the value
 &lt;code&gt;v = (m.m02, m.m12, m.m22)&lt;/code&gt;
 in global coordinates. Now the cross product
 &lt;code&gt;d = v&lt;sup&gt;0&lt;/sup&gt; &amp;#215; direction&lt;/code&gt;,
 where &lt;code&gt;v&lt;sup&gt;0&lt;/sup&gt;&lt;/code&gt; is the unit vector in direction of
 &lt;code&gt;v&lt;/code&gt;, defines the axis about which
 a rotation has to be performed in order to achieve the desired tropism. This
 direction is transformed to the local coordinates of &lt;code&gt;m&lt;/code&gt;,
 and &lt;code&gt;out&lt;/code&gt; is set to a rotation about this
 transformed direction, its angle being the negated value
 of the scalar product &lt;code&gt;v&lt;sup&gt;0&lt;/sup&gt; &amp;#183; direction&lt;/code&gt;
 multiplied by &lt;code&gt;e&lt;/code&gt; (in radians). 
 &lt;br&gt;
 If the absolute value of the angle is less than &lt;code&gt;1e-10&lt;/code&gt;,
 no rotation matrix is computed and this method returns
 &lt;code&gt;false&lt;/code&gt;. Then &lt;code&gt;out&lt;/code&gt; does not
 contain a valid rotation matrix and should be ignored.
 This case happens when the growth direction 
 is (anti-)parallel to the desired &lt;code&gt;direction&lt;/code&gt;
 of the tropism.</description>
					<attribute name="@param">
						<description>m transformation matrix from local to global coordinates</description>
					</attribute>
					<attribute name="@param">
						<description>direction direction of the tropism in global coordinates</description>
					</attribute>
					<attribute name="@param">
						<description>e strength of the tropism</description>
					</attribute>
					<attribute name="@param">
						<description>out the computed rotation matrix is placed in here (only
 valid if the returned value is &lt;code&gt;true&lt;/code&gt;)</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; iff a rotation matrix has been computed</description>
					</attribute>
				</comment>
				<params>
					<param name="m" comment="transformation matrix from local to global coordinates" fulltype="Matrix34d" type="Matrix34d" />
					<param name="direction" comment="direction of the tropism in global coordinates" fulltype="Tuple3d" type="Tuple3d" />
					<param name="e" comment="strength of the tropism" fulltype="float" type="float" />
					<param name="out" comment="the computed rotation matrix is placed in here (only
 valid if the returned value is &lt;code&gt;true&lt;/code&gt;)" fulltype="Matrix4d" type="Matrix4d" />
				</params>
			</method>
			<method static="true" visibility="public" name="tropism" returncomment="a node with a transformation set to the requested tropism" fulltype="Null" type="Null">
				<comment>
					<description>Return a new node with a transformation matrix set to the desired tropism.</description>
					<attribute name="@param">
						<description>a node containing original orientation</description>
					</attribute>
					<attribute name="@param">
						<description>direction target direction towards the tropism should orient to</description>
					</attribute>
					<attribute name="@param">
						<description>e strength of the tropism</description>
					</attribute>
					<attribute name="@return">
						<description>a node with a transformation set to the requested tropism</description>
					</attribute>
					<attribute name="@see">
						<description>#directionalTropism</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="node containing original orientation" fulltype="Node" type="Node" />
					<param name="direction" comment="target direction towards the tropism should orient to" fulltype="Vector3d" type="Vector3d" />
					<param name="e" comment="strength of the tropism" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="tropism" returncomment="a node with a transformation set to the requested tropism" fulltype="Null" type="Null">
				<comment>
					<description>Return a new node with a transformation matrix set to the desired tropism.</description>
					<attribute name="@param">
						<description>a node containing original orientation</description>
					</attribute>
					<attribute name="@param">
						<description>target target location towards the tropism should orient to</description>
					</attribute>
					<attribute name="@param">
						<description>e strength of the tropism</description>
					</attribute>
					<attribute name="@return">
						<description>a node with a transformation set to the requested tropism</description>
					</attribute>
					<attribute name="@see">
						<description>#positionalTropism</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="node containing original orientation" fulltype="Node" type="Node" />
					<param name="target" comment="target location towards the tropism should orient to" fulltype="Point3d" type="Point3d" />
					<param name="e" comment="strength of the tropism" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="cloneSubgraph" returncomment="corresponding root node of cloned subgraph" fulltype="Node" type="Node">
				<comment>
					<description>This method clones the subgraph starting at &lt;code&gt;root&lt;/code&gt;
 and returns the cloned node which corresponds to &lt;code&gt;root&lt;/code&gt;.
 The subgraph consists of all nodes which can be reached
 by traversing edges in forward direction. Nodes are cloned
 deeply, i.e., field values are cloned, too.</description>
					<attribute name="@param">
						<description>root root node of subgraph</description>
					</attribute>
					<attribute name="@return">
						<description>corresponding root node of cloned subgraph</description>
					</attribute>
					<attribute name="@throws">
						<description>CloneNotSupportedException</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of subgraph" fulltype="Node" type="Node" />
				</params>
				<exceptions>
					<exception comment="" fulltype="java.lang.CloneNotSupportedException" type="CloneNotSupportedException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="cloneNode" fulltype="Node" type="Node">
				<params>
					<param name="node" fulltype="Node" type="Node" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.CloneNotSupportedException" type="CloneNotSupportedException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="booleanValue" returncomment="wrapped &lt;code&gt;boolean&lt;/code&gt; value, or false" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the &lt;code&gt;boolean&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link BooleanNode}. Otherwise this method returns
 false.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;boolean&lt;/code&gt; value, or false</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="byteValue" returncomment="wrapped &lt;code&gt;byte&lt;/code&gt; value, or 0" fulltype="byte" type="byte">
				<comment>
					<description>Returns the &lt;code&gt;byte&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link ByteNode}. Otherwise this method returns
 0.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;byte&lt;/code&gt; value, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="shortValue" returncomment="wrapped &lt;code&gt;short&lt;/code&gt; value, or 0" fulltype="short" type="short">
				<comment>
					<description>Returns the &lt;code&gt;short&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link ShortNode}. Otherwise this method returns
 0.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;short&lt;/code&gt; value, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="charValue" returncomment="wrapped &lt;code&gt;char&lt;/code&gt; value, or 0" fulltype="char" type="char">
				<comment>
					<description>Returns the &lt;code&gt;char&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link CharNode}. Otherwise this method returns
 0.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;char&lt;/code&gt; value, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="intValue" returncomment="wrapped &lt;code&gt;int&lt;/code&gt; value, or 0" fulltype="int" type="int">
				<comment>
					<description>Returns the &lt;code&gt;int&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link IntNode}. Otherwise this method returns
 0.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;int&lt;/code&gt; value, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="longValue" returncomment="wrapped &lt;code&gt;long&lt;/code&gt; value, or 0" fulltype="long" type="long">
				<comment>
					<description>Returns the &lt;code&gt;long&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link LongNode}. Otherwise this method returns
 0.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;long&lt;/code&gt; value, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="floatValue" returncomment="wrapped &lt;code&gt;float&lt;/code&gt; value, or 0" fulltype="float" type="float">
				<comment>
					<description>Returns the &lt;code&gt;float&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link FloatNode}. Otherwise this method returns
 0.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;float&lt;/code&gt; value, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="doubleValue" returncomment="wrapped &lt;code&gt;double&lt;/code&gt; value, or 0" fulltype="double" type="double">
				<comment>
					<description>Returns the &lt;code&gt;double&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link DoubleNode}. Otherwise this method returns
 0.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;double&lt;/code&gt; value, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="objectValue" returncomment="wrapped &lt;code&gt;Object&lt;/code&gt; value, or null" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the &lt;code&gt;Object&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link ObjectNode}, {@link NURBSCurve} (a
 &lt;code&gt;NURBSCurve&lt;/code&gt; node wraps its
 contained {@link de.grogra.math.BSplineCurve})
 or {@link NURBSSurface} (a
 &lt;code&gt;NURBSSurface&lt;/code&gt; node wraps its
 contained {@link de.grogra.math.BSplineSurface}).
 Otherwise this method returns null.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;Object&lt;/code&gt; value, or null</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="isSelected" returncomment="&lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;n&lt;/code&gt; is contained
 in the current selection" fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if &lt;code&gt;n&lt;/code&gt; has been selected in the
 workbench by the user.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;n&lt;/code&gt; is contained
 in the current selection</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="a node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="function" returncomment="&lt;code&gt;FunctionRef&lt;/code&gt; referring to the named function" fulltype="FunctionRef" type="FunctionRef">
				<comment>
					<description>Returns a &lt;code&gt;Function&lt;/code&gt; instance which refers
 to the function named &lt;code&gt;name&lt;/code&gt;. The list of functions
 in GroIMP is available in the panel
 &quot;Object Explorers/Math Objects/Functions&quot;.</description>
					<attribute name="@param">
						<description>name name of function within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;FunctionRef&lt;/code&gt; referring to the named function</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="name of function within GroIMP" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="curve" returncomment="&lt;code&gt;CurveRef&lt;/code&gt; referring to the named curve" fulltype="CurveRef" type="CurveRef">
				<comment>
					<description>Returns a &lt;code&gt;CurveRef&lt;/code&gt; instance which refers
 to the curve named &lt;code&gt;name&lt;/code&gt;. The list of curves
 in GroIMP is available in the panel
 &quot;Object Explorers/Math Objects/Curves&quot;.</description>
					<attribute name="@param">
						<description>name name of curve within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;CurveRef&lt;/code&gt; referring to the named curve</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="name of curve within GroIMP" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="surface" returncomment="&lt;code&gt;SurfaceRef&lt;/code&gt; referring to the named surface" fulltype="SurfaceRef" type="SurfaceRef">
				<comment>
					<description>Returns a &lt;code&gt;SurfaceRef&lt;/code&gt; instance which refers
 to the surface named &lt;code&gt;name&lt;/code&gt;. The list of surfaces
 in GroIMP is available in the panel
 &quot;Object Explorers/Math Objects/Surfaces&quot;.</description>
					<attribute name="@param">
						<description>name name of surface within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;SurfaceRef&lt;/code&gt; referring to the named surface</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="name of surface within GroIMP" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="dataset" returncomment="&lt;code&gt;DatasetRef&lt;/code&gt; referring to the named dataset" fulltype="DatasetRef" type="DatasetRef">
				<comment>
					<description>Returns a &lt;code&gt;DatasetRef&lt;/code&gt; instance which refers
 to the dataset named &lt;code&gt;name&lt;/code&gt;. The list of datasets
 in GroIMP is available in the panel
 &quot;Object Explorers/Datasets&quot;.</description>
					<attribute name="@param">
						<description>name name of dataset within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;DatasetRef&lt;/code&gt; referring to the named dataset</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="name of dataset within GroIMP" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="shader" returncomment="&lt;code&gt;ShaderRef&lt;/code&gt; referring to the named shader" fulltype="ShaderRef" type="ShaderRef">
				<comment>
					<description>Returns a &lt;code&gt;ShaderRef&lt;/code&gt; instance which refers
 to the shader named &lt;code&gt;name&lt;/code&gt;. The list of shaders
 in GroIMP is available in the panel
 &quot;Object Explorers/3D/Shaders&quot;.</description>
					<attribute name="@param">
						<description>name name of shader within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;ShaderRef&lt;/code&gt; referring to the named shader</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="name of shader within GroIMP" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="image" returncomment="&lt;code&gt;ImageRef&lt;/code&gt; referring to the named image" fulltype="ImageRef" type="ImageRef">
				<comment>
					<description>Returns an &lt;code&gt;ImageRef&lt;/code&gt; instance which refers
 to the image named &lt;code&gt;name&lt;/code&gt;. The list of images
 in GroIMP is available in the panel
 &quot;Object Explorers/Images&quot;.</description>
					<attribute name="@param">
						<description>name name of image within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;ImageRef&lt;/code&gt; referring to the named image</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="name of image within GroIMP" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="material" fulltype="MaterialRef" type="MaterialRef">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="file" returncomment="&lt;code&gt;FileRef&lt;/code&gt; referring to the named file" fulltype="FileRef" type="FileRef">
				<comment>
					<description>Returns a &lt;code&gt;FileRef&lt;/code&gt; instance which refers
 to the file named &lt;code&gt;name&lt;/code&gt;. The list of files
 in GroIMP is available in the panel
 &quot;File Explorer&quot;.
 &lt;br&gt;
 If &lt;code&gt;name&lt;/code&gt; does not contain the character &apos;/&apos;
 or the character {@link IO#SYSTEM_ID_SEPARATOR},
 &lt;code&gt;name&lt;/code&gt; is prefixed by
 {@link IO#PROJECT_FS} followed by {@link IO#SYSTEM_ID_SEPARATOR}.
 Thus, in this case &lt;code&gt;name&lt;/code&gt; is assumed to refer
 to a file in the virtual file system of the
 project.</description>
					<attribute name="@param">
						<description>name name of file within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;FileRef&lt;/code&gt; referring to the named file</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="name of file within GroIMP" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="reference" returncomment="&lt;code&gt;Reference&lt;/code&gt; referring to the named object" fulltype="Reference" type="Reference">
				<comment>
					<description>Returns a &lt;code&gt;Reference&lt;/code&gt; instance which refers
 to the object named &lt;code&gt;name&lt;/code&gt;. The list of objects
 in GroIMP is available in the panel
 &quot;Object Explorers/Objects&quot;.</description>
					<attribute name="@param">
						<description>name name of object within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;Reference&lt;/code&gt; referring to the named object</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="name of object within GroIMP" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="list" fulltype="void" type="void">
				<comment>
					<description>Prints the JavaDoc description of all available commands on the XL console window.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="list" fulltype="void" type="void">
				<comment>
					<description>Prints a list of all available commands starting with the specified sequence.</description>
					<attribute name="@param">
						<description>prefix of the commands</description>
					</attribute>
				</comment>
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="help" fulltype="void" type="void">
				<comment>
					<description>Prints the JavaDoc description of all available commands starting with 
 the specified prefix on the XL console window.</description>
					<attribute name="@param">
						<description>prefix of the commands for those the description should be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="prefix" comment="of the commands for those the description should be printed" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="makeRenderedImage" fulltype="void" type="void">
				<comment>
					<description>Creates a rendered image of the actual scene with the 
 default camera position and a fixed image size of 800x600.</description>
					<attribute name="@param">
						<description>fileName name of the output file</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" comment="name of the output file" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="makeRenderedImage" fulltype="void" type="void">
				<comment>
					<description>Creates a rendered image of the actual scene with the 
 default camera position and a variable image size.</description>
					<attribute name="@param">
						<description>fileName name of the output file</description>
					</attribute>
					<attribute name="@param">
						<description>width</description>
					</attribute>
					<attribute name="@param">
						<description>height</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" comment="name of the output file" fulltype="java.lang.String" type="String" />
					<param name="width" comment="" fulltype="int" type="int" />
					<param name="height" comment="" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="makeRenderedImage" fulltype="void" type="void">
				<comment>
					<description>Creates a rendered image of the actual scene with the 
 specified camera and a variable image size.</description>
					<attribute name="@param">
						<description>fileName name of the output file</description>
					</attribute>
					<attribute name="@param">
						<description>cameraName name of a specific camera</description>
					</attribute>
					<attribute name="@param">
						<description>width</description>
					</attribute>
					<attribute name="@param">
						<description>height</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" comment="name of the output file" fulltype="java.lang.String" type="String" />
					<param name="cameraName" comment="name of a specific camera" fulltype="java.lang.String" type="String" />
					<param name="width" comment="" fulltype="int" type="int" />
					<param name="height" comment="" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="makeRenderedImage" fulltype="void" type="void">
				<comment>
					<description>Creates a rendered image of the actual scene with the
 specified camera and a variable image size.</description>
					<attribute name="@param">
						<description>fileName name of the output file</description>
					</attribute>
					<attribute name="@param">
						<description>specific camera</description>
					</attribute>
					<attribute name="@param">
						<description>width</description>
					</attribute>
					<attribute name="@param">
						<description>height</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" comment="name of the output file" fulltype="java.lang.String" type="String" />
					<param name="camera" fulltype="Camera" type="Camera" />
					<param name="width" comment="" fulltype="int" type="int" />
					<param name="height" comment="" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="makeSnapshot" fulltype="void" type="void">
				<comment>
					<description>Creates a snapshot of the actual scene.</description>
					<attribute name="@param">
						<description>fileName name of the output file</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" comment="name of the output file" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="export3DScene" fulltype="void" type="void">
				<comment>
					<description>Exports the current 3D scene to the specified target file and format.

 Currently supported formats of target files:
  - dxf
  - x3d
  - mtg</description>
					<attribute name="@param">
						<description>fileName name of the output file</description>
					</attribute>
					<attribute name="@param">
						<description>format target file format</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" comment="name of the output file" fulltype="java.lang.String" type="String" />
					<param name="format" comment="target file format" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="export3DScene" fulltype="void" type="void">
				<comment>
					<description>Exports the current 3D scene to the specified target file and format.

 Currently supported formats of target files:
  - dxf
  - x3d
  - mtg</description>
					<attribute name="@param">
						<description>file output file</description>
					</attribute>
					<attribute name="@param">
						<description>format target file format</description>
					</attribute>
				</comment>
				<params>
					<param name="file" comment="output file" fulltype="java.io.File" type="File" />
					<param name="format" comment="target file format" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="leaf" returncomment="green rectangle" fulltype="Parallelogram" type="Parallelogram">
				<comment>
					<description>Returns a new, rectangular instance of
 &lt;code&gt;Parallelogram&lt;/code&gt;
 created by the constructor invocation
 &lt;code&gt;Parallogram(length, width)&lt;/code&gt; and having
 {@link RGBAShader#GREEN} as its shader.</description>
					<attribute name="@param">
						<description>length length of rectangle</description>
					</attribute>
					<attribute name="@param">
						<description>width width of rectangle</description>
					</attribute>
					<attribute name="@return">
						<description>green rectangle</description>
					</attribute>
				</comment>
				<params>
					<param name="length" comment="length of rectangle" fulltype="float" type="float" />
					<param name="width" comment="width of rectangle" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="leaf3d" returncomment="mash of the default 3d leaf" fulltype="MeshNode" type="MeshNode">
				<comment>
					<description>Return a &lt;code&gt;MeshNode&lt;/code&gt; in shape of a 3d leaf.</description>
					<attribute name="@return">
						<description>mash of the default 3d leaf</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="leaf3d" returncomment="mash of the default 3d leaf" fulltype="MeshNode" type="MeshNode">
				<comment>
					<description>Return a &lt;code&gt;MeshNode&lt;/code&gt; in shape of it indicated default leaf.</description>
					<attribute name="@param">
						<description>id of the indicated leaf</description>
					</attribute>
					<attribute name="@return">
						<description>mash of the default 3d leaf</description>
					</attribute>
				</comment>
				<params>
					<param name="id" comment="of the indicated leaf" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="leaf3d" returncomment="mash of the pointlist" fulltype="MeshNode" type="MeshNode">
				<comment>
					<description>Return a &lt;code&gt;MeshNode&lt;/code&gt; in shape of it indicated list of points.
 The list of points will be automatically triangulated and returned as &lt;code&gt;MeshNode&lt;/code&gt;.
 pointlist={x1,y1,z1, ..., xn,yn,zn).</description>
					<attribute name="@param">
						<description>pointlist</description>
					</attribute>
					<attribute name="@return">
						<description>mash of the pointlist</description>
					</attribute>
				</comment>
				<params>
					<param name="pointlist" comment="" fulltype="float[]" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="triangulate" returncomment="mash of the pointlist" fulltype="MeshNode" type="MeshNode">
				<comment>
					<description>Return a &lt;code&gt;MeshNode&lt;/code&gt; in shape of it indicated list of points.
 The list of points will be automatically triangulated and returned as &lt;code&gt;MeshNode&lt;/code&gt;.
 pointlist={x1,y1,z1, ..., xn,yn,zn). First point p0={x1,y1,z1}, 
 faces between {{p0,p1,p2}, {p0,p2,p3}, {p0,p3,p4}, ...}</description>
					<attribute name="@param">
						<description>pointlist</description>
					</attribute>
					<attribute name="@return">
						<description>mash of the pointlist</description>
					</attribute>
				</comment>
				<params>
					<param name="pointlist" comment="" fulltype="float[]" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="getAreaOfNonTriangultion" returncomment="area" fulltype="double" type="double">
				<comment>
					<description>Calculates the area of the surface generated by the specified list of points.
 The list of points will be automatically triangulated.
 pointlist={x1,y1,z1, ..., xn,yn,zn). First point p0={x1,y1,z1}, 
 faces between {{p0,p1,p2}, {p0,p2,p3}, {p0,p3,p4}, ...}

Note: Calculation can be wrong, when the described shape is too concave. the resulting area 
will be too large in this case.</description>
					<attribute name="@param">
						<description>pointlist</description>
					</attribute>
					<attribute name="@return">
						<description>area</description>
					</attribute>
				</comment>
				<params>
					<param name="pointlist" comment="" fulltype="float[]" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="getAreaOfTriangultion" returncomment="area" fulltype="double" type="double">
				<comment>
					<description>Calculates the area of the surface generated by the specified list of points.
 It is assumed, that the list of points is triangulated.
 pointlist={x1,y1,z1, ..., xn,yn,zn). First point p0={x1,y1,z1}, 
 faces between {{p0,p1,p2}, {p3,p4,p5}, {p6,p7,p8}, ...}</description>
					<attribute name="@param">
						<description>pointlist</description>
					</attribute>
					<attribute name="@return">
						<description>area</description>
					</attribute>
				</comment>
				<params>
					<param name="pointlist" comment="" fulltype="float[]" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="getMesh" returncomment="mash of the vertexData" fulltype="MeshNode" type="MeshNode">
				<comment>
					<description>Return a &lt;code&gt;MeshNode&lt;/code&gt; in shape of it indicated list of points.
 The list of points has to be triangulated.</description>
					<attribute name="@param">
						<description>vertexData</description>
					</attribute>
					<attribute name="@return">
						<description>mash of the vertexData</description>
					</attribute>
				</comment>
				<params>
					<param name="vertexData" comment="" fulltype="FloatList" type="FloatList" />
				</params>
			</method>
			<method static="true" visibility="public" name="triangulate" returncomment="mash of the pointlist" fulltype="MeshNode" type="MeshNode">
				<comment>
					<description>Return a &lt;code&gt;MeshNode&lt;/code&gt; in shape of it indicated list of points.
 The list of points will be automatically triangulated and returned as &lt;code&gt;MeshNode&lt;/code&gt;.
 pointlist={x1,y1,z1, ..., xn,yn,zn). First point p0={x1,y1,z1}, 
 faces between {{p0,p1,p2}, {p0,p2,p3}, {p0,p3,p4}, ...}</description>
					<attribute name="@param">
						<description>pointlist</description>
					</attribute>
					<attribute name="@return">
						<description>mash of the pointlist</description>
					</attribute>
				</comment>
				<params>
					<param name="pointlist" comment="" fulltype="Point3d[]" type="Point3d" />
				</params>
			</method>
			<method static="true" visibility="public" name="getAreaOfNonTriangultion" returncomment="area" fulltype="double" type="double">
				<comment>
					<description>Calculates the area of the surface generated by the specified list of points.
 The list of points will be automatically triangulated.
 pointlist={x1,y1,z1, ..., xn,yn,zn). First point p0={x1,y1,z1}, 
 faces between {{p0,p1,p2}, {p0,p2,p3}, {p0,p3,p4}, ...}</description>
					<attribute name="@param">
						<description>pointlist</description>
					</attribute>
					<attribute name="@return">
						<description>area</description>
					</attribute>
				</comment>
				<params>
					<param name="pointlist" comment="" fulltype="Point3d[]" type="Point3d" />
				</params>
			</method>
			<method static="true" visibility="public" name="getAreaOfTriangultion" returncomment="area" fulltype="double" type="double">
				<comment>
					<description>Calculates the area of the surface generated by the specified list of points.
 It is assumed, that the list of points is triangulated.
 pointlist={x1,y1,z1, ..., xn,yn,zn). First point p0={x1,y1,z1}, 
 faces between {{p0,p1,p2}, {p3,p4,p5}, {p6,p7,p8}, ...}</description>
					<attribute name="@param">
						<description>pointlist</description>
					</attribute>
					<attribute name="@return">
						<description>area</description>
					</attribute>
				</comment>
				<params>
					<param name="pointlist" comment="" fulltype="Point3d[]" type="Point3d" />
				</params>
			</method>
			<method static="true" visibility="public" name="getMesh" returncomment="mash of the vertexData" fulltype="MeshNode" type="MeshNode">
				<comment>
					<description>Return a &lt;code&gt;MeshNode&lt;/code&gt; in shape of it indicated list of points.
 The list of points has to be triangulated.</description>
					<attribute name="@param">
						<description>vertexData</description>
					</attribute>
					<attribute name="@return">
						<description>mash of the vertexData</description>
					</attribute>
				</comment>
				<params>
					<param name="pointlist" fulltype="Point3d[]" type="Point3d" />
				</params>
			</method>
			<method static="true" visibility="public" name="getMesh" returncomment="mash of the vertexData" fulltype="MeshNode" type="MeshNode">
				<comment>
					<description>Returns a &lt;code&gt;MeshNode&lt;/code&gt; as visualization of the given convex hull.</description>
					<attribute name="@param">
						<description>hull</description>
					</attribute>
					<attribute name="@return">
						<description>mash of the vertexData</description>
					</attribute>
				</comment>
				<params>
					<param name="hull" comment="" fulltype="QuickHull3D" type="QuickHull3D" />
				</params>
			</method>
			<method static="true" visibility="public" name="getMesh" returncomment="mash of the vertexData" fulltype="MeshNode" type="MeshNode">
				<comment>
					<description>Return a &lt;code&gt;MeshNode&lt;/code&gt; in shape of it indicated list of points.
 The list of points has to be triangulated.</description>
					<attribute name="@param">
						<description>pointlist</description>
					</attribute>
					<attribute name="@return">
						<description>mash of the vertexData</description>
					</attribute>
				</comment>
				<params>
					<param name="pointlist" comment="" fulltype="float[]" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="getMesh" returncomment="mash of the vertexData" fulltype="MeshNode" type="MeshNode">
				<comment>
					<description>Return a &lt;code&gt;MeshNode&lt;/code&gt; in shape of it indicated list of points.
 The list of points has to be triangulated.
 The values of the input list will be casted to float.</description>
					<attribute name="@param">
						<description>pointlist</description>
					</attribute>
					<attribute name="@return">
						<description>mash of the vertexData</description>
					</attribute>
				</comment>
				<params>
					<param name="pointlist" comment="" fulltype="double[]" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="getSurfaceArea" returncomment="volume" fulltype="double" type="double">
				<comment>
					<description>Calculates the area of all nodes of the subgraph with the node root as root node
 Intersection with other object are not considered.The total area will be calculated.
 Keep in mind, that the getSurfaceArea function is only implemented for basic primitive object.
 For all other objects it will return zero.</description>
					<attribute name="@return">
						<description>volume</description>
					</attribute>
				</comment>
				<params>
					<param name="root" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="getVolume" returncomment="volume" fulltype="double" type="double">
				<comment>
					<description>Calculates the volume of all nodes of the subgraph with the node root as root node.
 Intersection with other object are not considered.The total volume will be calculated.
 Keep in mind, that the getVolume function is only implemented for basic primitive object.
 For all other objects it will return zero.</description>
					<attribute name="@return">
						<description>volume</description>
					</attribute>
				</comment>
				<params>
					<param name="root" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="repaintView3D" fulltype="void" type="void">
				<comment>
					<description>Repaints the View3D panel.
 Makes use of Dummy nodes (and/or artificial changes of the graph to trigger an repaint) unnecessary.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="convexhull" fulltype="QuickHull3D" type="QuickHull3D">
				<comment>
					<description>Constructs the convex hull of a set of points.</description>
					<attribute name="@param">
						<description>points input points</description>
					</attribute>
				</comment>
				<params>
					<param name="points" comment="input points" fulltype="Point3d[]" type="Point3d" />
				</params>
			</method>
			<method static="true" visibility="public" name="convexhull" fulltype="QuickHull3D" type="QuickHull3D">
				<comment>
					<description>Constructs the convex hull of a set of coordinates.
 Assuming 3 values for each point: {x0,y0,z0, x1,y1,z1, ...}</description>
					<attribute name="@param">
						<description>points input points</description>
					</attribute>
				</comment>
				<params>
					<param name="coords" fulltype="double[]" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="convexhull" fulltype="QuickHull3D" type="QuickHull3D">
				<comment>
					<description>Constructs the convex hull of a set of coordinates.
 Assuming 3 values for each point: {x0,y0,z0, x1,y1,z1, ...}</description>
					<attribute name="@param">
						<description>points input points</description>
					</attribute>
					<attribute name="@param">
						<description>debug flag</description>
					</attribute>
				</comment>
				<params>
					<param name="coords" fulltype="double[]" type="double" />
					<param name="debug" comment="flag" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="convexhull" fulltype="QuickHull3D" type="QuickHull3D">
				<comment>
					<description>Constructs the convex hull of all points that can be reached starting from 
 the indicated root node.
 Only &quot;visible&quot; nodes (nodes instance of ShadedNull) will be take into account.
 The location (&lt;code&gt;Library.location(Node)&lt;/code&gt;) of each node will be taken as position.</description>
					<attribute name="@param">
						<description>points input points</description>
					</attribute>
				</comment>
				<params>
					<param name="root" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="markVertices" fulltype="void" type="void">
				<comment>
					<description>Marks all vertices with a Sphere of the given &lt;code&gt;QuickHull3D&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>hull</description>
					</attribute>
				</comment>
				<params>
					<param name="hull" comment="" fulltype="QuickHull3D" type="QuickHull3D" />
				</params>
			</method>
			<method static="true" visibility="public" name="markVertices" fulltype="void" type="void">
				<comment>
					<description>Marks all vertices with a Sphere of the specified &lt;code&gt;radius&lt;/code&gt; and 
 of the given &lt;code&gt;QuickHull3D&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>hull</description>
					</attribute>
					<attribute name="@param">
						<description>radius</description>
					</attribute>
				</comment>
				<params>
					<param name="hull" comment="" fulltype="QuickHull3D" type="QuickHull3D" />
					<param name="radius" comment="" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="markPoints" fulltype="void" type="void">
				<comment>
					<description>Marks all points with a Sphere of the given &lt;code&gt;QuickHull3D&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>hull</description>
					</attribute>
				</comment>
				<params>
					<param name="hull" comment="" fulltype="QuickHull3D" type="QuickHull3D" />
				</params>
			</method>
			<method static="true" visibility="public" name="markPoints" fulltype="void" type="void">
				<comment>
					<description>Marks all points with a Sphere of the specified &lt;code&gt;radius&lt;/code&gt; and 
 of the given &lt;code&gt;QuickHull3D&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>hull</description>
					</attribute>
					<attribute name="@param">
						<description>radius</description>
					</attribute>
				</comment>
				<params>
					<param name="hull" comment="" fulltype="QuickHull3D" type="QuickHull3D" />
					<param name="radius" comment="" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="markPoints" fulltype="void" type="void">
				<comment>
					<description>Marks all points of the specified array with a Sphere of the specified &lt;code&gt;radius&lt;/code&gt; and shader.</description>
					<attribute name="@param">
						<description>hull</description>
					</attribute>
					<attribute name="@param">
						<description>radius</description>
					</attribute>
					<attribute name="@param">
						<description>shader</description>
					</attribute>
				</comment>
				<params>
					<param name="points" fulltype="Point3d[]" type="Point3d" />
					<param name="radius" comment="" fulltype="float" type="float" />
					<param name="shader" comment="" fulltype="RGBAShader" type="RGBAShader" />
				</params>
			</method>
			<method static="true" visibility="public" name="getXYProjection" fulltype="Point3d[]" type="Point3d">
				<comment>
					<description>Constructs the selected XY-projection of all points that can be reached starting from 
 the indicated root node.
 Only &quot;visible&quot; nodes (nodes instance of ShadedNull) will be take into account.
 The location (&lt;code&gt;Library.location(Node)&lt;/code&gt;) of each node will be taken as position.
 
 Currently implemented methods:
	CONVEXHULL .. the convex hull
	BOUNDING_RECTANGLE .. bounding rectangle
	ALPHA_SHAPE .. alpha shape with alpha of &lt;code&gt;alpha&lt;code&gt; (Note: In case the alpha shape is not connected, only the first polygon will be returned)</description>
					<attribute name="@param">
						<description>root node</description>
					</attribute>
					<attribute name="@param">
						<description>method of projection</description>
					</attribute>
					<attribute name="@param">
						<description>alpha value, only used for alpha shapes</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="node" fulltype="Node" type="Node" />
					<param name="type" fulltype="int" type="int" />
					<param name="alpha" comment="value, only used for alpha shapes" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="getXYProjection" fulltype="Point3d[]" type="Point3d">
				<comment>
					<description>Constructs the selected XY-projection of all points in the list.
 Currently implemented methods:
	CONVEXHULL .. the convex hull
	BOUNDING_RECTANGLE .. bounding rectangle
	ALPHA_SHAPE .. alpha shape with alpha of &lt;code&gt;alpha&lt;code&gt; (Note: In case the alpha shape is not connected, only the first polygon will be returned)

 Returns an array of points: [centroid, p0, p1, p2, ..., pn, p0};
 (Repeatation of the first point to close the area (during triangulation))</description>
					<attribute name="@param">
						<description>input points</description>
					</attribute>
					<attribute name="@param">
						<description>method of projection</description>
					</attribute>
					<attribute name="@param">
						<description>alpha value, only used for alpha shapes</description>
					</attribute>
				</comment>
				<params>
					<param name="pointlist" fulltype="Point3d[]" type="Point3d" />
					<param name="type" fulltype="int" type="int" />
					<param name="alpha" comment="value, only used for alpha shapes" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="getBoundingRectangle" returncomment="array of points" fulltype="Point3d[]" type="Point3d">
				<comment>
					<description>Calculates the bounding rectangle of the given array of points.
 Returns an array of points: [centroid, (maxX,maxY,0), (minX,maxY,0), (minX,minY,0), (maxX,minY,0),  (maxX,maxY,0)};
 (Repeatation of the first point to close the area (during triangulation))</description>
					<attribute name="@param">
						<description>points</description>
					</attribute>
					<attribute name="@return">
						<description>array of points</description>
					</attribute>
				</comment>
				<params>
					<param name="points" comment="" fulltype="Point2d[]" type="Point2d" />
				</params>
			</method>
			<method static="true" visibility="public" name="getConvexHull2D" returncomment="array of points" fulltype="Point3d[]" type="Point3d">
				<comment>
					<description>Calculates the convex hull of the given array of points.
 Returns an array of points: [centroid, p0, p1, p2, ..., pn, p0};
 (Repeatation of the first point to close the area (during triangulation))</description>
					<attribute name="@param">
						<description>points</description>
					</attribute>
					<attribute name="@return">
						<description>array of points</description>
					</attribute>
				</comment>
				<params>
					<param name="points" comment="" fulltype="Point2d[]" type="Point2d" />
				</params>
			</method>
			<method static="true" visibility="public" name="getAlphaShape" returncomment="List of Vectors of Point3d, one Vector for each polegon of the surface" fulltype="java.util.List" type="List">
				<comment>
					<description>Calculates the alhpa shape of the given array of points considerring the choosn alpah value.
 Returns a List of Vectors of Point3d. Each Vector contains the points of one polygon. 
 In case the resoulting surface is not coherent the List will contain more then one Vector.</description>
					<attribute name="@param">
						<description>points</description>
					</attribute>
					<attribute name="@param">
						<description>alpha value</description>
					</attribute>
					<attribute name="@return">
						<description>List of Vectors of Point3d, one Vector for each polegon of the surface</description>
					</attribute>
				</comment>
				<params>
					<param name="points" comment="" fulltype="Point2d[]" type="Point2d" />
					<param name="alpha" comment="value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="getAlphaShape" returncomment="List of Vectors of Point3d, one Vector for each polegon of the surface" fulltype="java.util.List" type="List">
				<comment>
					<description>Calculates the alhpa shape of all (visible) nodes that can be reached from the given 
 root Node considerring the choosn alpah value.
 Returns a List of Vectors of Point3d. Each Vector contains the points of one polygon. 
 In case the resoulting surface is not coherent the List will contain more then one Vector.</description>
					<attribute name="@param">
						<description>points</description>
					</attribute>
					<attribute name="@param">
						<description>alpha value</description>
					</attribute>
					<attribute name="@return">
						<description>List of Vectors of Point3d, one Vector for each polegon of the surface</description>
					</attribute>
				</comment>
				<params>
					<param name="root" fulltype="Node" type="Node" />
					<param name="alpha" comment="value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="Surface" fulltype="NURBSSurface" type="NURBSSurface">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="surface" fulltype="BSplineSurface" type="BSplineSurface" />
				</params>
			</method>
			<method static="true" visibility="public" name="Surface" fulltype="NURBSSurface" type="NURBSSurface">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="profile" fulltype="BSplineCurve" type="BSplineCurve" />
				</params>
			</method>
			<method static="true" visibility="public" name="Surface" fulltype="NURBSSurface" type="NURBSSurface">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="radius" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="Surface" fulltype="NURBSSurface" type="NURBSSurface">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="type" fulltype="byte" type="byte" />
				</params>
			</method>
			<method static="true" visibility="public" name="Surface" fulltype="NURBSSurface" type="NURBSSurface">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="profiles" fulltype="BSplineCurveList" type="BSplineCurveList" />
				</params>
			</method>
			<method static="true" visibility="public" name="Surface" fulltype="NURBSSurface" type="NURBSSurface">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="profile" fulltype="BSplineCurve" type="BSplineCurve" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="useRail" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="Surface" fulltype="NURBSSurface" type="NURBSSurface">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="type" fulltype="byte" type="byte" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="useRail" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="visualizeAsColor" returncomment="a color shader which visualizes &lt;code&gt;x&lt;/code&gt;" fulltype="RGBAShader" type="RGBAShader">
				<comment>
					<description>Returns a color shader whose color represents the value of
 &lt;code&gt;x&lt;/code&gt; which has to lie between -1 and 1. The color
 is interpolated between green for 1, white for 0 and
 red for -1.</description>
					<attribute name="@param">
						<description>x a value between -1 and 1</description>
					</attribute>
					<attribute name="@return">
						<description>a color shader which visualizes &lt;code&gt;x&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="a value between -1 and 1" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="print" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; with the specified colour to the XL console.</description>
					<attribute name="@param">
						<description>v an object</description>
					</attribute>
					<attribute name="@param">
						<description>color selected printing color (black = 0x000000)</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="an object" fulltype="java.lang.Object" type="Object" />
					<param name="colour" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="print" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console.</description>
					<attribute name="@param">
						<description>v an object</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="an object" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="println" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; with the specified colour to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v an object</description>
					</attribute>
					<attribute name="@param">
						<description>color selected printing color (black = 0x000000)</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="an object" fulltype="java.lang.Object" type="Object" />
					<param name="colour" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="println" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v an object</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="an object" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="clearConsole" fulltype="void" type="void">
				<comment>
					<description>Clears the current console.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getTimeForRepaint" returncomment="time in milliseconds [ms]" fulltype="double" type="double">
				<comment>
					<description>Determine the time for one repaint of the 3D View window.</description>
					<attribute name="@return">
						<description>time in milliseconds [ms]</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getTimeForTraversingGraph" returncomment="time in milliseconds [ms]" fulltype="double" type="double">
				<comment>
					<description>Determine the time for traversing the whole graph (touching each node once).</description>
					<attribute name="@return">
						<description>time in milliseconds [ms]</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getGraphSize" returncomment="int, size of the graph" fulltype="int" type="int">
				<comment>
					<description>Number of nodes in the main graph.
 same as count((* Node *))</description>
					<attribute name="@return">
						<description>int, size of the graph</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getSceneGraphSize" returncomment="int, size of the graph" fulltype="int" type="int">
				<comment>
					<description>Number of nodes in the scene graph.
 	 * same as count((* ShadedNull *))</description>
					<attribute name="@return">
						<description>int, size of the graph</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;w&lt;/code&gt;" fulltype="java.io.PrintWriter" type="PrintWriter">
				<comment>
					<description>This operator method prints &lt;code&gt;v&lt;/code&gt; on &lt;code&gt;w&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>w a writer</description>
					</attribute>
					<attribute name="@param">
						<description>v value to be printed on &lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a writer" fulltype="java.io.PrintWriter" type="PrintWriter" />
					<param name="v" comment="value to be printed on &lt;code&gt;w&lt;/code&gt;" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="println" fulltype="void" type="void">
				<comment>
					<description>Terminate the current line by writing the line separator string.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="print" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="value to be printed" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="println" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="value to be printed" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;w&lt;/code&gt;" fulltype="java.io.PrintWriter" type="PrintWriter">
				<comment>
					<description>This operator method prints &lt;code&gt;v&lt;/code&gt; on &lt;code&gt;w&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>w a writer</description>
					</attribute>
					<attribute name="@param">
						<description>v value to be printed on &lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a writer" fulltype="java.io.PrintWriter" type="PrintWriter" />
					<param name="v" comment="value to be printed on &lt;code&gt;w&lt;/code&gt;" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="print" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="value to be printed" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="println" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="value to be printed" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;w&lt;/code&gt;" fulltype="java.io.PrintWriter" type="PrintWriter">
				<comment>
					<description>This operator method prints &lt;code&gt;v&lt;/code&gt; on &lt;code&gt;w&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>w a writer</description>
					</attribute>
					<attribute name="@param">
						<description>v value to be printed on &lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a writer" fulltype="java.io.PrintWriter" type="PrintWriter" />
					<param name="v" comment="value to be printed on &lt;code&gt;w&lt;/code&gt;" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="print" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="value to be printed" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="println" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="value to be printed" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;w&lt;/code&gt;" fulltype="java.io.PrintWriter" type="PrintWriter">
				<comment>
					<description>This operator method prints &lt;code&gt;v&lt;/code&gt; on &lt;code&gt;w&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>w a writer</description>
					</attribute>
					<attribute name="@param">
						<description>v value to be printed on &lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a writer" fulltype="java.io.PrintWriter" type="PrintWriter" />
					<param name="v" comment="value to be printed on &lt;code&gt;w&lt;/code&gt;" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="print" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="value to be printed" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="println" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="value to be printed" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;w&lt;/code&gt;" fulltype="java.io.PrintWriter" type="PrintWriter">
				<comment>
					<description>This operator method prints &lt;code&gt;v&lt;/code&gt; on &lt;code&gt;w&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>w a writer</description>
					</attribute>
					<attribute name="@param">
						<description>v value to be printed on &lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a writer" fulltype="java.io.PrintWriter" type="PrintWriter" />
					<param name="v" comment="value to be printed on &lt;code&gt;w&lt;/code&gt;" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="print" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="value to be printed" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="println" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="value to be printed" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;w&lt;/code&gt;" fulltype="java.io.PrintWriter" type="PrintWriter">
				<comment>
					<description>This operator method prints &lt;code&gt;v&lt;/code&gt; on &lt;code&gt;w&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>w a writer</description>
					</attribute>
					<attribute name="@param">
						<description>v value to be printed on &lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a writer" fulltype="java.io.PrintWriter" type="PrintWriter" />
					<param name="v" comment="value to be printed on &lt;code&gt;w&lt;/code&gt;" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="print" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="value to be printed" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="println" fulltype="void" type="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="value to be printed" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;w&lt;/code&gt;" fulltype="java.io.PrintWriter" type="PrintWriter">
				<comment>
					<description>This operator method prints &lt;code&gt;v&lt;/code&gt; on &lt;code&gt;w&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>w a writer</description>
					</attribute>
					<attribute name="@param">
						<description>v value to be printed on &lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="w" comment="a writer" fulltype="java.io.PrintWriter" type="PrintWriter" />
					<param name="v" comment="value to be printed on &lt;code&gt;w&lt;/code&gt;" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" returncomment="evaluation of &lt;code&gt;func&lt;/code&gt; at &lt;code&gt;x&lt;/code&gt;" fulltype="float" type="float">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;func.evaluateFloat(x)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>func a function</description>
					</attribute>
					<attribute name="@param">
						<description>x argument to the function</description>
					</attribute>
					<attribute name="@return">
						<description>evaluation of &lt;code&gt;func&lt;/code&gt; at &lt;code&gt;x&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="func" comment="a function" fulltype="FloatToFloat" type="FloatToFloat" />
					<param name="x" comment="argument to the function" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" fulltype="java.util.List" type="List">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="java.util.List" type="List" />
					<param name="value" comment="value to add as last element" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="node" fulltype="Node" type="Node" />
					<param name="attr" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$in" returncomment="&lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;value&lt;/code&gt; is in &lt;code&gt;set&lt;/code&gt;" fulltype="boolean" type="boolean">
				<comment>
					<description>This operator method returns &lt;code&gt;true&lt;/code&gt; iff
 &lt;code&gt;set&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt; and
 &lt;code&gt;set.contains(value)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>value a value</description>
					</attribute>
					<attribute name="@param">
						<description>set a collection</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;value&lt;/code&gt; is in &lt;code&gt;set&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="a value" fulltype="java.lang.Object" type="Object" />
					<param name="set" comment="a collection" fulltype="java.util.Collection" type="Collection" />
				</params>
			</method>
			<method static="true" visibility="public" name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" fulltype="boolean" type="boolean">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of structure" fulltype="java.lang.Object" type="Object" />
					<param name="generator" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
					<param name="synth" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" fulltype="byte" type="byte">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of structure" fulltype="java.lang.Object" type="Object" />
					<param name="generator" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
					<param name="synth" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" fulltype="short" type="short">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of structure" fulltype="java.lang.Object" type="Object" />
					<param name="generator" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
					<param name="synth" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" fulltype="char" type="char">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of structure" fulltype="java.lang.Object" type="Object" />
					<param name="generator" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
					<param name="synth" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" fulltype="int" type="int">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of structure" fulltype="java.lang.Object" type="Object" />
					<param name="generator" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
					<param name="synth" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" fulltype="long" type="long">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of structure" fulltype="java.lang.Object" type="Object" />
					<param name="generator" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
					<param name="synth" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" fulltype="float" type="float">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of structure" fulltype="java.lang.Object" type="Object" />
					<param name="generator" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
					<param name="synth" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" fulltype="double" type="double">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of structure" fulltype="java.lang.Object" type="Object" />
					<param name="generator" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
					<param name="synth" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>&lt;V&gt; the type of values of the synthesized attribute</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of structure" fulltype="java.lang.Object" type="Object" />
					<param name="generator" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
					<param name="synth" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" fulltype="boolean" type="boolean">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="BooleanList" type="BooleanList" />
					<param name="index" comment="an index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" fulltype="BooleanList" type="BooleanList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="BooleanList" type="BooleanList" />
					<param name="value" comment="value to add as last element" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" fulltype="boolean" type="boolean">
				<params>
					<param name="node" fulltype="Node" type="Node" />
					<param name="attr" fulltype="BooleanAttribute" type="BooleanAttribute" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" fulltype="byte" type="byte">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="ByteList" type="ByteList" />
					<param name="index" comment="an index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" fulltype="ByteList" type="ByteList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="ByteList" type="ByteList" />
					<param name="value" comment="value to add as last element" fulltype="byte" type="byte" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" fulltype="byte" type="byte">
				<params>
					<param name="node" fulltype="Node" type="Node" />
					<param name="attr" fulltype="ByteAttribute" type="ByteAttribute" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" fulltype="short" type="short">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="ShortList" type="ShortList" />
					<param name="index" comment="an index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" fulltype="ShortList" type="ShortList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="ShortList" type="ShortList" />
					<param name="value" comment="value to add as last element" fulltype="short" type="short" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" fulltype="short" type="short">
				<params>
					<param name="node" fulltype="Node" type="Node" />
					<param name="attr" fulltype="ShortAttribute" type="ShortAttribute" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" fulltype="char" type="char">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="CharList" type="CharList" />
					<param name="index" comment="an index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" fulltype="CharList" type="CharList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="CharList" type="CharList" />
					<param name="value" comment="value to add as last element" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" fulltype="char" type="char">
				<params>
					<param name="node" fulltype="Node" type="Node" />
					<param name="attr" fulltype="CharAttribute" type="CharAttribute" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" fulltype="int" type="int">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="IntList" type="IntList" />
					<param name="index" comment="an index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" fulltype="IntList" type="IntList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="IntList" type="IntList" />
					<param name="value" comment="value to add as last element" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" fulltype="int" type="int">
				<params>
					<param name="node" fulltype="Node" type="Node" />
					<param name="attr" fulltype="IntAttribute" type="IntAttribute" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" fulltype="long" type="long">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="LongList" type="LongList" />
					<param name="index" comment="an index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" fulltype="LongList" type="LongList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="LongList" type="LongList" />
					<param name="value" comment="value to add as last element" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" fulltype="long" type="long">
				<params>
					<param name="node" fulltype="Node" type="Node" />
					<param name="attr" fulltype="LongAttribute" type="LongAttribute" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" fulltype="float" type="float">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="FloatList" type="FloatList" />
					<param name="index" comment="an index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" fulltype="FloatList" type="FloatList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="FloatList" type="FloatList" />
					<param name="value" comment="value to add as last element" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" fulltype="float" type="float">
				<params>
					<param name="node" fulltype="Node" type="Node" />
					<param name="attr" fulltype="FloatAttribute" type="FloatAttribute" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" fulltype="double" type="double">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="DoubleList" type="DoubleList" />
					<param name="index" comment="an index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" fulltype="DoubleList" type="DoubleList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="a list" fulltype="DoubleList" type="DoubleList" />
					<param name="value" comment="value to add as last element" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" fulltype="double" type="double">
				<params>
					<param name="node" fulltype="Node" type="Node" />
					<param name="attr" fulltype="DoubleAttribute" type="DoubleAttribute" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" returncomment="&lt;code&gt;index&lt;/code&gt;-th child of &lt;code&gt;code&lt;/code&gt;" fulltype="Node" type="Node">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;node.getChild(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;index&lt;/code&gt;-th child of &lt;code&gt;code&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>Node#getBranchNode(int)</description>
					</attribute>
				</comment>
				<params>
					<param name="node" comment="a node" fulltype="Node" type="Node" />
					<param name="index" comment="an index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$lt" returncomment="&lt;code&gt;a.getId () &lt; b.getId ()&lt;/code&gt;" fulltype="boolean" type="boolean">
				<comment>
					<description>This operator method compares two nodes based on their id:
 It returns &lt;code&gt;true&lt;/code&gt; iff
 &lt;code&gt;a.getId () &lt; b.getId ()&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>a a node</description>
					</attribute>
					<attribute name="@param">
						<description>b another node</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;a.getId () &lt; b.getId ()&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>Node#getId()</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a node" fulltype="Node" type="Node" />
					<param name="b" comment="another node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$le" returncomment="&lt;code&gt;a.getId () &lt;= b.getId ()&lt;/code&gt;" fulltype="boolean" type="boolean">
				<comment>
					<description>This operator method compares two nodes based on their id:
 It returns &lt;code&gt;true&lt;/code&gt; iff
 &lt;code&gt;a.getId () &lt;= b.getId ()&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>a a node</description>
					</attribute>
					<attribute name="@param">
						<description>b another node</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;a.getId () &lt;= b.getId ()&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>Node#getId()</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a node" fulltype="Node" type="Node" />
					<param name="b" comment="another node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$gt" returncomment="&lt;code&gt;a.getId () &gt; b.getId ()&lt;/code&gt;" fulltype="boolean" type="boolean">
				<comment>
					<description>This operator method compares two nodes based on their id:
 It returns &lt;code&gt;true&lt;/code&gt; iff
 &lt;code&gt;a.getId () &gt; b.getId ()&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>a a node</description>
					</attribute>
					<attribute name="@param">
						<description>b another node</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;a.getId () &gt; b.getId ()&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>Node#getId()</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a node" fulltype="Node" type="Node" />
					<param name="b" comment="another node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$ge" returncomment="&lt;code&gt;a.getId () &gt;= b.getId ()&lt;/code&gt;" fulltype="boolean" type="boolean">
				<comment>
					<description>This operator method compares two nodes based on their id:
 It returns &lt;code&gt;true&lt;/code&gt; iff
 &lt;code&gt;a.getId () &gt;= b.getId ()&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>a a node</description>
					</attribute>
					<attribute name="@param">
						<description>b another node</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;a.getId () &gt;= b.getId ()&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>Node#getId()</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a node" fulltype="Node" type="Node" />
					<param name="b" comment="another node" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" returncomment="evaluation of &lt;code&gt;f&lt;/code&gt; at &lt;code&gt;n&lt;/code&gt;" fulltype="int" type="int">
				<comment>
					<description>This operator method applies the function
 &lt;code&gt;f&lt;/code&gt; to node &lt;code&gt;n&lt;/code&gt;. It is an alias for
 &lt;code&gt;f.get(n)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>f a function of nodes</description>
					</attribute>
					<attribute name="@return">
						<description>evaluation of &lt;code&gt;f&lt;/code&gt; at &lt;code&gt;n&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="a node" fulltype="Node" type="Node" />
					<param name="f" comment="a function of nodes" fulltype="NodeToInt" type="NodeToInt" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" returncomment="evaluation of &lt;code&gt;f&lt;/code&gt; at &lt;code&gt;n&lt;/code&gt;" fulltype="float" type="float">
				<comment>
					<description>This operator method applies the function
 &lt;code&gt;f&lt;/code&gt; to node &lt;code&gt;n&lt;/code&gt;. It is an alias for
 &lt;code&gt;f.get(n)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>f a function of nodes</description>
					</attribute>
					<attribute name="@return">
						<description>evaluation of &lt;code&gt;f&lt;/code&gt; at &lt;code&gt;n&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="a node" fulltype="Node" type="Node" />
					<param name="f" comment="a function of nodes" fulltype="NodeToFloat" type="NodeToFloat" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" returncomment="evaluation of &lt;code&gt;f&lt;/code&gt; at &lt;code&gt;n&lt;/code&gt;" fulltype="double" type="double">
				<comment>
					<description>This operator method applies the function
 &lt;code&gt;f&lt;/code&gt; to node &lt;code&gt;n&lt;/code&gt;. It is an alias for
 &lt;code&gt;f.get(n)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>f a function of nodes</description>
					</attribute>
					<attribute name="@return">
						<description>evaluation of &lt;code&gt;f&lt;/code&gt; at &lt;code&gt;n&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="a node" fulltype="Node" type="Node" />
					<param name="f" comment="a function of nodes" fulltype="NodeToDouble" type="NodeToDouble" />
				</params>
			</method>
			<method static="true" visibility="public" name="operator$index" returncomment="location of &lt;code&gt;n&lt;/code&gt; in global coordinates" fulltype="Point3d" type="Point3d">
				<comment>
					<description>This operator method returns the location of &lt;code&gt;n&lt;/code&gt;.
 It is an alias for &lt;code&gt;location(n)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>l dummy parameter, its value is ignored</description>
					</attribute>
					<attribute name="@return">
						<description>location of &lt;code&gt;n&lt;/code&gt; in global coordinates</description>
					</attribute>
					<attribute name="@see">
						<description>#location(Node)</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="a node" fulltype="Node" type="Node" />
					<param name="l" comment="dummy parameter, its value is ignored" fulltype="Location" type="Location" />
				</params>
			</method>
			<method static="true" visibility="public" name="mean" fulltype="void" type="void">
				<comment>
					<description>This aggregate method computes the mean of a sequence of
 &lt;code&gt;Tuple3f&lt;/code&gt;&apos;s.</description>
					<attribute name="@param">
						<description>a aggregate instance (provided by the XL compiler)</description>
					</attribute>
					<attribute name="@param">
						<description>value a value of the sequence of values</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="aggregate instance (provided by the XL compiler)" fulltype="Aggregate" type="Aggregate" />
					<param name="value" comment="a value of the sequence of values" fulltype="Tuple3f" type="Tuple3f" />
				</params>
			</method>
			<method static="true" visibility="public" name="mean" fulltype="void" type="void">
				<comment>
					<description>This aggregate method computes the mean of a sequence of
 &lt;code&gt;Tuple3d&lt;/code&gt;&apos;s.</description>
					<attribute name="@param">
						<description>a aggregate instance (provided by the XL compiler)</description>
					</attribute>
					<attribute name="@param">
						<description>value a value of the sequence of values</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="aggregate instance (provided by the XL compiler)" fulltype="Aggregate" type="Aggregate" />
					<param name="value" comment="a value of the sequence of values" fulltype="Tuple3d" type="Tuple3d" />
				</params>
			</method>
			<method static="true" visibility="public" name="plot" fulltype="boolean" type="boolean">
				<params>
					<param name="a" fulltype="Aggregate" type="Aggregate" />
					<param name="function" fulltype="IntToDouble" type="IntToDouble" />
					<param name="x" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="plot" fulltype="boolean" type="boolean">
				<params>
					<param name="a" fulltype="Aggregate" type="Aggregate" />
					<param name="function" fulltype="DoubleToDouble" type="DoubleToDouble" />
					<param name="x" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="toObjectToDouble" fulltype="&lt;any&gt;" type="&lt;any&gt;">
				<params>
					<param name="f" fulltype="DoubleToDouble" type="DoubleToDouble" />
				</params>
			</method>
			<method static="true" visibility="public" name="plot" fulltype="boolean" type="boolean">
				<params>
					<param name="a" fulltype="Aggregate" type="Aggregate" />
					<param name="x" fulltype="double" type="double" />
					<param name="y" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="plotPoints" fulltype="boolean" type="boolean">
				<params>
					<param name="a" fulltype="Aggregate" type="Aggregate" />
					<param name="x" fulltype="double" type="double" />
					<param name="y" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="range" fulltype="void" type="void">
				<params>
					<param name="consumer" fulltype="DoubleConsumer" type="DoubleConsumer" />
					<param name="min" fulltype="double" type="double" />
					<param name="max" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="range" fulltype="void" type="void">
				<params>
					<param name="consumer" fulltype="DoubleConsumer" type="DoubleConsumer" />
					<param name="min" fulltype="double" type="double" />
					<param name="max" fulltype="double" type="double" />
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="select" fulltype="int" type="int">
				<params>
					<param name="a" fulltype="Aggregate" type="Aggregate" />
					<param name="value" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="apply" returncomment="a finish iterator" fulltype="DisposableIterator" type="DisposableIterator">
				<comment>
					<description>This finish iterator (see the XL Language Specification)
 is used in a &lt;code&gt;for&lt;/code&gt;-statement to execute its body
 &lt;code&gt;count&lt;/code&gt; times. Each execution is surrounded
 by a transformation boundary (see {@link #derive()}).</description>
					<attribute name="@param">
						<description>count number of iterations</description>
					</attribute>
					<attribute name="@return">
						<description>a finish iterator</description>
					</attribute>
				</comment>
				<params>
					<param name="count" comment="number of iterations" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="applyUntilFinished" returncomment="a finish iterator" fulltype="DisposableIterator" type="DisposableIterator">
				<comment>
					<description>This finish iterator (see the XL Language Specification)
 is used in a &lt;code&gt;for&lt;/code&gt;-statement to execute its body
 as long as the body makes modifications to the graph. 
 Each execution is surrounded
 by a transformation boundary (see {@link #derive()}).</description>
					<attribute name="@return">
						<description>a finish iterator</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="passBoundary" fulltype="void" type="void">
				<comment>
					<attribute name="@deprecated">
						<description>replaced by {@link #derive()}</description>
					</attribute>
				</comment>
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
			</method>
			<method static="true" visibility="public" name="apply" fulltype="void" type="void">
				<comment>
					<attribute name="@deprecated">
						<description>replaced by {@link #derive()}</description>
					</attribute>
				</comment>
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
			</method>
			<method static="true" visibility="public" name="derive" fulltype="void" type="void">
				<comment>
					<description>This method induces a &lt;em&gt;transformation boundary&lt;/em&gt;
 on the current RGG extent (see the XL Language Specification).
 This means that all pending graph modifications are
 applied to the graph.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="newGRSVertices" fulltype="GRSVertex" type="GRSVertex">
				<params>
					<param name="cons" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="interpretiveRules" fulltype="DisposableIterator" type="DisposableIterator" />
			<method static="true" visibility="public" name="removeInterpretiveNodes" fulltype="void" type="void" />
			<method static="true" visibility="public" name="moveToExtent" fulltype="void" type="void">
				<comment>
					<description>Sets the {@link Node#getExtentIndex() extentIndex} property of
 &lt;code&gt;root&lt;/code&gt; and its subgraph spanned by
 {@link EdgePatternImpl#TREE} to &lt;code&gt;index&lt;/code&gt;. If &lt;code&gt;ps&lt;/code&gt;
 is &lt;code&gt;null&lt;/code&gt;, the property is modified as part of the
 {@linkplain de.grogra.persistence.PersistenceManager#getActiveTransaction()
 active transaction} of the graph. Otherwise, the {@link PropertyQueue}
 of &lt;code&gt;ps&lt;/code&gt; is used to enqueue the modifications.
 &lt;p&gt;
 Note that under normal operation, nodes at the {@link Node#LAST_EXTENT_INDEX}
 of the type extent are not returned as part of graph queries.</description>
					<attribute name="@param">
						<description>ps producer to obtain a modification queue, or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of subgraph</description>
					</attribute>
					<attribute name="@param">
						<description>index new value of the &lt;code&gt;extentTail&lt;/code&gt; property of the nodes</description>
					</attribute>
				</comment>
				<params>
					<param name="ps" comment="producer to obtain a modification queue, or &lt;code&gt;null&lt;/code&gt;" fulltype="RGGProducer" type="RGGProducer" />
					<param name="root" comment="root node of subgraph" fulltype="Node" type="Node" />
					<param name="index" comment="new value of the &lt;code&gt;extentTail&lt;/code&gt; property of the nodes" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="hide" fulltype="void" type="void">
				<comment>
					<description>Hides the subgraph starting at &lt;code&gt;root&lt;/code&gt; so that it is no
 longer visible and will not be reported as part of graph queries
 (and left hand sides of rules, thus).
 &lt;p&gt;
 Technically, this behaviour is achieved by two steps: At first,
 &lt;code&gt;root&lt;/code&gt; is reparented such that it becomes the child of
 the {@link RGGRoot} of this graph, the connection being established
 by an edge of type {@link Graph#MARK_EDGE}. This makes the subgraph
 invisible. Afterwards, {@link #moveToExtent} is invoked
 in order to move the subgraph to the last list of the type extent. Under
 normal operation, this excludes the subgraph from being returned
 as part of graph queries.
 &lt;p&gt;
 The modifications are made as part of the
 {@linkplain de.grogra.persistence.PersistenceManager#getActiveTransaction()
 active transaction} of the graph.</description>
					<attribute name="@param">
						<description>root root node of subgraph</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of subgraph" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="mergeTransformations" fulltype="void" type="void">
				<comment>
					<description>This method replaces chains of transformation nodes
 with single {@link Null} nodes which perform
 the aggregated transformation of the chains. This is the same
 as &lt;code&gt;mergeTransformations(root, null)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>root root node of subgraph where chains should be replaced</description>
					</attribute>
					<attribute name="@param">
						<description>allowShape store aggregated transformation in shape node at
 chain end if possible</description>
					</attribute>
					<attribute name="@see">
						<description>#mergeTransformations(Node, ObjectToBoolean, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of subgraph where chains should be replaced" fulltype="Node" type="Node" />
					<param name="allowShape" comment="store aggregated transformation in shape node at
 chain end if possible" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="mergeNonTropismTransformations" fulltype="void" type="void">
				<comment>
					<description>This method replaces chains of transformation nodes
 with single {@link Null} node which perform
 the aggregated transformation of the chain; however, transformation
 nodes which are tropisms are not allowed to be part of the chains.
 This is the same
 as &lt;code&gt;mergeNonTropismTransformations(root, null)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>root root node of subgraph where chains should be replaced</description>
					</attribute>
					<attribute name="@param">
						<description>allowShape store aggregated transformation in shape node at
 chain end if possible</description>
					</attribute>
					<attribute name="@see">
						<description>#mergeNonTropismTransformations(Node, ObjectToBoolean, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of subgraph where chains should be replaced" fulltype="Node" type="Node" />
					<param name="allowShape" comment="store aggregated transformation in shape node at
 chain end if possible" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="mergeNonTropismTransformations" fulltype="void" type="void">
				<comment>
					<description>This method replaces chains of transformation nodes passing
 &lt;code&gt;filter&lt;/code&gt; with single {@link Null} nodes which perform
 the aggregated transformation of the chains; however, transformation
 nodes which are tropisms are not allowed to be part of the chains.
 Tropisms are defined by the subclasses of {@link Tropism}.</description>
					<attribute name="@param">
						<description>root root node of subgraph where chains should be replaced</description>
					</attribute>
					<attribute name="@param">
						<description>filter only merge nodes which pass this filter. If &lt;code&gt;null&lt;/code&gt;
 is specified, every non-tropism transformation node is considered for merging</description>
					</attribute>
					<attribute name="@see">
						<description>#mergeTransformations(Node, ObjectToBoolean, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of subgraph where chains should be replaced" fulltype="Node" type="Node" />
					<param name="filter" comment="only merge nodes which pass this filter. If &lt;code&gt;null&lt;/code&gt;
 is specified, every non-tropism transformation node is considered for merging" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
					<param name="allowShape" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="mergeTransformations" fulltype="void" type="void">
				<comment>
					<description>This method replaces chains of transformation nodes passing
 &lt;code&gt;filter&lt;/code&gt; with single {@link Null} nodes which perform
 the aggregated transformation of the chains. A node is considered to be
 a transformation node if it has a
 {@linkplain de.grogra.imp3d.objects.Attributes#TRANSFORMATION transformation attribute},
 but no
 {@linkplain de.grogra.imp3d.objects.Attributes#SHAPE shape attribute}.
 If it additionally passes &lt;code&gt;filter&lt;/code&gt; and is part of a chain of
 such nodes, this chain will be replaced by an equivalent single node of class
 {@link Null}.</description>
					<attribute name="@param">
						<description>root root node of subgraph where chains should be replaced</description>
					</attribute>
					<attribute name="@param">
						<description>filter only merge nodes which pass this filter. If &lt;code&gt;null&lt;/code&gt;
 is specified, every transformation node is considered for merging</description>
					</attribute>
					<attribute name="@param">
						<description>allowShape if possible, store aggregated transformation in
 existing shape node at chain end
 (instead of creating a new &lt;code&gt;Null&lt;/code&gt; node)</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of subgraph where chains should be replaced" fulltype="Node" type="Node" />
					<param name="filter" comment="only merge nodes which pass this filter. If &lt;code&gt;null&lt;/code&gt;
 is specified, every transformation node is considered for merging" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
					<param name="allowShape" comment="if possible, store aggregated transformation in
 existing shape node at chain end
 (instead of creating a new &lt;code&gt;Null&lt;/code&gt; node)" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="removeTransformationLeaves" fulltype="void" type="void">
				<comment>
					<description>Removes all leaf nodes from the graph which are pure transformation
 nodes (see {@link #removeTransformationLeaves(Node, ObjectToBoolean)}).</description>
					<attribute name="@param">
						<description>root root node of subgraph whose leaves shall be removed</description>
					</attribute>
					<attribute name="@see">
						<description>#removeLeaves</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of subgraph whose leaves shall be removed" fulltype="Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="removeTransformationLeaves" fulltype="void" type="void">
				<comment>
					<description>Removes all leaf nodes from the graph which are pure transformation
 nodes and which pass &lt;code&gt;filter&lt;/code&gt;,
 starting at &lt;code&gt;root&lt;/code&gt; (see {@link #removeLeaves}).
 A node is considered to be a pure transformation node if it has a
 {@linkplain de.grogra.imp3d.objects.Attributes#TRANSFORMATION transformation attribute},
 but no
 {@linkplain de.grogra.imp3d.objects.Attributes#SHAPE shape attribute}.</description>
					<attribute name="@param">
						<description>root root node of subgraph whose leaves shall be removed</description>
					</attribute>
					<attribute name="@param">
						<description>filter only leaf nodes which pass this filter are removed.
 If &lt;code&gt;null&lt;/code&gt;, all transformation nodes are considered</description>
					</attribute>
					<attribute name="@see">
						<description>#removeLeaves</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of subgraph whose leaves shall be removed" fulltype="Node" type="Node" />
					<param name="filter" comment="only leaf nodes which pass this filter are removed.
 If &lt;code&gt;null&lt;/code&gt;, all transformation nodes are considered" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="removeLeaves" fulltype="void" type="void">
				<comment>
					<description>Removes all leaf nodes from the graph which pass
 &lt;code&gt;filter&lt;/code&gt;, starting at &lt;code&gt;root&lt;/code&gt;. A leaf is a node
 which can be reached from the &lt;code&gt;root&lt;/code&gt; by traversing
 {@link #branch} or {@link #successor} edges in forward direction and
 which has no outgoing edge. If a node which passes &lt;code&gt;filter&lt;/code&gt;
 is no leaf initially, but becomes a leaf due to the removal of its
 children, it is also removed itself. As a result, the graph finally
 does not contain any leaves which pass &lt;code&gt;filter&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>root root node of subgraph whose leaves shall be removed</description>
					</attribute>
					<attribute name="@param">
						<description>filter only leaf nodes which pass this filter are removed</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="root node of subgraph whose leaves shall be removed" fulltype="Node" type="Node" />
					<param name="filter" comment="only leaf nodes which pass this filter are removed" fulltype="&lt;any&gt;" type="&lt;any&gt;" />
				</params>
			</method>
			<method static="true" visibility="public" name="statistics" returncomment="statistics of the series of values" fulltype="Statistics" type="Statistics">
				<comment>
					<description>This aggregate method computes a &lt;code&gt;Statistics&lt;/code&gt;
 object for a series of values &lt;code&gt;a&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>a aggregate instance (provided by the XL compiler)</description>
					</attribute>
					<attribute name="@param">
						<description>value a value of the sequence of values</description>
					</attribute>
					<attribute name="@return">
						<description>statistics of the series of values</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="aggregate instance (provided by the XL compiler)" fulltype="Aggregate" type="Aggregate" />
					<param name="value" comment="a value of the sequence of values" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="defer" fulltype="void" type="void">
				<comment>
					<description>Put runnable into modification queue and execute later when derive() is called.</description>
					<attribute name="@param">
						<description>r</description>
					</attribute>
				</comment>
				<params>
					<param name="r" comment="" fulltype="java.lang.Runnable" type="Runnable" />
				</params>
			</method>
			<method static="true" visibility="public" name="randomDirection" returncomment="random uniformly distributed direction vector" fulltype="Vector3d" type="Vector3d">
				<comment>
					<description>Pick a random point on the surface of a unit sphere and return it as direction vector.</description>
					<attribute name="@return">
						<description>random uniformly distributed direction vector</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
</java-to-xml>
