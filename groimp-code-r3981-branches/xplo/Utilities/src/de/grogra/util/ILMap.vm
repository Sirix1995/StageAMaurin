#if (!$generate)
	#set ($generate = true)
	#foreach ($key in ["int"])
		#set ($Key = $pp.firstToUpperCase($key))
		#foreach ($val in ["int", "Object"])
			#set ($Val = $pp.firstToUpperCase($val))
			#set ($NAME = "${Key}2${Val}Map")
			#set ($out = "de/grogra/util/${NAME}.java")
			$generator.parse("de/grogra/util/ILMap.vm", $out)
		#end
	#end
#else

#if ($val == "Object")
	#set ($null = "null")
#else
	#set ($null = 0)
#end

$pp.autogenerated

/*
 * Copyright (C) 2002 - 2007 Lehrstuhl Grafische Systeme, BTU Cottbus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package de.grogra.util;

import de.grogra.xl.util.IntList;

public class $NAME
{
	private $key[] keys;
	private $val[] values;
	private int size;


	public $NAME (int capacity)
	{
		if (capacity < 4)
		{
			capacity = 4;
		}
		keys = new $key[capacity];
		values = new $val[capacity];
	}


	public $NAME ()
	{
		this (16);
	}


	public $NAME ($key[] keys, int off, int len)
	{
		this (len);
		System.arraycopy (keys, off, this.keys, 0, len);
		size = len;
	}


	public $NAME dup ()
	{
		$NAME d = new $NAME (size);
		System.arraycopy (keys, 0, d.keys, 0, size);
		System.arraycopy (values, 0, d.values, 0, size);
		d.size = size;
		return d;
	}


	public $key[] getKeys ($key[] array)
	{
		if ((array == null) || (array.length < size))
		{
			array = new $key[size];
		}
		System.arraycopy (keys, 0, array, 0, size);
		return array;
	}


	public $val[] getValues ($val[] array)
	{
		if (array == null)
		{
			array = new $val[size];
		}
		else if (array.length < size)
		{
#if ($val == "Object")
			array = (Object[]) java.lang.reflect.Array.newInstance
				(array.getClass ().getComponentType (), size);
#else
			array = new $val[size];
#end
		}
		System.arraycopy (values, 0, array, 0, size);
		return array;
	}


	public final synchronized $val synchronizedPut ($key key, $val value)
	{
		return put (key, value);
	}


	public final $val put ($key key, $val value)
	{
		int i = IntList.binarySearch (keys, key, 0, size);
		if (i >= 0)
		{
			$val prev = values[i];
			values[i] = value;
			return prev;
		}
		i = ~i;
		if (keys.length == size)
		{
			System.arraycopy (keys, 0, keys = new $key[2 * size], 0, size);
			System.arraycopy (values, 0, values = new $val[2 * size], 0,
							  size);
		}
		if (i < size)
		{
			System.arraycopy (keys, i, keys, i + 1, size - i);
			System.arraycopy (values, i, values, i + 1, size - i);
		}
		keys[i] = key;
		values[i] = value;
		size++;
		return $null;
	}


	public final $val get ($key key)
	{
		int i = IntList.binarySearch (keys, key, 0, size);
		return (i >= 0) ? values[i] : $null;
	}


	public final synchronized $val synchronizedGet ($key key)
	{
		return get (key);
	}


	public final $val remove ($key key)
	{
		int i = IntList.binarySearch (keys, key, 0, size);
		if (i >= 0)
		{
			$val o = values[i];
			size--;
			System.arraycopy (keys, i + 1, keys, i, size - i);
			System.arraycopy (values, i + 1, values, i, size - i);
#if ($val == "Object")
			values[size] = null;
#end
			return o;
		}
		return $null;
	}


	public final synchronized $val synchronizedRemove ($key key)
	{
		return remove (key);
	}


	public int size ()
	{
		return size;
	}


	public void clear ()
	{
#if ($val == "Object")
		for (int i = size - 1; i >= 0; i--)
		{
			values[i] = null;
		}
#end
		size = 0;
	}


	public $key getKeyAt (int index)
	{
		return keys[index];
	}


	public $val getValueAt (int index)
	{
		return values[index];
	}


	public int findIndex ($key key)
	{
		return IntList.binarySearch (keys, key, 0, size);
	}


	public void setValueAt (int index, $val value)
	{
		values[index] = value;
	}

}

#end
