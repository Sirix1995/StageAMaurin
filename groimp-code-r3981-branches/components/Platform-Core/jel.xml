<?xml version="1.0" encoding="UTF-8"?>
<java-to-xml doclet="jeldoclet-2.0" creation="Tue May 07 21:22:17 CEST 2013">
	<jelclass superclass="Object" package="de.grogra.rgg" superclassfulltype="java.lang.Object" type="Library" visibility="public" fulltype="de.grogra.rgg.Library">
		<comment>
			<description>This class contains a collection of methods and constants which are
 useful in RGG modelling, especially in 3D.</description>
			<attribute name="@author">
				<description>Ole Kniemeyer</description>
			</attribute>
		</comment>
		<fields>
			<field name="successor" static="true" final="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This is a redefinition of {@link Graph#SUCCESSOR_EDGE}.</description>
				</comment>
			</field>
			<field name="branch" static="true" final="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This is a redefinition of {@link Graph#BRANCH_EDGE}.</description>
				</comment>
			</field>
			<field name="contains" static="true" final="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This is a redefinition of {@link Graph#CONTAINMENT_EDGE}.</description>
				</comment>
			</field>
			<field name="refine" static="true" final="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This is a redefinition of {@link Graph#REFINEMENT_EDGE}.</description>
				</comment>
			</field>
			<field name="notifies" static="true" final="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This is a redefinition of {@link Graph#NOTIFIES_EDGE}.</description>
				</comment>
			</field>
			<field name="mark" static="true" final="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This is a redefinition of {@link Graph#MARK_EDGE}.</description>
				</comment>
			</field>
			<field name="send" static="true" final="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This is a redefinition of {@link Graph#SEND_EDGE}.</description>
				</comment>
			</field>
			<field name="uses" static="true" final="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This is a redefinition of {@link Graph#USES_EDGE}.</description>
				</comment>
			</field>
			<field name="slot" static="true" final="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This is a redefinition of {@link Graph#SLOT_EDGE}.</description>
				</comment>
			</field>
			<field name="ise" static="true" final="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This is a redefinition of {@link Graph#COMPONENT_INPUT_SLOT_EDGE}.</description>
				</comment>
			</field>
			<field name="ose" static="true" final="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This is a redefinition of {@link Graph#COMPONENT_OUTPUT_SLOT_EDGE}.</description>
				</comment>
			</field>
			<field name="dummy" static="true" final="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This is a redefinition of {@link Graph#DUMMY_EDGE}.</description>
				</comment>
			</field>
			<field name="updates" static="true" final="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This is a redefinition of {@link FieldUpdater#UPDATES}.</description>
				</comment>
			</field>
			<field name="master" static="true" final="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This is a redefinition of {@link Instance3D#MASTER}.</description>
				</comment>
			</field>
			<field name="EDGE_0" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="EDGE_1" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="EDGE_2" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="EDGE_3" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="EDGE_4" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="EDGE_5" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="EDGE_6" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="EDGE_7" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="EDGE_8" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="EDGE_9" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="EDGE_10" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="EDGE_11" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="EDGE_12" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="EDGE_13" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="EDGE_14" static="true" final="true" type="int" visibility="public" fulltype="int" />
			<field name="SKIN" static="true" final="true" type="byte" visibility="public" fulltype="byte">
				<comment>
					<description>Constant for {@link NURBSSurface#NURBSSurface(byte)} indicating a
 skinned surface (defined by a set of profile curves in space).</description>
				</comment>
			</field>
			<field name="SWEEP" static="true" final="true" type="byte" visibility="public" fulltype="byte">
				<comment>
					<description>Constant for {@link NURBSSurface#NURBSSurface(byte)} indicating a
 swept surface (defined by a set of vertices in space).</description>
				</comment>
			</field>
			<field name="I18N" static="true" final="true" type="I18NBundle" visibility="public" fulltype="I18NBundle">
				<comment>
					<description>The resource bundle for the &lt;code&gt;de.grogra.rgg&lt;/code&gt; package.</description>
				</comment>
			</field>
			<field name="DEG" static="true" constexpr="0.017453292519943295" final="true" type="double" visibility="public" const="0.017453292519943295" fulltype="double">
				<comment>
					<description>Conversion factor from degree to radians.</description>
				</comment>
			</field>
			<field name="R2D" static="true" constexpr="57.29577951308232" final="true" type="double" visibility="public" const="57.29577951308232" fulltype="double">
				<comment>
					<description>Conversion factor from radians to degree.</description>
				</comment>
			</field>
			<field name="LEFT" static="true" final="true" type="Vector3d" visibility="public" fulltype="Vector3d">
				<comment>
					<description>Vector pointing in the x-direction (the turtle&apos;s left axis).
 Do not modify its contents.</description>
				</comment>
			</field>
			<field name="UP" static="true" final="true" type="Vector3d" visibility="public" fulltype="Vector3d">
				<comment>
					<description>Vector pointing in the y-direction (the turtle&apos;s up axis).
 Do not modify its contents.</description>
				</comment>
			</field>
			<field name="HEAD" static="true" final="true" type="Vector3d" visibility="public" fulltype="Vector3d">
				<comment>
					<description>Vector pointing in the z-direction (the turtle&apos;s head axis).
 Do not modify its contents.</description>
				</comment>
			</field>
			<field name="ORIGIN" static="true" final="true" type="Point3d" visibility="public" fulltype="Point3d">
				<comment>
					<description>Point having coordinates (0, 0, 0).
 Do not modify its contents.</description>
				</comment>
			</field>
			<field name="makeGraph" static="true" final="true" type="RGGProducer.Creator" visibility="public" fulltype="RGGProducer.Creator" />
			<field name="out" static="true" final="true" type="PrintWriter" visibility="public" fulltype="java.io.PrintWriter">
				<comment>
					<description>This field provides a &lt;code&gt;PrintWriter&lt;/code&gt; to write
 to the XL console.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor name="Library" visibility="public" />
			<method name="console" returncomment="current console or &lt;code&gt;null&lt;/code&gt;" static="true" type="Console" visibility="public" fulltype="Console">
				<comment>
					<description>Returns the currently active &lt;code&gt;Console&lt;/code&gt;. This may return
 &lt;code&gt;null&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>current console or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
			</method>
			<method name="workbench" returncomment="current workbench or &lt;code&gt;null&lt;/code&gt;" static="true" type="IMPWorkbench" visibility="public" fulltype="IMPWorkbench">
				<comment>
					<description>Returns the currently active &lt;code&gt;Workbench&lt;/code&gt;. This may return
 &lt;code&gt;null&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>current workbench or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
			</method>
			<method name="closeWorkbench" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Closes the currently active &lt;code&gt;Workbench&lt;/code&gt; if such a workbench
 exists. Note that unsaved modifications are lost, because the user is
 not asked.</description>
				</comment>
			</method>
			<method name="graph" returncomment="current project graph or &lt;code&gt;null&lt;/code&gt;" static="true" type="GraphManager" visibility="public" fulltype="GraphManager">
				<comment>
					<description>Returns the current project graph, i.e., the project graph of the
 currently active &lt;code&gt;Workbench&lt;/code&gt;. This may return
 &lt;code&gt;null&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>current project graph or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
			</method>
			<method name="getProjectGraph" returncomment="current project graph or &lt;code&gt;null&lt;/code&gt;" static="true" type="GraphManager" visibility="public" fulltype="GraphManager">
				<comment>
					<description>Returns the current project graph, i.e., the project graph of the
 currently active &lt;code&gt;Workbench&lt;/code&gt;. This may return
 &lt;code&gt;null&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>current project graph or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
			</method>
			<method name="getMetaGraph" returncomment="current meta/registry graph or &lt;code&gt;null&lt;/code&gt;" static="true" type="GraphManager" visibility="public" fulltype="GraphManager">
				<comment>
					<description>Returns the current meta/registry graph, i.e., the meta/registry graph of the
 currently active &lt;code&gt;Workbench&lt;/code&gt;. This may return
 &lt;code&gt;null&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>current meta/registry graph or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
			</method>
			<method name="getComponentGraph" returncomment="current component graph or &lt;code&gt;null&lt;/code&gt;" static="true" type="GraphManager" visibility="public" fulltype="GraphManager">
				<comment>
					<description>Returns the current component graph, i.e., the component graph of the
 currently active &lt;code&gt;Workbench&lt;/code&gt;. This may return
 &lt;code&gt;null&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>current component graph or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
			</method>
			<method name="graphState" returncomment="current graph state" static="true" type="GraphState" visibility="public" fulltype="GraphState">
				<comment>
					<description>Returns the current graph state, i.e., the current graph state of the
 project graph of the currently active &lt;code&gt;Workbench&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>current graph state</description>
					</attribute>
				</comment>
			</method>
			<method name="extent" static="true" type="RGGGraph" visibility="public" fulltype="RGGGraph">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
			</method>
			<method name="rggGraph" static="true" type="RGGGraph" visibility="public" fulltype="RGGGraph" />
			<method name="allowNoninjectiveMatchesByDefault" static="true" type="void" visibility="public" fulltype="void">
				<params>
					<param name="value" type="boolean" fulltype="boolean" />
				</params>
			</method>
			<method name="allowNoninjectiveMatchesForNextQuery" static="true" type="void" visibility="public" fulltype="void">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="value" type="boolean" fulltype="boolean" />
				</params>
			</method>
			<method name="setDerivationMode" static="true" type="void" visibility="public" fulltype="void">
				<params>
					<param name="mode" type="int" fulltype="int" />
				</params>
			</method>
			<method name="undoOneStep" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Undo the last derivation step.</description>
				</comment>
			</method>
			<method name="namedNode" returncomment="a node whose name is &lt;code&gt;name&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;
 if no such node exists" static="true" type="Node" visibility="public" fulltype="Node">
				<comment>
					<description>Returns a node having the specified &lt;code&gt;name&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>name name of a node</description>
					</attribute>
					<attribute name="@return">
						<description>a node whose name is &lt;code&gt;name&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;
 if no such node exists</description>
					</attribute>
					<attribute name="@see">
						<description>GraphManager#getNodeForName</description>
					</attribute>
				</comment>
				<params>
					<param name="name" type="String" comment="name of a node" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="setStatus" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Displays &lt;code&gt;text&lt;/code&gt; in the current status bar.</description>
					<attribute name="@param">
						<description>text a text to be displayed</description>
					</attribute>
				</comment>
				<params>
					<param name="text" type="String" comment="a text to be displayed" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="chart" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Shows the data referenced by &lt;code&gt;ds&lt;/code&gt; in a chart panel.
 &lt;code&gt;type&lt;/code&gt; is one of the constants declared in
 {@link ChartPanel}, this specifies the type of chart.</description>
					<attribute name="@param">
						<description>ds reference to a {@link de.grogra.pf.data.Dataset}</description>
					</attribute>
					<attribute name="@param">
						<description>type chart type</description>
					</attribute>
				</comment>
				<params>
					<param name="ds" type="DatasetRef" comment="reference to a {@link de.grogra.pf.data.Dataset}" fulltype="DatasetRef" />
					<param name="type" type="int" comment="chart type" fulltype="int" />
				</params>
			</method>
			<method name="axisparent" static="true" type="Node" visibility="public" fulltype="Node">
				<params>
					<param name="child" type="Node" fulltype="Node" />
				</params>
			</method>
			<method name="isAncestor" returncomment="&lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;a&lt;/code&gt; is an ancestor
 of &lt;code&gt;d&lt;/code&gt;" static="true" type="boolean" visibility="public" fulltype="boolean">
				<comment>
					<description>Tests whether &lt;code&gt;a&lt;/code&gt; is an ancestor of &lt;code&gt;d&lt;/code&gt;
 (or &lt;code&gt;d&lt;/code&gt; itself), i.e., if &lt;code&gt;a&lt;/code&gt; can be reached
 from &lt;code&gt;d&lt;/code&gt; by a backward traversal of edges matching
 &lt;code&gt;edgeMask&lt;/code&gt; (see {@link Edge#testEdgeBits(int)}).
 Note that this method expects the relevant part of the subgraph
 spanned by matching edges to be a tree.</description>
					<attribute name="@param">
						<description>a the potential ancestor</description>
					</attribute>
					<attribute name="@param">
						<description>d the potential descendant</description>
					</attribute>
					<attribute name="@param">
						<description>edgeMask the edge mask to use</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;a&lt;/code&gt; is an ancestor
 of &lt;code&gt;d&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="a" type="Node" comment="the potential ancestor" fulltype="Node" />
					<param name="d" type="Node" comment="the potential descendant" fulltype="Node" />
					<param name="edgeMask" type="int" comment="the edge mask to use" fulltype="int" />
				</params>
			</method>
			<method name="irandom" returncomment="integral random number between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;" static="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>Returns a uniformly distributed integral pseudorandom number
 between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; (inclusive).</description>
					<attribute name="@param">
						<description>min minimal value</description>
					</attribute>
					<attribute name="@param">
						<description>max maximal value</description>
					</attribute>
					<attribute name="@return">
						<description>integral random number between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>#setSeed(long)</description>
					</attribute>
				</comment>
				<params>
					<param name="min" type="int" comment="minimal value" fulltype="int" />
					<param name="max" type="int" comment="maximal value" fulltype="int" />
				</params>
			</method>
			<method name="random" returncomment="random number between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;" static="true" type="float" visibility="public" fulltype="float">
				<comment>
					<description>Returns a uniformly distributed pseudorandom number
 between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>min minimal value</description>
					</attribute>
					<attribute name="@param">
						<description>max maximal value</description>
					</attribute>
					<attribute name="@return">
						<description>random number between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>#setSeed(long)</description>
					</attribute>
				</comment>
				<params>
					<param name="min" type="float" comment="minimal value" fulltype="float" />
					<param name="max" type="float" comment="maximal value" fulltype="float" />
				</params>
			</method>
			<method name="probability" returncomment="random value" static="true" type="boolean" visibility="public" fulltype="boolean">
				<comment>
					<description>Returns the value of a &lt;code&gt;boolean&lt;/code&gt; pseudorandom variable
 whose probability for &lt;code&gt;true&lt;/code&gt; is &lt;code&gt;p&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>p probability for &lt;code&gt;true&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>random value</description>
					</attribute>
					<attribute name="@see">
						<description>#setSeed(long)</description>
					</attribute>
				</comment>
				<params>
					<param name="p" type="float" comment="probability for &lt;code&gt;true&lt;/code&gt;" fulltype="float" />
				</params>
			</method>
			<method name="normal" returncomment="normally distributed random number" static="true" type="float" visibility="public" fulltype="float">
				<comment>
					<description>Returns a pseudorandom number which is distributed according
 to a normal distribution with mean value &lt;code&gt;mu&lt;/code&gt; and standard
 deviation &lt;code&gt;sigma&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>mu mean value</description>
					</attribute>
					<attribute name="@param">
						<description>sigma standard deviation</description>
					</attribute>
					<attribute name="@return">
						<description>normally distributed random number</description>
					</attribute>
					<attribute name="@see">
						<description>#setSeed(long)</description>
					</attribute>
				</comment>
				<params>
					<param name="mu" type="float" comment="mean value" fulltype="float" />
					<param name="sigma" type="float" comment="standard deviation" fulltype="float" />
				</params>
			</method>
			<method name="lognormal" static="true" type="double" visibility="public" fulltype="double">
				<params>
					<param name="mu" type="double" fulltype="double" />
					<param name="sigma" type="double" fulltype="double" />
				</params>
			</method>
			<method name="normal" returncomment="normally distributed random number" static="true" type="double" visibility="public" fulltype="double">
				<comment>
					<description>Returns a pseudorandom number which is distributed according
 to a normal distribution with mean value &lt;code&gt;mu&lt;/code&gt; and standard
 deviation &lt;code&gt;sigma&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>mu mean value</description>
					</attribute>
					<attribute name="@param">
						<description>sigma standard deviation</description>
					</attribute>
					<attribute name="@return">
						<description>normally distributed random number</description>
					</attribute>
					<attribute name="@see">
						<description>#setSeed(long)</description>
					</attribute>
				</comment>
				<params>
					<param name="mu" type="double" comment="mean value" fulltype="double" />
					<param name="sigma" type="double" comment="standard deviation" fulltype="double" />
				</params>
			</method>
			<method name="distribution" returncomment="random number according to &lt;code&gt;probabilities&lt;/code&gt;" static="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>Returns an integral pseudorandom number according to the
 discrete distribution &lt;code&gt;probabilities&lt;/code&gt;. The
 value &lt;code&gt;i&lt;/code&gt; has the probability
 &lt;code&gt;probabilities[i]&lt;/code&gt; for
 &lt;code&gt;0 &lt;= i &lt; probabilities.length&lt;/code&gt;, the
 value &lt;code&gt;probabilities.length&lt;/code&gt; has the
 remaining probability, i.e., the difference between
 the sum of &lt;code&gt;probabilities&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>probabilities array of discrete probabilities</description>
					</attribute>
					<attribute name="@return">
						<description>random number according to &lt;code&gt;probabilities&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>#setSeed(long)</description>
					</attribute>
				</comment>
				<params>
					<param name="probabilities" type="float" comment="array of discrete probabilities" fulltype="float[]" />
				</params>
			</method>
			<method name="setSeed" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>This method sets the seed for the pseudorandom number generator
 which is used by the random methods in this class. This is the
 generator obtained by {@link Operators#getRandomGenerator()}
 within the current thread.</description>
					<attribute name="@param">
						<description>seed a seed</description>
					</attribute>
				</comment>
				<params>
					<param name="seed" type="long" comment="a seed" fulltype="long" />
				</params>
			</method>
			<method name="ancestor" returncomment="nearest ancestor of type &lt;code&gt;t&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;" static="true" type="Node" visibility="public" fulltype="Node">
				<comment>
					<description>Returns the nearest ancestor of &lt;code&gt;n&lt;/code&gt; which is an instance
 of &lt;code&gt;t&lt;/code&gt;. Ancestors are those nodes which can be reached by
 traversing {@link #successor}- or {@link #branch}-edges backwards.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>t the type so search for</description>
					</attribute>
					<attribute name="@return">
						<description>nearest ancestor of type &lt;code&gt;t&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="n" type="Node" comment="a node" fulltype="Node" />
					<param name="t" type="Class" comment="the type so search for" fulltype="java.lang.Class" />
				</params>
			</method>
			<method name="minDescendants" returncomment="&lt;code&gt;null&lt;/code&gt;" static="true" type="Node" visibility="public" fulltype="Node">
				<comment>
					<description>This generator method yields all descendants of &lt;code&gt;n&lt;/code&gt;
 which are instances of &lt;code&gt;t&lt;/code&gt; and which have no
 other instance of &lt;code&gt;t&lt;/code&gt; in their path to &lt;code&gt;n&lt;/code&gt;.
 Descendants are those nodes which can be reached by
 traversing {@link #successor}- or {@link #branch}-edges forwards.</description>
					<attribute name="@param">
						<description>cb a consumer instance receiving the nodes (provided by the XL compiler)</description>
					</attribute>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>t the type to seach for</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="cb" type="&lt;any&gt;" comment="a consumer instance receiving the nodes (provided by the XL compiler)" fulltype="&lt;any&gt;" />
					<param name="n" type="Node" comment="a node" fulltype="Node" />
					<param name="t" type="Class" comment="the type to seach for" fulltype="java.lang.Class" />
				</params>
			</method>
			<method name="ancestor" returncomment="nearest ancestor fulfilling &lt;code&gt;condition&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;" static="true" type="Node" visibility="public" fulltype="Node">
				<comment>
					<description>Returns the nearest ancestor of &lt;code&gt;n&lt;/code&gt; which fulfills
 &lt;code&gt;condition&lt;/code&gt;. Ancestors are those nodes which can be reached by
 traversing {@link #successor}- or {@link #branch}-edges backwards.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>condition a condition</description>
					</attribute>
					<attribute name="@return">
						<description>nearest ancestor fulfilling &lt;code&gt;condition&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="n" type="Node" comment="a node" fulltype="Node" />
					<param name="condition" type="&lt;any&gt;" comment="a condition" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="successor" returncomment="nearest successor fulfilling &lt;code&gt;condition&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;" static="true" type="Node" visibility="public" fulltype="Node">
				<comment>
					<description>Returns the nearest successor of &lt;code&gt;n&lt;/code&gt; which fulfills
 &lt;code&gt;condition&lt;/code&gt;. Successors are those nodes which can be reached by
 traversing {@link #successor}-edges forwards.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>condition a condition</description>
					</attribute>
					<attribute name="@return">
						<description>nearest successor fulfilling &lt;code&gt;condition&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="n" type="Node" comment="a node" fulltype="Node" />
					<param name="condition" type="&lt;any&gt;" comment="a condition" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="descendants" returncomment="&lt;code&gt;null&lt;/code&gt;" static="true" type="Node" visibility="public" fulltype="Node">
				<comment>
					<description>This generator method yields all descendants of &lt;code&gt;n&lt;/code&gt;
 which are instances of &lt;code&gt;cls&lt;/code&gt;.
 Descendants are those nodes which can be reached by
 traversing {@link #successor}- or {@link #branch}-edges forwards.</description>
					<attribute name="@param">
						<description>cb a consumer instance receiving the nodes (provided by the XL compiler)</description>
					</attribute>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>cls the type to seach for</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="cb" type="&lt;any&gt;" comment="a consumer instance receiving the nodes (provided by the XL compiler)" fulltype="&lt;any&gt;" />
					<param name="n" type="Node" comment="a node" fulltype="Node" />
					<param name="cls" type="Class" comment="the type to seach for" fulltype="java.lang.Class" />
				</params>
			</method>
			<method name="filter" returncomment="a condition" static="true" type="&lt;any&gt;" visibility="public" fulltype="&lt;any&gt;">
				<comment>
					<description>Creates a condition which is fulfilled for an object
 iff it is an instance of at least one of the specified
 &lt;code&gt;classes&lt;/code&gt; (or iff it is not an instance
 in case &lt;code&gt;isTrue&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;).</description>
					<attribute name="@param">
						<description>classes list of classes</description>
					</attribute>
					<attribute name="@param">
						<description>isTrue condition value iff object is an instance of one of &lt;code&gt;classes&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>a condition</description>
					</attribute>
				</comment>
				<params>
					<param name="classes" type="Class" comment="list of classes" fulltype="java.lang.Class[]" />
					<param name="isTrue" type="boolean" comment="condition value iff object is an instance of one of &lt;code&gt;classes&lt;/code&gt;" fulltype="boolean" />
				</params>
			</method>
			<method name="transformation" returncomment="the node&apos;s global coordinate transformation" static="true" type="Matrix34d" visibility="public" fulltype="Matrix34d">
				<comment>
					<description>Computes the global coordinate transformation of the &lt;code&gt;node&lt;/code&gt;.
 The returned matrix must not be modified.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the node&apos;s global coordinate transformation</description>
					</attribute>
				</comment>
				<params>
					<param name="node" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="transformation" returncomment="the node&apos;s global coordinate transformation" static="true" type="Matrix34d" visibility="public" fulltype="Matrix34d">
				<comment>
					<description>Computes the global coordinate transformation of the &lt;code&gt;node&lt;/code&gt;.
 If &lt;code&gt;post&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the transformation of
 the &lt;code&gt;node&lt;/code&gt; itself is returned, otherwise the
 transformation of its children. These may differ if &lt;code&gt;node&lt;/code&gt;
 induces a change of coordinates.
 The returned matrix must not be modified.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@param">
						<description>post &lt;code&gt;true&lt;/code&gt; iff the post-transformation (of the
 node&apos;s children) shall be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the node&apos;s global coordinate transformation</description>
					</attribute>
				</comment>
				<params>
					<param name="node" type="Node" comment="a node" fulltype="Node" />
					<param name="post" type="boolean" comment="&lt;code&gt;true&lt;/code&gt; iff the post-transformation (of the
 node&apos;s children) shall be returned" fulltype="boolean" />
				</params>
			</method>
			<method name="location" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Computes the location of &lt;code&gt;node&lt;/code&gt; in global coordinates.
 The computed value is written to &lt;code&gt;location&lt;/code&gt;. The location
 is defined by the point (0, 0, 0) in local coordinates of the
 &lt;code&gt;node&lt;/code&gt; if &lt;code&gt;end&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;,
 or of the &lt;code&gt;node&lt;/code&gt;&apos;s children if &lt;code&gt;end&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>loc receives the location</description>
					</attribute>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@param">
						<description>end use location or end location of &lt;code&gt;node&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="loc" type="Tuple3d" comment="receives the location" fulltype="Tuple3d" />
					<param name="node" type="Node" comment="a node" fulltype="Node" />
					<param name="end" type="boolean" comment="use location or end location of &lt;code&gt;node&lt;/code&gt;" fulltype="boolean" />
				</params>
			</method>
			<method name="direction" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Computes the growth direction of the turtle
 at &lt;code&gt;node&lt;/code&gt; in global coordinates.
 The computed value is written to &lt;code&gt;direction&lt;/code&gt;. The direction
 is defined by the direction (0, 0, 1) in local coordinates of the
 &lt;code&gt;node&lt;/code&gt; if &lt;code&gt;end&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;,
 or of the &lt;code&gt;node&lt;/code&gt;&apos;s children if &lt;code&gt;end&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>dir receives the direction</description>
					</attribute>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@param">
						<description>end use location or end location of &lt;code&gt;node&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="dir" type="Tuple3d" comment="receives the direction" fulltype="Tuple3d" />
					<param name="node" type="Node" comment="a node" fulltype="Node" />
					<param name="end" type="boolean" comment="use location or end location of &lt;code&gt;node&lt;/code&gt;" fulltype="boolean" />
				</params>
			</method>
			<method name="location" returncomment="the &lt;code&gt;node&lt;/code&gt;&apos;s location in global coordinates" static="true" type="Point3d" visibility="public" fulltype="Point3d">
				<comment>
					<description>Computes the location of &lt;code&gt;node&lt;/code&gt; in global coordinates.
 The location is defined by the point (0, 0, 0) in local coordinates.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the &lt;code&gt;node&lt;/code&gt;&apos;s location in global coordinates</description>
					</attribute>
					<attribute name="@see">
						<description>#location(Tuple3d, Node, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="node" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="toPoint3d" returncomment="the &lt;code&gt;node&lt;/code&gt;&apos;s location in global coordinates" static="true" type="Point3d" visibility="public" fulltype="Point3d">
				<comment>
					<description>The same as {@link #location(Node)}. This method is designed
 as an auto-conversion method.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the &lt;code&gt;node&lt;/code&gt;&apos;s location in global coordinates</description>
					</attribute>
				</comment>
				<params>
					<param name="node" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="toTuple3d" static="true" type="Tuple3d" visibility="public" fulltype="Tuple3d">
				<params>
					<param name="node" type="Node" fulltype="Node" />
				</params>
			</method>
			<method name="direction" returncomment="the turtle&apos;s growth direction at &lt;code&gt;node&lt;/code&gt;" static="true" type="Vector3d" visibility="public" fulltype="Vector3d">
				<comment>
					<description>Computes the growth direction of the turtle
 at &lt;code&gt;node&lt;/code&gt; in global coordinates.
 The direction is defined by the direction (0, 0, 1) in local coordinates.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the turtle&apos;s growth direction at &lt;code&gt;node&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>#direction(Tuple3d, Node, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="node" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="endlocation" returncomment="the &lt;code&gt;node&lt;/code&gt;&apos;s end location in global coordinates" static="true" type="Point3d" visibility="public" fulltype="Point3d">
				<comment>
					<description>Computes the end location of &lt;code&gt;node&lt;/code&gt; in global coordinates.
 The end location is defined by the point (0, 0, 0) in local coordinates
 of &lt;code&gt;node&lt;/code&gt;&apos;s children.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the &lt;code&gt;node&lt;/code&gt;&apos;s end location in global coordinates</description>
					</attribute>
					<attribute name="@see">
						<description>#location(Tuple3d, Node, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="node" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="enddirection" returncomment="the turtle&apos;s growth direction at &lt;code&gt;node&lt;/code&gt;&apos;s
 children" static="true" type="Vector3d" visibility="public" fulltype="Vector3d">
				<comment>
					<description>Computes the growth direction of the turtle
 at the end of &lt;code&gt;node&lt;/code&gt; in global coordinates.
 The direction is defined by the direction (0, 0, 1) in
 local coordinates of &lt;code&gt;node&lt;/code&gt;&apos;s children.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the turtle&apos;s growth direction at &lt;code&gt;node&lt;/code&gt;&apos;s
 children</description>
					</attribute>
					<attribute name="@see">
						<description>#direction(Tuple3d, Node, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="node" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="angle" returncomment="the rotation angle of the transformation of &lt;code&gt;node&lt;/code&gt;,
 in degrees" static="true" type="double" visibility="public" fulltype="double">
				<comment>
					<description>Computes the rotation angle in degrees of the transformation
 defined by &lt;code&gt;node&lt;/code&gt;. The computed value will be correct
 if the transformation is a rotation, possibly combined with a uniform
 scaling.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>the rotation angle of the transformation of &lt;code&gt;node&lt;/code&gt;,
 in degrees</description>
					</attribute>
				</comment>
				<params>
					<param name="node" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="inclination" static="true" type="double" visibility="public" fulltype="double">
				<params>
					<param name="node" type="Node" fulltype="Node" />
				</params>
			</method>
			<method name="angle" static="true" type="double" visibility="public" fulltype="double">
				<params>
					<param name="a" type="Tuple3d" fulltype="Tuple3d" />
					<param name="b" type="Tuple3d" fulltype="Tuple3d" />
				</params>
			</method>
			<method name="setRandomTransform" static="true" type="void" visibility="public" fulltype="void">
				<params>
					<param name="target" type="Null" fulltype="Null" />
					<param name="center" type="Transform3D" fulltype="Transform3D" />
					<param name="sigma" type="double" fulltype="double" />
					<param name="minX" type="double" fulltype="double" />
					<param name="minY" type="double" fulltype="double" />
					<param name="maxX" type="double" fulltype="double" />
					<param name="maxY" type="double" fulltype="double" />
				</params>
			</method>
			<method name="distanceSquared" returncomment="squared distance between a and b" static="true" type="double" visibility="public" fulltype="double">
				<comment>
					<description>Calculate squared distance between node a an node b.</description>
					<attribute name="@param">
						<description>a node a</description>
					</attribute>
					<attribute name="@param">
						<description>b node b</description>
					</attribute>
					<attribute name="@return">
						<description>squared distance between a and b</description>
					</attribute>
				</comment>
				<params>
					<param name="a" type="Node" comment="node a" fulltype="Node" />
					<param name="b" type="Node" comment="node b" fulltype="Node" />
				</params>
			</method>
			<method name="distance" returncomment="global distance between nodes" static="true" type="double" visibility="public" fulltype="double">
				<comment>
					<description>Computes the global distance between two nodes. The distance is
 measured between the points (0, 0, 0) in the local coordinate
 systems of the nodes.</description>
					<attribute name="@param">
						<description>a first node</description>
					</attribute>
					<attribute name="@param">
						<description>b second node</description>
					</attribute>
					<attribute name="@return">
						<description>global distance between nodes</description>
					</attribute>
				</comment>
				<params>
					<param name="a" type="Node" comment="first node" fulltype="Node" />
					<param name="b" type="Node" comment="second node" fulltype="Node" />
				</params>
			</method>
			<method name="cone" returncomment="instance of &lt;code&gt;Cone&lt;/code&gt; corresponding to the specified geometry" static="true" type="Cone" visibility="public" fulltype="Cone">
				<comment>
					<description>Returns a cone whose tip is located at &lt;code&gt;origin&lt;/code&gt;,
 whose central axis has &lt;code&gt;direction&lt;/code&gt; as direction,
 and whose half opening angle is &lt;code&gt;angle&lt;/code&gt; (in degrees).
 The cone has no base plane, i.e., it extends to infinity.</description>
					<attribute name="@param">
						<description>origin location of the cone&apos;s tip</description>
					</attribute>
					<attribute name="@param">
						<description>direction direction of the cone&apos;s axis</description>
					</attribute>
					<attribute name="@param">
						<description>angle half opening angle in degrees</description>
					</attribute>
					<attribute name="@return">
						<description>instance of &lt;code&gt;Cone&lt;/code&gt; corresponding to the specified geometry</description>
					</attribute>
				</comment>
				<params>
					<param name="origin" type="Tuple3d" comment="location of the cone&apos;s tip" fulltype="Tuple3d" />
					<param name="direction" type="Vector3d" comment="direction of the cone&apos;s axis" fulltype="Vector3d" />
					<param name="angle" type="double" comment="half opening angle in degrees" fulltype="double" />
				</params>
			</method>
			<method name="cone" returncomment="instance of &lt;code&gt;Cone&lt;/code&gt; corresponding to the specified geometry" static="true" type="Cone" visibility="public" fulltype="Cone">
				<comment>
					<description>Returns a cone whose tip is defined by the location
 of &lt;code&gt;node&lt;/code&gt;. Depending on &lt;code&gt;end&lt;/code&gt;, the location
 or end location of &lt;code&gt;node&lt;/code&gt; is used
 (see {@link #location(Tuple3d, Node, boolean)}).
 The axis of the cone points into the local z-direction
 of the coordinate system of &lt;code&gt;node&lt;/code&gt;
 or &lt;code&gt;node&lt;/code&gt;&apos;s children (again depending on &lt;code&gt;end&lt;/code&gt;).
 The cone has no base plane, i.e., it extends to infinity.</description>
					<attribute name="@param">
						<description>node node which defines the cone&apos;s tip</description>
					</attribute>
					<attribute name="@param">
						<description>end use location or end location of &lt;code&gt;node&lt;/code&gt;</description>
					</attribute>
					<attribute name="@param">
						<description>angle half opening angle in degrees</description>
					</attribute>
					<attribute name="@return">
						<description>instance of &lt;code&gt;Cone&lt;/code&gt; corresponding to the specified geometry</description>
					</attribute>
				</comment>
				<params>
					<param name="node" type="Node" comment="node which defines the cone&apos;s tip" fulltype="Node" />
					<param name="end" type="boolean" comment="use location or end location of &lt;code&gt;node&lt;/code&gt;" fulltype="boolean" />
					<param name="angle" type="double" comment="half opening angle in degrees" fulltype="double" />
				</params>
			</method>
			<method name="ray" returncomment="new ray" static="true" type="Line" visibility="public" fulltype="Line">
				<comment>
					<description>Constructs a &lt;code&gt;Line&lt;/code&gt; which represents a ray emanating at
 &lt;code&gt;origin&lt;/code&gt; in the specified &lt;code&gt;direction&lt;/code&gt;. The
 &lt;code&gt;start&lt;/code&gt; parameter of the line is set to 0, the
 &lt;code&gt;end&lt;/code&gt; parameter is set to infinity.</description>
					<attribute name="@param">
						<description>origin origin of the ray</description>
					</attribute>
					<attribute name="@param">
						<description>direction direction of the ray</description>
					</attribute>
					<attribute name="@return">
						<description>new ray</description>
					</attribute>
				</comment>
				<params>
					<param name="origin" type="Tuple3d" comment="origin of the ray" fulltype="Tuple3d" />
					<param name="direction" type="Tuple3d" comment="direction of the ray" fulltype="Tuple3d" />
				</params>
			</method>
			<method name="intersect" returncomment="list containing all intersections of the line
 and the volume&apos;s surface" static="true" type="IntersectionList" visibility="public" fulltype="IntersectionList">
				<comment>
					<description>Compute all intersections between &lt;code&gt;line&lt;/code&gt; and the surface
 of &lt;code&gt;volume&lt;/code&gt;. The returned list is valid until the next
 invocation of this method within the same thread.</description>
					<attribute name="@param">
						<description>line a line</description>
					</attribute>
					<attribute name="@param">
						<description>volume a volume</description>
					</attribute>
					<attribute name="@return">
						<description>list containing all intersections of the line
 and the volume&apos;s surface</description>
					</attribute>
				</comment>
				<params>
					<param name="line" type="Line" comment="a line" fulltype="Line" />
					<param name="volume" type="Volume" comment="a volume" fulltype="Volume" />
				</params>
			</method>
			<method name="operator$and" returncomment="list containing all intersections of the line
 and the volume&apos;s surface" static="true" type="IntersectionList" visibility="public" fulltype="IntersectionList">
				<comment>
					<description>This operator method is an alias for {@link #intersect}.</description>
					<attribute name="@param">
						<description>line a line</description>
					</attribute>
					<attribute name="@param">
						<description>volume a volume</description>
					</attribute>
					<attribute name="@return">
						<description>list containing all intersections of the line
 and the volume&apos;s surface</description>
					</attribute>
				</comment>
				<params>
					<param name="line" type="Line" comment="a line" fulltype="Line" />
					<param name="volume" type="Volume" comment="a volume" fulltype="Volume" />
				</params>
			</method>
			<method name="toPoint3d" returncomment="first intersection point, or &lt;code&gt;null&lt;/code&gt;" static="true" type="Point3d" visibility="public" fulltype="Point3d">
				<comment>
					<description>This autoconversion method returns the first intersection point of
 &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is empty.
 The returned point may be modified.</description>
					<attribute name="@param">
						<description>list list of previously computed intersections</description>
					</attribute>
					<attribute name="@return">
						<description>first intersection point, or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="IntersectionList" comment="list of previously computed intersections" fulltype="IntersectionList" />
				</params>
			</method>
			<method name="height" returncomment="height of &lt;code&gt;volume&lt;/code&gt; at &lt;code&gt;(x, y)&lt;/code&gt;, or 0" static="true" type="double" visibility="public" fulltype="double">
				<comment>
					<description>This method returns the height of a volume at a point &lt;code&gt;(x, y)&lt;/code&gt;
 (in global coordinates). This is the maximum z-coordinate of the volume
 at &lt;code&gt;(x, y)&lt;/code&gt;. If the volume does not contain a point with
 matching xy-coordinates, 0 is returned.</description>
					<attribute name="@param">
						<description>volume a volume</description>
					</attribute>
					<attribute name="@param">
						<description>x global x-coordinate</description>
					</attribute>
					<attribute name="@param">
						<description>y global y-coordinate</description>
					</attribute>
					<attribute name="@return">
						<description>height of &lt;code&gt;volume&lt;/code&gt; at &lt;code&gt;(x, y)&lt;/code&gt;, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="volume" type="Volume" comment="a volume" fulltype="Volume" />
					<param name="x" type="double" comment="global x-coordinate" fulltype="double" />
					<param name="y" type="double" comment="global y-coordinate" fulltype="double" />
				</params>
			</method>
			<method name="toLine" returncomment="central line of the node" static="true" type="Line" visibility="public" fulltype="Line">
				<comment>
					<description>Returns a line which corresponds to the central line of &lt;code&gt;node&lt;/code&gt;.
 The central line starts at the {@link #location(Node)} of the node
 and extends to the {@link #endlocation(Node)} of the node.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>central line of the node</description>
					</attribute>
				</comment>
				<params>
					<param name="node" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="volume" returncomment="volume corresponding the &lt;code&gt;node&lt;/code&gt;&apos;s shape" static="true" type="Volume" visibility="public" fulltype="Volume">
				<comment>
					<description>Returns a volume which corresponds to the shape of
 &lt;code&gt;node&lt;/code&gt;. If &lt;code&gt;node&lt;/code&gt; has no shape, an empty
 volume is returned.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@return">
						<description>volume corresponding the &lt;code&gt;node&lt;/code&gt;&apos;s shape</description>
					</attribute>
				</comment>
				<params>
					<param name="node" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="distanceToLine" returncomment="distance between &lt;code&gt;point&lt;/code&gt; and &lt;code&gt;line&lt;/code&gt;" static="true" type="double" visibility="public" fulltype="double">
				<comment>
					<description>Returns the distance between &lt;code&gt;point&lt;/code&gt; and
 &lt;code&gt;line&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>point a point</description>
					</attribute>
					<attribute name="@param">
						<description>line a line</description>
					</attribute>
					<attribute name="@return">
						<description>distance between &lt;code&gt;point&lt;/code&gt; and &lt;code&gt;line&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>Line#distance(Tuple3d)</description>
					</attribute>
				</comment>
				<params>
					<param name="point" type="Tuple3d" comment="a point" fulltype="Tuple3d" />
					<param name="line" type="Line" comment="a line" fulltype="Line" />
				</params>
			</method>
			<method name="intersectionLength" returncomment="fraction of &lt;code&gt;line&lt;/code&gt; which intersects &lt;code&gt;cone&lt;/code&gt;" static="true" type="double" visibility="public" fulltype="double">
				<comment>
					<description>Determines the fraction of the &lt;code&gt;line&lt;/code&gt; which
 intersects the specified &lt;code&gt;cone&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>line line to intersect</description>
					</attribute>
					<attribute name="@param">
						<description>cone cone to intersect</description>
					</attribute>
					<attribute name="@return">
						<description>fraction of &lt;code&gt;line&lt;/code&gt; which intersects &lt;code&gt;cone&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="line" type="Line" comment="line to intersect" fulltype="Line" />
					<param name="cone" type="Cone" comment="cone to intersect" fulltype="Cone" />
				</params>
			</method>
			<method name="directionalTropism" returncomment="&lt;code&gt;true&lt;/code&gt; iff a rotation matrix has been computed" static="true" type="boolean" visibility="public" fulltype="boolean">
				<comment>
					<description>Computes the rotation matrix which implements a directional
 tropism towards a &lt;code&gt;direction&lt;/code&gt;. This is done as follows:
 The matrix &lt;code&gt;m&lt;/code&gt; is interpreted as the transformation
 matrix from local to global coordinates. Thus, the local z-direction
 (the growth direction) has the value
 &lt;code&gt;v = (m.m02, m.m12, m.m22)&lt;/code&gt;
 in global coordinates. Now the cross product
 &lt;code&gt;d = v&lt;sup&gt;0&lt;/sup&gt; &amp;#215; direction&lt;/code&gt;,
 where &lt;code&gt;v&lt;sup&gt;0&lt;/sup&gt;&lt;/code&gt; is the unit vector in direction of
 &lt;code&gt;v&lt;/code&gt;, defines the axis about which
 a rotation has to be performed in order to achieve the desired tropism. This
 direction is transformed to the local coordinates of &lt;code&gt;m&lt;/code&gt;,
 and &lt;code&gt;out&lt;/code&gt; is set to a rotation about this
 transformed direction, its angle being the length
 of &lt;code&gt;d&lt;/code&gt; multiplied by &lt;code&gt;e&lt;/code&gt; (in radians). 
 &lt;br&gt;
 If the absolute value of the angle is less than &lt;code&gt;1e-10&lt;/code&gt;,
 no rotation matrix is computed and this method returns
 &lt;code&gt;false&lt;/code&gt;. Then &lt;code&gt;out&lt;/code&gt; does not
 contain a valid rotation matrix and should be ignored.
 This case happens when the growth direction 
 is (anti-)parallel to the desired &lt;code&gt;direction&lt;/code&gt;
 of the tropism.</description>
					<attribute name="@param">
						<description>m transformation matrix from local to global coordinates</description>
					</attribute>
					<attribute name="@param">
						<description>direction direction of the tropism in global coordinates</description>
					</attribute>
					<attribute name="@param">
						<description>e strength of the tropism</description>
					</attribute>
					<attribute name="@param">
						<description>out the computed rotation matrix is placed in here (only
 valid if the returned value is &lt;code&gt;true&lt;/code&gt;)</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; iff a rotation matrix has been computed</description>
					</attribute>
				</comment>
				<params>
					<param name="m" type="Matrix34d" comment="transformation matrix from local to global coordinates" fulltype="Matrix34d" />
					<param name="direction" type="Tuple3d" comment="direction of the tropism in global coordinates" fulltype="Tuple3d" />
					<param name="e" type="float" comment="strength of the tropism" fulltype="float" />
					<param name="out" type="Matrix4d" comment="the computed rotation matrix is placed in here (only
 valid if the returned value is &lt;code&gt;true&lt;/code&gt;)" fulltype="Matrix4d" />
				</params>
			</method>
			<method name="positionalTropism" returncomment="&lt;code&gt;true&lt;/code&gt; iff a rotation matrix has been computed" static="true" type="boolean" visibility="public" fulltype="boolean">
				<comment>
					<description>Computes the rotation matrix which implements a positional
 tropism towards a &lt;code&gt;target&lt;/code&gt; location. For the
 details of computation, see {@link #directionalTropism},
 where the &lt;code&gt;direction&lt;/code&gt; argument is the normalized
 direction vector from the origin of the local coordinate system
 &lt;code&gt;(m.m03, m.m13, m.m23)&lt;/code&gt; to &lt;code&gt;target&lt;/code&gt;.
 &lt;br&gt;
 If, for mathematical reasons, no rotation matrix can be computed
 or if no rotation is needed because the local growth direction
 already points to &lt;code&gt;target&lt;/code&gt;, this method returns
 &lt;code&gt;false&lt;/code&gt;. In this case, &lt;code&gt;out&lt;/code&gt; does not
 contain a valid rotation matrix and should be ignored.</description>
					<attribute name="@param">
						<description>m transformation matrix from local to global coordinates</description>
					</attribute>
					<attribute name="@param">
						<description>target target location of the tropism in global coordinates</description>
					</attribute>
					<attribute name="@param">
						<description>e strength of the tropism</description>
					</attribute>
					<attribute name="@param">
						<description>out the computed rotation matrix is placed in here (only
 valid if the returned value is &lt;code&gt;true&lt;/code&gt;)</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; iff a rotation matrix has been computed</description>
					</attribute>
				</comment>
				<params>
					<param name="m" type="Matrix34d" comment="transformation matrix from local to global coordinates" fulltype="Matrix34d" />
					<param name="target" type="Tuple3d" comment="target location of the tropism in global coordinates" fulltype="Tuple3d" />
					<param name="e" type="float" comment="strength of the tropism" fulltype="float" />
					<param name="out" type="Matrix4d" comment="the computed rotation matrix is placed in here (only
 valid if the returned value is &lt;code&gt;true&lt;/code&gt;)" fulltype="Matrix4d" />
				</params>
			</method>
			<method name="orthogonalTropism" returncomment="&lt;code&gt;true&lt;/code&gt; iff a rotation matrix has been computed" static="true" type="boolean" visibility="public" fulltype="boolean">
				<comment>
					<description>Computes the rotation matrix which implements an orthogonal
 tropism into a plane perpendicular to &lt;code&gt;direction&lt;/code&gt;. This is done as follows:
 The matrix &lt;code&gt;m&lt;/code&gt; is interpreted as the transformation
 matrix from local to global coordinates. Thus, the local z-direction
 (the growth direction) has the value
 &lt;code&gt;v = (m.m02, m.m12, m.m22)&lt;/code&gt;
 in global coordinates. Now the cross product
 &lt;code&gt;d = v&lt;sup&gt;0&lt;/sup&gt; &amp;#215; direction&lt;/code&gt;,
 where &lt;code&gt;v&lt;sup&gt;0&lt;/sup&gt;&lt;/code&gt; is the unit vector in direction of
 &lt;code&gt;v&lt;/code&gt;, defines the axis about which
 a rotation has to be performed in order to achieve the desired tropism. This
 direction is transformed to the local coordinates of &lt;code&gt;m&lt;/code&gt;,
 and &lt;code&gt;out&lt;/code&gt; is set to a rotation about this
 transformed direction, its angle being the negated value
 of the scalar product &lt;code&gt;v&lt;sup&gt;0&lt;/sup&gt; &amp;#183; direction&lt;/code&gt;
 multiplied by &lt;code&gt;e&lt;/code&gt; (in radians). 
 &lt;br&gt;
 If the absolute value of the angle is less than &lt;code&gt;1e-10&lt;/code&gt;,
 no rotation matrix is computed and this method returns
 &lt;code&gt;false&lt;/code&gt;. Then &lt;code&gt;out&lt;/code&gt; does not
 contain a valid rotation matrix and should be ignored.
 This case happens when the growth direction 
 is (anti-)parallel to the desired &lt;code&gt;direction&lt;/code&gt;
 of the tropism.</description>
					<attribute name="@param">
						<description>m transformation matrix from local to global coordinates</description>
					</attribute>
					<attribute name="@param">
						<description>direction direction of the tropism in global coordinates</description>
					</attribute>
					<attribute name="@param">
						<description>e strength of the tropism</description>
					</attribute>
					<attribute name="@param">
						<description>out the computed rotation matrix is placed in here (only
 valid if the returned value is &lt;code&gt;true&lt;/code&gt;)</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; iff a rotation matrix has been computed</description>
					</attribute>
				</comment>
				<params>
					<param name="m" type="Matrix34d" comment="transformation matrix from local to global coordinates" fulltype="Matrix34d" />
					<param name="direction" type="Tuple3d" comment="direction of the tropism in global coordinates" fulltype="Tuple3d" />
					<param name="e" type="float" comment="strength of the tropism" fulltype="float" />
					<param name="out" type="Matrix4d" comment="the computed rotation matrix is placed in here (only
 valid if the returned value is &lt;code&gt;true&lt;/code&gt;)" fulltype="Matrix4d" />
				</params>
			</method>
			<method name="tropism" returncomment="a node with a transformation set to the requested tropism" static="true" type="Null" visibility="public" fulltype="Null">
				<comment>
					<description>Return a new node with a transformation matrix set to the desired tropism.</description>
					<attribute name="@param">
						<description>a node containing original orientation</description>
					</attribute>
					<attribute name="@param">
						<description>direction target direction towards the tropism should orient to</description>
					</attribute>
					<attribute name="@param">
						<description>e strength of the tropism</description>
					</attribute>
					<attribute name="@return">
						<description>a node with a transformation set to the requested tropism</description>
					</attribute>
					<attribute name="@see">
						<description>#directionalTropism</description>
					</attribute>
				</comment>
				<params>
					<param name="a" type="Node" comment="node containing original orientation" fulltype="Node" />
					<param name="direction" type="Vector3d" comment="target direction towards the tropism should orient to" fulltype="Vector3d" />
					<param name="e" type="float" comment="strength of the tropism" fulltype="float" />
				</params>
			</method>
			<method name="tropism" returncomment="a node with a transformation set to the requested tropism" static="true" type="Null" visibility="public" fulltype="Null">
				<comment>
					<description>Return a new node with a transformation matrix set to the desired tropism.</description>
					<attribute name="@param">
						<description>a node containing original orientation</description>
					</attribute>
					<attribute name="@param">
						<description>target target location towards the tropism should orient to</description>
					</attribute>
					<attribute name="@param">
						<description>e strength of the tropism</description>
					</attribute>
					<attribute name="@return">
						<description>a node with a transformation set to the requested tropism</description>
					</attribute>
					<attribute name="@see">
						<description>#positionalTropism</description>
					</attribute>
				</comment>
				<params>
					<param name="a" type="Node" comment="node containing original orientation" fulltype="Node" />
					<param name="target" type="Point3d" comment="target location towards the tropism should orient to" fulltype="Point3d" />
					<param name="e" type="float" comment="strength of the tropism" fulltype="float" />
				</params>
			</method>
			<method name="cloneSubgraph" returncomment="corresponding root node of cloned subgraph" static="true" type="Node" visibility="public" fulltype="Node">
				<comment>
					<description>This method clones the subgraph starting at &lt;code&gt;root&lt;/code&gt;
 and returns the cloned node which corresponds to &lt;code&gt;root&lt;/code&gt;.
 The subgraph consists of all nodes which can be reached
 by traversing edges in forward direction. Nodes are cloned
 deeply, i.e., field values are cloned, too.</description>
					<attribute name="@param">
						<description>root root node of subgraph</description>
					</attribute>
					<attribute name="@return">
						<description>corresponding root node of cloned subgraph</description>
					</attribute>
					<attribute name="@throws">
						<description>CloneNotSupportedException</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Node" comment="root node of subgraph" fulltype="Node" />
				</params>
				<exceptions>
					<exception type="CloneNotSupportedException" comment="" fulltype="java.lang.CloneNotSupportedException" />
				</exceptions>
			</method>
			<method name="cloneNode" static="true" type="Node" visibility="public" fulltype="Node">
				<params>
					<param name="node" type="Node" fulltype="Node" />
				</params>
				<exceptions>
					<exception type="CloneNotSupportedException" fulltype="java.lang.CloneNotSupportedException" />
				</exceptions>
			</method>
			<method name="booleanValue" returncomment="wrapped &lt;code&gt;boolean&lt;/code&gt; value, or false" static="true" type="boolean" visibility="public" fulltype="boolean">
				<comment>
					<description>Returns the &lt;code&gt;boolean&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link BooleanNode}. Otherwise this method returns
 false.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;boolean&lt;/code&gt; value, or false</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="byteValue" returncomment="wrapped &lt;code&gt;byte&lt;/code&gt; value, or 0" static="true" type="byte" visibility="public" fulltype="byte">
				<comment>
					<description>Returns the &lt;code&gt;byte&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link ByteNode}. Otherwise this method returns
 0.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;byte&lt;/code&gt; value, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="shortValue" returncomment="wrapped &lt;code&gt;short&lt;/code&gt; value, or 0" static="true" type="short" visibility="public" fulltype="short">
				<comment>
					<description>Returns the &lt;code&gt;short&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link ShortNode}. Otherwise this method returns
 0.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;short&lt;/code&gt; value, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="charValue" returncomment="wrapped &lt;code&gt;char&lt;/code&gt; value, or 0" static="true" type="char" visibility="public" fulltype="char">
				<comment>
					<description>Returns the &lt;code&gt;char&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link CharNode}. Otherwise this method returns
 0.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;char&lt;/code&gt; value, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="intValue" returncomment="wrapped &lt;code&gt;int&lt;/code&gt; value, or 0" static="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>Returns the &lt;code&gt;int&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link IntNode}. Otherwise this method returns
 0.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;int&lt;/code&gt; value, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="longValue" returncomment="wrapped &lt;code&gt;long&lt;/code&gt; value, or 0" static="true" type="long" visibility="public" fulltype="long">
				<comment>
					<description>Returns the &lt;code&gt;long&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link LongNode}. Otherwise this method returns
 0.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;long&lt;/code&gt; value, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="floatValue" returncomment="wrapped &lt;code&gt;float&lt;/code&gt; value, or 0" static="true" type="float" visibility="public" fulltype="float">
				<comment>
					<description>Returns the &lt;code&gt;float&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link FloatNode}. Otherwise this method returns
 0.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;float&lt;/code&gt; value, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="doubleValue" returncomment="wrapped &lt;code&gt;double&lt;/code&gt; value, or 0" static="true" type="double" visibility="public" fulltype="double">
				<comment>
					<description>Returns the &lt;code&gt;double&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link DoubleNode}. Otherwise this method returns
 0.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;double&lt;/code&gt; value, or 0</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="objectValue" returncomment="wrapped &lt;code&gt;Object&lt;/code&gt; value, or null" static="true" type="Object" visibility="public" fulltype="java.lang.Object">
				<comment>
					<description>Returns the &lt;code&gt;Object&lt;/code&gt; value which is wrapped
 in &lt;code&gt;w&lt;/code&gt; if &lt;code&gt;w&lt;/code&gt; is an instance of
 {@link ObjectNode}, {@link NURBSCurve} (a
 &lt;code&gt;NURBSCurve&lt;/code&gt; node wraps its
 contained {@link de.grogra.math.BSplineCurve})
 or {@link NURBSSurface} (a
 &lt;code&gt;NURBSSurface&lt;/code&gt; node wraps its
 contained {@link de.grogra.math.BSplineSurface}).
 Otherwise this method returns null.</description>
					<attribute name="@param">
						<description>w a node</description>
					</attribute>
					<attribute name="@return">
						<description>wrapped &lt;code&gt;Object&lt;/code&gt; value, or null</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="isSelected" returncomment="&lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;n&lt;/code&gt; is contained
 in the current selection" static="true" type="boolean" visibility="public" fulltype="boolean">
				<comment>
					<description>Determines if &lt;code&gt;n&lt;/code&gt; has been selected in the
 workbench by the user.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;n&lt;/code&gt; is contained
 in the current selection</description>
					</attribute>
				</comment>
				<params>
					<param name="n" type="Node" comment="a node" fulltype="Node" />
				</params>
			</method>
			<method name="function" returncomment="&lt;code&gt;FunctionRef&lt;/code&gt; referring to the named function" static="true" type="FunctionRef" visibility="public" fulltype="FunctionRef">
				<comment>
					<description>Returns a &lt;code&gt;Function&lt;/code&gt; instance which refers
 to the function named &lt;code&gt;name&lt;/code&gt;. The list of functions
 in GroIMP is available in the panel
 &quot;Object Explorers/Math Objects/Functions&quot;.</description>
					<attribute name="@param">
						<description>name name of function within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;FunctionRef&lt;/code&gt; referring to the named function</description>
					</attribute>
				</comment>
				<params>
					<param name="name" type="String" comment="name of function within GroIMP" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="curve" returncomment="&lt;code&gt;CurveRef&lt;/code&gt; referring to the named curve" static="true" type="CurveRef" visibility="public" fulltype="CurveRef">
				<comment>
					<description>Returns a &lt;code&gt;CurveRef&lt;/code&gt; instance which refers
 to the curve named &lt;code&gt;name&lt;/code&gt;. The list of curves
 in GroIMP is available in the panel
 &quot;Object Explorers/Math Objects/Curves&quot;.</description>
					<attribute name="@param">
						<description>name name of curve within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;CurveRef&lt;/code&gt; referring to the named curve</description>
					</attribute>
				</comment>
				<params>
					<param name="name" type="String" comment="name of curve within GroIMP" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="surface" returncomment="&lt;code&gt;SurfaceRef&lt;/code&gt; referring to the named surface" static="true" type="SurfaceRef" visibility="public" fulltype="SurfaceRef">
				<comment>
					<description>Returns a &lt;code&gt;SurfaceRef&lt;/code&gt; instance which refers
 to the surface named &lt;code&gt;name&lt;/code&gt;. The list of surfaces
 in GroIMP is available in the panel
 &quot;Object Explorers/Math Objects/Surfaces&quot;.</description>
					<attribute name="@param">
						<description>name name of surface within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;SurfaceRef&lt;/code&gt; referring to the named surface</description>
					</attribute>
				</comment>
				<params>
					<param name="name" type="String" comment="name of surface within GroIMP" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="dataset" returncomment="&lt;code&gt;DatasetRef&lt;/code&gt; referring to the named dataset" static="true" type="DatasetRef" visibility="public" fulltype="DatasetRef">
				<comment>
					<description>Returns a &lt;code&gt;DatasetRef&lt;/code&gt; instance which refers
 to the dataset named &lt;code&gt;name&lt;/code&gt;. The list of datasets
 in GroIMP is available in the panel
 &quot;Object Explorers/Datasets&quot;.</description>
					<attribute name="@param">
						<description>name name of dataset within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;DatasetRef&lt;/code&gt; referring to the named dataset</description>
					</attribute>
				</comment>
				<params>
					<param name="name" type="String" comment="name of dataset within GroIMP" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="shader" returncomment="&lt;code&gt;ShaderRef&lt;/code&gt; referring to the named shader" static="true" type="ShaderRef" visibility="public" fulltype="ShaderRef">
				<comment>
					<description>Returns a &lt;code&gt;ShaderRef&lt;/code&gt; instance which refers
 to the shader named &lt;code&gt;name&lt;/code&gt;. The list of shaders
 in GroIMP is available in the panel
 &quot;Object Explorers/3D/Shaders&quot;.</description>
					<attribute name="@param">
						<description>name name of shader within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;ShaderRef&lt;/code&gt; referring to the named shader</description>
					</attribute>
				</comment>
				<params>
					<param name="name" type="String" comment="name of shader within GroIMP" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="image" returncomment="&lt;code&gt;ImageRef&lt;/code&gt; referring to the named image" static="true" type="ImageRef" visibility="public" fulltype="ImageRef">
				<comment>
					<description>Returns an &lt;code&gt;ImageRef&lt;/code&gt; instance which refers
 to the image named &lt;code&gt;name&lt;/code&gt;. The list of images
 in GroIMP is available in the panel
 &quot;Object Explorers/Images&quot;.</description>
					<attribute name="@param">
						<description>name name of image within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;ImageRef&lt;/code&gt; referring to the named image</description>
					</attribute>
				</comment>
				<params>
					<param name="name" type="String" comment="name of image within GroIMP" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="material" static="true" type="MaterialRef" visibility="public" fulltype="MaterialRef">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="name" type="String" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="file" returncomment="&lt;code&gt;FileRef&lt;/code&gt; referring to the named file" static="true" type="FileRef" visibility="public" fulltype="FileRef">
				<comment>
					<description>Returns a &lt;code&gt;FileRef&lt;/code&gt; instance which refers
 to the file named &lt;code&gt;name&lt;/code&gt;. The list of files
 in GroIMP is available in the panel
 &quot;File Explorer&quot;.
 &lt;br&gt;
 If &lt;code&gt;name&lt;/code&gt; does not contain the character &apos;/&apos;
 or the character {@link IO#SYSTEM_ID_SEPARATOR},
 &lt;code&gt;name&lt;/code&gt; is prefixed by
 {@link IO#PROJECT_FS} followed by {@link IO#SYSTEM_ID_SEPARATOR}.
 Thus, in this case &lt;code&gt;name&lt;/code&gt; is assumed to refer
 to a file in the virtual file system of the
 project.</description>
					<attribute name="@param">
						<description>name name of file within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;FileRef&lt;/code&gt; referring to the named file</description>
					</attribute>
				</comment>
				<params>
					<param name="name" type="String" comment="name of file within GroIMP" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="reference" returncomment="&lt;code&gt;Reference&lt;/code&gt; referring to the named object" static="true" type="Reference" visibility="public" fulltype="Reference">
				<comment>
					<description>Returns a &lt;code&gt;Reference&lt;/code&gt; instance which refers
 to the object named &lt;code&gt;name&lt;/code&gt;. The list of objects
 in GroIMP is available in the panel
 &quot;Object Explorers/Objects&quot;.</description>
					<attribute name="@param">
						<description>name name of object within GroIMP</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;Reference&lt;/code&gt; referring to the named object</description>
					</attribute>
				</comment>
				<params>
					<param name="name" type="String" comment="name of object within GroIMP" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="makeRenderedImage" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Creates a rendered image of the actual scene with the 
 default camera position and a fixed image size of 800x600.</description>
					<attribute name="@param">
						<description>fileName name of the output file</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" type="String" comment="name of the output file" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="makeRenderedImage" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Creates a rendered image of the actual scene with the 
 default camera position and a variable image size.</description>
					<attribute name="@param">
						<description>fileName name of the output file</description>
					</attribute>
					<attribute name="@param">
						<description>width</description>
					</attribute>
					<attribute name="@param">
						<description>height</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" type="String" comment="name of the output file" fulltype="java.lang.String" />
					<param name="width" type="int" comment="" fulltype="int" />
					<param name="height" type="int" comment="" fulltype="int" />
				</params>
			</method>
			<method name="makeRenderedImage" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Creates a rendered image of the actual scene with the
 specified camera and a variable image size.
 The camera needs to be specified at the &quot;Camera Panel&quot; and the name is used to identify it.</description>
					<attribute name="@param">
						<description>fileName name of the output file</description>
					</attribute>
					<attribute name="@param">
						<description>cameraName name of a specific camera</description>
					</attribute>
					<attribute name="@param">
						<description>width</description>
					</attribute>
					<attribute name="@param">
						<description>height</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" type="String" comment="name of the output file" fulltype="java.lang.String" />
					<param name="cameraName" type="String" comment="name of a specific camera" fulltype="java.lang.String" />
					<param name="width" type="int" comment="" fulltype="int" />
					<param name="height" type="int" comment="" fulltype="int" />
				</params>
			</method>
			<method name="makeRenderedImage" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Creates a rendered image of the actual scene with the
 specified camera and a variable image size.</description>
					<attribute name="@param">
						<description>fileName name of the output file</description>
					</attribute>
					<attribute name="@param">
						<description>specific camera</description>
					</attribute>
					<attribute name="@param">
						<description>width</description>
					</attribute>
					<attribute name="@param">
						<description>height</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" type="String" comment="name of the output file" fulltype="java.lang.String" />
					<param name="camera" type="Camera" fulltype="Camera" />
					<param name="width" type="int" comment="" fulltype="int" />
					<param name="height" type="int" comment="" fulltype="int" />
				</params>
			</method>
			<method name="makeSnapshot" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Creates a snapshot of the actual scene.</description>
					<attribute name="@param">
						<description>fileName name of the output file</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" type="String" comment="name of the output file" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="export3DScene" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Exports the current 3D scene to the specified target file and format.

 Currently supported formats of target files:
  - dxf
  - x3d
  - mtg</description>
					<attribute name="@param">
						<description>fileName name of the output file</description>
					</attribute>
					<attribute name="@param">
						<description>format target file format</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" type="String" comment="name of the output file" fulltype="java.lang.String" />
					<param name="format" type="String" comment="target file format" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="export3DScene" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Exports the current 3D scene to the specified target file and format.

 Currently supported formats of target files:
  - dxf
  - x3d
  - mtg</description>
					<attribute name="@param">
						<description>file output file</description>
					</attribute>
					<attribute name="@param">
						<description>format target file format</description>
					</attribute>
				</comment>
				<params>
					<param name="file" type="File" comment="output file" fulltype="java.io.File" />
					<param name="format" type="String" comment="target file format" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="exportGraphToFile" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Writes the current graph to a file.</description>
					<attribute name="@param">
						<description>fileName name of the output file</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" type="String" comment="name of the output file" fulltype="java.lang.String" />
				</params>
			</method>
			<method name="leaf" returncomment="green rectangle" static="true" type="Parallelogram" visibility="public" fulltype="Parallelogram">
				<comment>
					<description>Returns a new, rectangular instance of
 &lt;code&gt;Parallelogram&lt;/code&gt;
 created by the constructor invocation
 &lt;code&gt;Parallelogram(length, width)&lt;/code&gt; and having
 {@link RGBAShader#GREEN} as its shader.</description>
					<attribute name="@param">
						<description>length length of rectangle</description>
					</attribute>
					<attribute name="@param">
						<description>width width of rectangle</description>
					</attribute>
					<attribute name="@return">
						<description>green rectangle</description>
					</attribute>
				</comment>
				<params>
					<param name="length" type="float" comment="length of rectangle" fulltype="float" />
					<param name="width" type="float" comment="width of rectangle" fulltype="float" />
				</params>
			</method>
			<method name="Surface" static="true" type="NURBSSurface" visibility="public" fulltype="NURBSSurface">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="surface" type="BSplineSurface" fulltype="BSplineSurface" />
				</params>
			</method>
			<method name="Surface" static="true" type="NURBSSurface" visibility="public" fulltype="NURBSSurface">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="profile" type="BSplineCurve" fulltype="BSplineCurve" />
				</params>
			</method>
			<method name="Surface" static="true" type="NURBSSurface" visibility="public" fulltype="NURBSSurface">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="radius" type="float" fulltype="float" />
				</params>
			</method>
			<method name="Surface" static="true" type="NURBSSurface" visibility="public" fulltype="NURBSSurface">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="type" type="byte" fulltype="byte" />
				</params>
			</method>
			<method name="Surface" static="true" type="NURBSSurface" visibility="public" fulltype="NURBSSurface">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="profiles" type="BSplineCurveList" fulltype="BSplineCurveList" />
				</params>
			</method>
			<method name="Surface" static="true" type="NURBSSurface" visibility="public" fulltype="NURBSSurface">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="profile" type="BSplineCurve" fulltype="BSplineCurve" />
					<param name="name" type="String" fulltype="java.lang.String" />
					<param name="useRail" type="boolean" fulltype="boolean" />
				</params>
			</method>
			<method name="Surface" static="true" type="NURBSSurface" visibility="public" fulltype="NURBSSurface">
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
				<params>
					<param name="type" type="byte" fulltype="byte" />
					<param name="name" type="String" fulltype="java.lang.String" />
					<param name="useRail" type="boolean" fulltype="boolean" />
				</params>
			</method>
			<method name="visualizeAsColor" returncomment="a color shader which visualizes &lt;code&gt;x&lt;/code&gt;" static="true" type="RGBAShader" visibility="public" fulltype="RGBAShader">
				<comment>
					<description>Returns a color shader whose color represents the value of
 &lt;code&gt;x&lt;/code&gt; which has to lie between -1 and 1. The color
 is interpolated between green for 1, white for 0 and
 red for -1.</description>
					<attribute name="@param">
						<description>x a value between -1 and 1</description>
					</attribute>
					<attribute name="@return">
						<description>a color shader which visualizes &lt;code&gt;x&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="x" type="double" comment="a value between -1 and 1" fulltype="double" />
				</params>
			</method>
			<method name="print" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; with the specified colour to the XL console.</description>
					<attribute name="@param">
						<description>v an object</description>
					</attribute>
					<attribute name="@param">
						<description>color selected printing color (black = 0x000000)</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="Object" comment="an object" fulltype="java.lang.Object" />
					<param name="colour" type="int" fulltype="int" />
				</params>
			</method>
			<method name="print" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console.</description>
					<attribute name="@param">
						<description>v an object</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="Object" comment="an object" fulltype="java.lang.Object" />
				</params>
			</method>
			<method name="println" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; with the specified colour to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v an object</description>
					</attribute>
					<attribute name="@param">
						<description>color selected printing color (black = 0x000000)</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="Object" comment="an object" fulltype="java.lang.Object" />
					<param name="colour" type="int" fulltype="int" />
				</params>
			</method>
			<method name="println" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v an object</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="Object" comment="an object" fulltype="java.lang.Object" />
				</params>
			</method>
			<method name="getTimeForRepaint" returncomment="time in milliseconds [ms]" static="true" type="double" visibility="public" fulltype="double">
				<comment>
					<description>Determine the time for one repaint of the 3D View window.</description>
					<attribute name="@return">
						<description>time in milliseconds [ms]</description>
					</attribute>
				</comment>
			</method>
			<method name="getTimeForTraversingGraph" returncomment="time in milliseconds [ms]" static="true" type="double" visibility="public" fulltype="double">
				<comment>
					<description>Determine the time for traversing the whole graph (toucheing each node once).</description>
					<attribute name="@return">
						<description>time in milliseconds [ms]</description>
					</attribute>
				</comment>
			</method>
			<method name="getGraphSize" returncomment="" static="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>Number of nodes in the main graph.
 same as count((* Node *))</description>
					<attribute name="@return" />
				</comment>
			</method>
			<method name="getSceneGraphSize" returncomment="" static="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>Number of nodes in the scene graph.
 	 * same as count((* ShadedNull *))</description>
					<attribute name="@return" />
				</comment>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;w&lt;/code&gt;" static="true" type="PrintWriter" visibility="public" fulltype="java.io.PrintWriter">
				<comment>
					<description>This operator method prints &lt;code&gt;v&lt;/code&gt; on &lt;code&gt;w&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>w a writer</description>
					</attribute>
					<attribute name="@param">
						<description>v value to be printed on &lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="PrintWriter" comment="a writer" fulltype="java.io.PrintWriter" />
					<param name="v" type="Object" comment="value to be printed on &lt;code&gt;w&lt;/code&gt;" fulltype="java.lang.Object" />
				</params>
			</method>
			<method name="println" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Terminate the current line by writing the line separator string.</description>
				</comment>
			</method>
			<method name="print" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="boolean" comment="value to be printed" fulltype="boolean" />
				</params>
			</method>
			<method name="println" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="boolean" comment="value to be printed" fulltype="boolean" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;w&lt;/code&gt;" static="true" type="PrintWriter" visibility="public" fulltype="java.io.PrintWriter">
				<comment>
					<description>This operator method prints &lt;code&gt;v&lt;/code&gt; on &lt;code&gt;w&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>w a writer</description>
					</attribute>
					<attribute name="@param">
						<description>v value to be printed on &lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="PrintWriter" comment="a writer" fulltype="java.io.PrintWriter" />
					<param name="v" type="boolean" comment="value to be printed on &lt;code&gt;w&lt;/code&gt;" fulltype="boolean" />
				</params>
			</method>
			<method name="print" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="char" comment="value to be printed" fulltype="char" />
				</params>
			</method>
			<method name="println" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="char" comment="value to be printed" fulltype="char" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;w&lt;/code&gt;" static="true" type="PrintWriter" visibility="public" fulltype="java.io.PrintWriter">
				<comment>
					<description>This operator method prints &lt;code&gt;v&lt;/code&gt; on &lt;code&gt;w&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>w a writer</description>
					</attribute>
					<attribute name="@param">
						<description>v value to be printed on &lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="PrintWriter" comment="a writer" fulltype="java.io.PrintWriter" />
					<param name="v" type="char" comment="value to be printed on &lt;code&gt;w&lt;/code&gt;" fulltype="char" />
				</params>
			</method>
			<method name="print" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="int" comment="value to be printed" fulltype="int" />
				</params>
			</method>
			<method name="println" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="int" comment="value to be printed" fulltype="int" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;w&lt;/code&gt;" static="true" type="PrintWriter" visibility="public" fulltype="java.io.PrintWriter">
				<comment>
					<description>This operator method prints &lt;code&gt;v&lt;/code&gt; on &lt;code&gt;w&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>w a writer</description>
					</attribute>
					<attribute name="@param">
						<description>v value to be printed on &lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="PrintWriter" comment="a writer" fulltype="java.io.PrintWriter" />
					<param name="v" type="int" comment="value to be printed on &lt;code&gt;w&lt;/code&gt;" fulltype="int" />
				</params>
			</method>
			<method name="print" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="long" comment="value to be printed" fulltype="long" />
				</params>
			</method>
			<method name="println" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="long" comment="value to be printed" fulltype="long" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;w&lt;/code&gt;" static="true" type="PrintWriter" visibility="public" fulltype="java.io.PrintWriter">
				<comment>
					<description>This operator method prints &lt;code&gt;v&lt;/code&gt; on &lt;code&gt;w&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>w a writer</description>
					</attribute>
					<attribute name="@param">
						<description>v value to be printed on &lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="PrintWriter" comment="a writer" fulltype="java.io.PrintWriter" />
					<param name="v" type="long" comment="value to be printed on &lt;code&gt;w&lt;/code&gt;" fulltype="long" />
				</params>
			</method>
			<method name="print" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="float" comment="value to be printed" fulltype="float" />
				</params>
			</method>
			<method name="println" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="float" comment="value to be printed" fulltype="float" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;w&lt;/code&gt;" static="true" type="PrintWriter" visibility="public" fulltype="java.io.PrintWriter">
				<comment>
					<description>This operator method prints &lt;code&gt;v&lt;/code&gt; on &lt;code&gt;w&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>w a writer</description>
					</attribute>
					<attribute name="@param">
						<description>v value to be printed on &lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="PrintWriter" comment="a writer" fulltype="java.io.PrintWriter" />
					<param name="v" type="float" comment="value to be printed on &lt;code&gt;w&lt;/code&gt;" fulltype="float" />
				</params>
			</method>
			<method name="print" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="double" comment="value to be printed" fulltype="double" />
				</params>
			</method>
			<method name="println" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Prints &lt;code&gt;v&lt;/code&gt; to the XL console, then
 terminates the line.</description>
					<attribute name="@param">
						<description>v value to be printed</description>
					</attribute>
				</comment>
				<params>
					<param name="v" type="double" comment="value to be printed" fulltype="double" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;w&lt;/code&gt;" static="true" type="PrintWriter" visibility="public" fulltype="java.io.PrintWriter">
				<comment>
					<description>This operator method prints &lt;code&gt;v&lt;/code&gt; on &lt;code&gt;w&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>w a writer</description>
					</attribute>
					<attribute name="@param">
						<description>v value to be printed on &lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;w&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="w" type="PrintWriter" comment="a writer" fulltype="java.io.PrintWriter" />
					<param name="v" type="double" comment="value to be printed on &lt;code&gt;w&lt;/code&gt;" fulltype="double" />
				</params>
			</method>
			<method name="operator$index" returncomment="evaluation of &lt;code&gt;func&lt;/code&gt; at &lt;code&gt;x&lt;/code&gt;" static="true" type="float" visibility="public" fulltype="float">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;func.evaluateFloat(x)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>func a function</description>
					</attribute>
					<attribute name="@param">
						<description>x argument to the function</description>
					</attribute>
					<attribute name="@return">
						<description>evaluation of &lt;code&gt;func&lt;/code&gt; at &lt;code&gt;x&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="func" type="FloatToFloat" comment="a function" fulltype="FloatToFloat" />
					<param name="x" type="float" comment="argument to the function" fulltype="float" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" static="true" type="List" visibility="public" fulltype="java.util.List">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="List" comment="a list" fulltype="java.util.List" />
					<param name="value" type="Object" comment="value to add as last element" fulltype="java.lang.Object" />
				</params>
			</method>
			<method name="operator$index" static="true" type="Object" visibility="public" fulltype="java.lang.Object">
				<params>
					<param name="node" type="Node" fulltype="Node" />
					<param name="attr" type="&lt;any&gt;" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="operator$in" returncomment="&lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;value&lt;/code&gt; is in &lt;code&gt;set&lt;/code&gt;" static="true" type="boolean" visibility="public" fulltype="boolean">
				<comment>
					<description>This operator method returns &lt;code&gt;true&lt;/code&gt; iff
 &lt;code&gt;set&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt; and
 &lt;code&gt;set.contains(value)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>value a value</description>
					</attribute>
					<attribute name="@param">
						<description>set a collection</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;value&lt;/code&gt; is in &lt;code&gt;set&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="value" type="Object" comment="a value" fulltype="java.lang.Object" />
					<param name="set" type="Collection" comment="a collection" fulltype="java.util.Collection" />
				</params>
			</method>
			<method name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" static="true" type="boolean" visibility="public" fulltype="boolean">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Object" comment="root node of structure" fulltype="java.lang.Object" />
					<param name="generator" type="&lt;any&gt;" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" />
					<param name="synth" type="&lt;any&gt;" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" static="true" type="byte" visibility="public" fulltype="byte">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Object" comment="root node of structure" fulltype="java.lang.Object" />
					<param name="generator" type="&lt;any&gt;" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" />
					<param name="synth" type="&lt;any&gt;" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" static="true" type="short" visibility="public" fulltype="short">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Object" comment="root node of structure" fulltype="java.lang.Object" />
					<param name="generator" type="&lt;any&gt;" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" />
					<param name="synth" type="&lt;any&gt;" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" static="true" type="char" visibility="public" fulltype="char">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Object" comment="root node of structure" fulltype="java.lang.Object" />
					<param name="generator" type="&lt;any&gt;" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" />
					<param name="synth" type="&lt;any&gt;" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" static="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Object" comment="root node of structure" fulltype="java.lang.Object" />
					<param name="generator" type="&lt;any&gt;" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" />
					<param name="synth" type="&lt;any&gt;" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" static="true" type="long" visibility="public" fulltype="long">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Object" comment="root node of structure" fulltype="java.lang.Object" />
					<param name="generator" type="&lt;any&gt;" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" />
					<param name="synth" type="&lt;any&gt;" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" static="true" type="float" visibility="public" fulltype="float">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Object" comment="root node of structure" fulltype="java.lang.Object" />
					<param name="generator" type="&lt;any&gt;" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" />
					<param name="synth" type="&lt;any&gt;" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" static="true" type="double" visibility="public" fulltype="double">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Object" comment="root node of structure" fulltype="java.lang.Object" />
					<param name="generator" type="&lt;any&gt;" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" />
					<param name="synth" type="&lt;any&gt;" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="synthesize" returncomment="value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;" static="true" type="Object" visibility="public" fulltype="java.lang.Object">
				<comment>
					<description>This method can be used to compute the values of a synthesized
 attribute for every node of a tree-like structure. A synthesized
 attribute is an attribute for a node whose value depends on the
 node and its descendants. &lt;code&gt;root&lt;/code&gt; defines the root of
 the tree-like structure, &lt;code&gt;generator&lt;/code&gt; is used to
 obtain the children of a node, and &lt;code&gt;synth&lt;/code&gt; to compute
 the value of the synthesized attribute at the current node,
 where the values of its children have been computed previously
 and are passed to &lt;code&gt;synth&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>&lt;T&gt; the type of nodes</description>
					</attribute>
					<attribute name="@param">
						<description>&lt;V&gt; the type of values of the synthesized attribute</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of structure</description>
					</attribute>
					<attribute name="@param">
						<description>generator the generator is used to obtain the direct children
 of the current node</description>
					</attribute>
					<attribute name="@param">
						<description>synth this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children</description>
					</attribute>
					<attribute name="@return">
						<description>value of synthesized attribute at &lt;code&gt;root&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Object" comment="root node of structure" fulltype="java.lang.Object" />
					<param name="generator" type="&lt;any&gt;" comment="the generator is used to obtain the direct children
 of the current node" fulltype="&lt;any&gt;" />
					<param name="synth" type="&lt;any&gt;" comment="this function is used to compute the value of the
 synthesized attribute at a node, given the values of its children" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" static="true" type="boolean" visibility="public" fulltype="boolean">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="BooleanList" comment="a list" fulltype="BooleanList" />
					<param name="index" type="int" comment="an index" fulltype="int" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" static="true" type="BooleanList" visibility="public" fulltype="BooleanList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="BooleanList" comment="a list" fulltype="BooleanList" />
					<param name="value" type="boolean" comment="value to add as last element" fulltype="boolean" />
				</params>
			</method>
			<method name="operator$index" static="true" type="boolean" visibility="public" fulltype="boolean">
				<params>
					<param name="node" type="Node" fulltype="Node" />
					<param name="attr" type="BooleanAttribute" fulltype="BooleanAttribute" />
				</params>
			</method>
			<method name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" static="true" type="byte" visibility="public" fulltype="byte">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="ByteList" comment="a list" fulltype="ByteList" />
					<param name="index" type="int" comment="an index" fulltype="int" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" static="true" type="ByteList" visibility="public" fulltype="ByteList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="ByteList" comment="a list" fulltype="ByteList" />
					<param name="value" type="byte" comment="value to add as last element" fulltype="byte" />
				</params>
			</method>
			<method name="operator$index" static="true" type="byte" visibility="public" fulltype="byte">
				<params>
					<param name="node" type="Node" fulltype="Node" />
					<param name="attr" type="ByteAttribute" fulltype="ByteAttribute" />
				</params>
			</method>
			<method name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" static="true" type="short" visibility="public" fulltype="short">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="ShortList" comment="a list" fulltype="ShortList" />
					<param name="index" type="int" comment="an index" fulltype="int" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" static="true" type="ShortList" visibility="public" fulltype="ShortList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="ShortList" comment="a list" fulltype="ShortList" />
					<param name="value" type="short" comment="value to add as last element" fulltype="short" />
				</params>
			</method>
			<method name="operator$index" static="true" type="short" visibility="public" fulltype="short">
				<params>
					<param name="node" type="Node" fulltype="Node" />
					<param name="attr" type="ShortAttribute" fulltype="ShortAttribute" />
				</params>
			</method>
			<method name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" static="true" type="char" visibility="public" fulltype="char">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="CharList" comment="a list" fulltype="CharList" />
					<param name="index" type="int" comment="an index" fulltype="int" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" static="true" type="CharList" visibility="public" fulltype="CharList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="CharList" comment="a list" fulltype="CharList" />
					<param name="value" type="char" comment="value to add as last element" fulltype="char" />
				</params>
			</method>
			<method name="operator$index" static="true" type="char" visibility="public" fulltype="char">
				<params>
					<param name="node" type="Node" fulltype="Node" />
					<param name="attr" type="CharAttribute" fulltype="CharAttribute" />
				</params>
			</method>
			<method name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" static="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="IntList" comment="a list" fulltype="IntList" />
					<param name="index" type="int" comment="an index" fulltype="int" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" static="true" type="IntList" visibility="public" fulltype="IntList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="IntList" comment="a list" fulltype="IntList" />
					<param name="value" type="int" comment="value to add as last element" fulltype="int" />
				</params>
			</method>
			<method name="operator$index" static="true" type="int" visibility="public" fulltype="int">
				<params>
					<param name="node" type="Node" fulltype="Node" />
					<param name="attr" type="IntAttribute" fulltype="IntAttribute" />
				</params>
			</method>
			<method name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" static="true" type="long" visibility="public" fulltype="long">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="LongList" comment="a list" fulltype="LongList" />
					<param name="index" type="int" comment="an index" fulltype="int" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" static="true" type="LongList" visibility="public" fulltype="LongList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="LongList" comment="a list" fulltype="LongList" />
					<param name="value" type="long" comment="value to add as last element" fulltype="long" />
				</params>
			</method>
			<method name="operator$index" static="true" type="long" visibility="public" fulltype="long">
				<params>
					<param name="node" type="Node" fulltype="Node" />
					<param name="attr" type="LongAttribute" fulltype="LongAttribute" />
				</params>
			</method>
			<method name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" static="true" type="float" visibility="public" fulltype="float">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="FloatList" comment="a list" fulltype="FloatList" />
					<param name="index" type="int" comment="an index" fulltype="int" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" static="true" type="FloatList" visibility="public" fulltype="FloatList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="FloatList" comment="a list" fulltype="FloatList" />
					<param name="value" type="float" comment="value to add as last element" fulltype="float" />
				</params>
			</method>
			<method name="operator$index" static="true" type="float" visibility="public" fulltype="float">
				<params>
					<param name="node" type="Node" fulltype="Node" />
					<param name="attr" type="FloatAttribute" fulltype="FloatAttribute" />
				</params>
			</method>
			<method name="operator$index" returncomment="element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;" static="true" type="double" visibility="public" fulltype="double">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;list.get(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>element at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="DoubleList" comment="a list" fulltype="DoubleList" />
					<param name="index" type="int" comment="an index" fulltype="int" />
				</params>
			</method>
			<method name="operator$shl" returncomment="&lt;code&gt;list&lt;/code&gt;" static="true" type="DoubleList" visibility="public" fulltype="DoubleList">
				<comment>
					<description>This operator method adds &lt;code&gt;value&lt;/code&gt; as last element to
 &lt;code&gt;list&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>list a list</description>
					</attribute>
					<attribute name="@param">
						<description>value value to add as last element</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;list&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="list" type="DoubleList" comment="a list" fulltype="DoubleList" />
					<param name="value" type="double" comment="value to add as last element" fulltype="double" />
				</params>
			</method>
			<method name="operator$index" static="true" type="double" visibility="public" fulltype="double">
				<params>
					<param name="node" type="Node" fulltype="Node" />
					<param name="attr" type="DoubleAttribute" fulltype="DoubleAttribute" />
				</params>
			</method>
			<method name="operator$index" returncomment="&lt;code&gt;index&lt;/code&gt;-th child of &lt;code&gt;code&lt;/code&gt;" static="true" type="Node" visibility="public" fulltype="Node">
				<comment>
					<description>This operator method is an alias for &lt;code&gt;node.getChild(index)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>node a node</description>
					</attribute>
					<attribute name="@param">
						<description>index an index</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;index&lt;/code&gt;-th child of &lt;code&gt;code&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>Node#getBranchNode(int)</description>
					</attribute>
				</comment>
				<params>
					<param name="node" type="Node" comment="a node" fulltype="Node" />
					<param name="index" type="int" comment="an index" fulltype="int" />
				</params>
			</method>
			<method name="operator$lt" returncomment="&lt;code&gt;a.getId () &lt; b.getId ()&lt;/code&gt;" static="true" type="boolean" visibility="public" fulltype="boolean">
				<comment>
					<description>This operator method compares two nodes based on their id:
 It returns &lt;code&gt;true&lt;/code&gt; iff
 &lt;code&gt;a.getId () &lt; b.getId ()&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>a a node</description>
					</attribute>
					<attribute name="@param">
						<description>b another node</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;a.getId () &lt; b.getId ()&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>Node#getId()</description>
					</attribute>
				</comment>
				<params>
					<param name="a" type="Node" comment="a node" fulltype="Node" />
					<param name="b" type="Node" comment="another node" fulltype="Node" />
				</params>
			</method>
			<method name="operator$le" returncomment="&lt;code&gt;a.getId () &lt;= b.getId ()&lt;/code&gt;" static="true" type="boolean" visibility="public" fulltype="boolean">
				<comment>
					<description>This operator method compares two nodes based on their id:
 It returns &lt;code&gt;true&lt;/code&gt; iff
 &lt;code&gt;a.getId () &lt;= b.getId ()&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>a a node</description>
					</attribute>
					<attribute name="@param">
						<description>b another node</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;a.getId () &lt;= b.getId ()&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>Node#getId()</description>
					</attribute>
				</comment>
				<params>
					<param name="a" type="Node" comment="a node" fulltype="Node" />
					<param name="b" type="Node" comment="another node" fulltype="Node" />
				</params>
			</method>
			<method name="operator$gt" returncomment="&lt;code&gt;a.getId () &gt; b.getId ()&lt;/code&gt;" static="true" type="boolean" visibility="public" fulltype="boolean">
				<comment>
					<description>This operator method compares two nodes based on their id:
 It returns &lt;code&gt;true&lt;/code&gt; iff
 &lt;code&gt;a.getId () &gt; b.getId ()&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>a a node</description>
					</attribute>
					<attribute name="@param">
						<description>b another node</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;a.getId () &gt; b.getId ()&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>Node#getId()</description>
					</attribute>
				</comment>
				<params>
					<param name="a" type="Node" comment="a node" fulltype="Node" />
					<param name="b" type="Node" comment="another node" fulltype="Node" />
				</params>
			</method>
			<method name="operator$ge" returncomment="&lt;code&gt;a.getId () &gt;= b.getId ()&lt;/code&gt;" static="true" type="boolean" visibility="public" fulltype="boolean">
				<comment>
					<description>This operator method compares two nodes based on their id:
 It returns &lt;code&gt;true&lt;/code&gt; iff
 &lt;code&gt;a.getId () &gt;= b.getId ()&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>a a node</description>
					</attribute>
					<attribute name="@param">
						<description>b another node</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;a.getId () &gt;= b.getId ()&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>Node#getId()</description>
					</attribute>
				</comment>
				<params>
					<param name="a" type="Node" comment="a node" fulltype="Node" />
					<param name="b" type="Node" comment="another node" fulltype="Node" />
				</params>
			</method>
			<method name="operator$index" returncomment="evaluation of &lt;code&gt;f&lt;/code&gt; at &lt;code&gt;n&lt;/code&gt;" static="true" type="int" visibility="public" fulltype="int">
				<comment>
					<description>This operator method applies the function
 &lt;code&gt;f&lt;/code&gt; to node &lt;code&gt;n&lt;/code&gt;. It is an alias for
 &lt;code&gt;f.get(n)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>f a function of nodes</description>
					</attribute>
					<attribute name="@return">
						<description>evaluation of &lt;code&gt;f&lt;/code&gt; at &lt;code&gt;n&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="n" type="Node" comment="a node" fulltype="Node" />
					<param name="f" type="NodeToInt" comment="a function of nodes" fulltype="NodeToInt" />
				</params>
			</method>
			<method name="operator$index" returncomment="evaluation of &lt;code&gt;f&lt;/code&gt; at &lt;code&gt;n&lt;/code&gt;" static="true" type="float" visibility="public" fulltype="float">
				<comment>
					<description>This operator method applies the function
 &lt;code&gt;f&lt;/code&gt; to node &lt;code&gt;n&lt;/code&gt;. It is an alias for
 &lt;code&gt;f.get(n)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>f a function of nodes</description>
					</attribute>
					<attribute name="@return">
						<description>evaluation of &lt;code&gt;f&lt;/code&gt; at &lt;code&gt;n&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="n" type="Node" comment="a node" fulltype="Node" />
					<param name="f" type="NodeToFloat" comment="a function of nodes" fulltype="NodeToFloat" />
				</params>
			</method>
			<method name="operator$index" returncomment="evaluation of &lt;code&gt;f&lt;/code&gt; at &lt;code&gt;n&lt;/code&gt;" static="true" type="double" visibility="public" fulltype="double">
				<comment>
					<description>This operator method applies the function
 &lt;code&gt;f&lt;/code&gt; to node &lt;code&gt;n&lt;/code&gt;. It is an alias for
 &lt;code&gt;f.get(n)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>f a function of nodes</description>
					</attribute>
					<attribute name="@return">
						<description>evaluation of &lt;code&gt;f&lt;/code&gt; at &lt;code&gt;n&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="n" type="Node" comment="a node" fulltype="Node" />
					<param name="f" type="NodeToDouble" comment="a function of nodes" fulltype="NodeToDouble" />
				</params>
			</method>
			<method name="operator$index" returncomment="location of &lt;code&gt;n&lt;/code&gt; in global coordinates" static="true" type="Point3d" visibility="public" fulltype="Point3d">
				<comment>
					<description>This operator method returns the location of &lt;code&gt;n&lt;/code&gt;.
 It is an alias for &lt;code&gt;location(n)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>n a node</description>
					</attribute>
					<attribute name="@param">
						<description>l dummy parameter, its value is ignored</description>
					</attribute>
					<attribute name="@return">
						<description>location of &lt;code&gt;n&lt;/code&gt; in global coordinates</description>
					</attribute>
					<attribute name="@see">
						<description>#location(Node)</description>
					</attribute>
				</comment>
				<params>
					<param name="n" type="Node" comment="a node" fulltype="Node" />
					<param name="l" type="Location" comment="dummy parameter, its value is ignored" fulltype="Location" />
				</params>
			</method>
			<method name="mean" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>This aggregate method computes the mean of a sequence of
 &lt;code&gt;Tuple3f&lt;/code&gt;&apos;s.</description>
					<attribute name="@param">
						<description>a aggregate instance (provided by the XL compiler)</description>
					</attribute>
					<attribute name="@param">
						<description>value a value of the sequence of values</description>
					</attribute>
				</comment>
				<params>
					<param name="a" type="Aggregate" comment="aggregate instance (provided by the XL compiler)" fulltype="Aggregate" />
					<param name="value" type="Tuple3f" comment="a value of the sequence of values" fulltype="Tuple3f" />
				</params>
			</method>
			<method name="mean" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>This aggregate method computes the mean of a sequence of
 &lt;code&gt;Tuple3d&lt;/code&gt;&apos;s.</description>
					<attribute name="@param">
						<description>a aggregate instance (provided by the XL compiler)</description>
					</attribute>
					<attribute name="@param">
						<description>value a value of the sequence of values</description>
					</attribute>
				</comment>
				<params>
					<param name="a" type="Aggregate" comment="aggregate instance (provided by the XL compiler)" fulltype="Aggregate" />
					<param name="value" type="Tuple3d" comment="a value of the sequence of values" fulltype="Tuple3d" />
				</params>
			</method>
			<method name="plot" static="true" type="boolean" visibility="public" fulltype="boolean">
				<params>
					<param name="a" type="Aggregate" fulltype="Aggregate" />
					<param name="function" type="IntToDouble" fulltype="IntToDouble" />
					<param name="x" type="int" fulltype="int" />
				</params>
			</method>
			<method name="plot" static="true" type="boolean" visibility="public" fulltype="boolean">
				<params>
					<param name="a" type="Aggregate" fulltype="Aggregate" />
					<param name="function" type="DoubleToDouble" fulltype="DoubleToDouble" />
					<param name="x" type="double" fulltype="double" />
				</params>
			</method>
			<method name="toObjectToDouble" static="true" type="&lt;any&gt;" visibility="public" fulltype="&lt;any&gt;">
				<params>
					<param name="f" type="DoubleToDouble" fulltype="DoubleToDouble" />
				</params>
			</method>
			<method name="plot" static="true" type="boolean" visibility="public" fulltype="boolean">
				<params>
					<param name="a" type="Aggregate" fulltype="Aggregate" />
					<param name="x" type="double" fulltype="double" />
					<param name="y" type="double" fulltype="double" />
				</params>
			</method>
			<method name="plotPoints" static="true" type="boolean" visibility="public" fulltype="boolean">
				<params>
					<param name="a" type="Aggregate" fulltype="Aggregate" />
					<param name="x" type="double" fulltype="double" />
					<param name="y" type="double" fulltype="double" />
				</params>
			</method>
			<method name="range" static="true" type="void" visibility="public" fulltype="void">
				<params>
					<param name="consumer" type="DoubleConsumer" fulltype="DoubleConsumer" />
					<param name="min" type="double" fulltype="double" />
					<param name="max" type="double" fulltype="double" />
				</params>
			</method>
			<method name="range" static="true" type="void" visibility="public" fulltype="void">
				<params>
					<param name="consumer" type="DoubleConsumer" fulltype="DoubleConsumer" />
					<param name="min" type="double" fulltype="double" />
					<param name="max" type="double" fulltype="double" />
					<param name="n" type="int" fulltype="int" />
				</params>
			</method>
			<method name="select" static="true" type="int" visibility="public" fulltype="int">
				<params>
					<param name="a" type="Aggregate" fulltype="Aggregate" />
					<param name="value" type="Node" fulltype="Node" />
				</params>
			</method>
			<method name="apply" returncomment="a finish iterator" static="true" type="DisposableIterator" visibility="public" fulltype="DisposableIterator">
				<comment>
					<description>This finish iterator (see the XL Language Specification)
 is used in a &lt;code&gt;for&lt;/code&gt;-statement to execute its body
 &lt;code&gt;count&lt;/code&gt; times. Each execution is surrounded
 by a transformation boundary (see {@link #derive()}).</description>
					<attribute name="@param">
						<description>count number of iterations</description>
					</attribute>
					<attribute name="@return">
						<description>a finish iterator</description>
					</attribute>
				</comment>
				<params>
					<param name="count" type="int" comment="number of iterations" fulltype="int" />
				</params>
			</method>
			<method name="applyUntilFinished" returncomment="a finish iterator" static="true" type="DisposableIterator" visibility="public" fulltype="DisposableIterator">
				<comment>
					<description>This finish iterator (see the XL Language Specification)
 is used in a &lt;code&gt;for&lt;/code&gt;-statement to execute its body
 as long as the body makes modifications to the graph. 
 Each execution is surrounded
 by a transformation boundary (see {@link #derive()}).</description>
					<attribute name="@return">
						<description>a finish iterator</description>
					</attribute>
				</comment>
			</method>
			<method name="passBoundary" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<attribute name="@deprecated">
						<description>replaced by {@link #derive()}</description>
					</attribute>
				</comment>
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
			</method>
			<method name="apply" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<attribute name="@deprecated">
						<description>replaced by {@link #derive()}</description>
					</attribute>
				</comment>
				<annotation type="Deprecated" fulltype="java.lang.Deprecated" />
			</method>
			<method name="derive" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>This method induces a &lt;em&gt;transformation boundary&lt;/em&gt;
 on the current RGG extent (see the XL Language Specification).
 This means that all pending graph modifications are
 applied to the graph.</description>
				</comment>
			</method>
			<method name="newGRSVertices" static="true" type="GRSVertex" visibility="public" fulltype="GRSVertex">
				<params>
					<param name="cons" type="&lt;any&gt;" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="interpretiveRules" static="true" type="DisposableIterator" visibility="public" fulltype="DisposableIterator" />
			<method name="removeInterpretiveNodes" static="true" type="void" visibility="public" fulltype="void" />
			<method name="moveToExtent" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Sets the {@link Node#getExtentIndex() extentIndex} property of
 &lt;code&gt;root&lt;/code&gt; and its subgraph spanned by
 {@link EdgePatternImpl#TREE} to &lt;code&gt;index&lt;/code&gt;. If &lt;code&gt;ps&lt;/code&gt;
 is &lt;code&gt;null&lt;/code&gt;, the property is modified as part of the
 {@linkplain de.grogra.persistence.PersistenceManager#getActiveTransaction()
 active transaction} of the graph. Otherwise, the {@link PropertyQueue}
 of &lt;code&gt;ps&lt;/code&gt; is used to enqueue the modifications.
 &lt;p&gt;
 Note that under normal operation, nodes at the {@link Node#LAST_EXTENT_INDEX}
 of the type extent are not returned as part of graph queries.</description>
					<attribute name="@param">
						<description>ps producer to obtain a modification queue, or &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@param">
						<description>root root node of subgraph</description>
					</attribute>
					<attribute name="@param">
						<description>index new value of the &lt;code&gt;extentTail&lt;/code&gt; property of the nodes</description>
					</attribute>
				</comment>
				<params>
					<param name="ps" type="RGGProducer" comment="producer to obtain a modification queue, or &lt;code&gt;null&lt;/code&gt;" fulltype="RGGProducer" />
					<param name="root" type="Node" comment="root node of subgraph" fulltype="Node" />
					<param name="index" type="int" comment="new value of the &lt;code&gt;extentTail&lt;/code&gt; property of the nodes" fulltype="int" />
				</params>
			</method>
			<method name="hide" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Hides the subgraph starting at &lt;code&gt;root&lt;/code&gt; so that it is no
 longer visible and will not be reported as part of graph queries
 (and left hand sides of rules, thus).
 &lt;p&gt;
 Technically, this behaviour is achieved by two steps: At first,
 &lt;code&gt;root&lt;/code&gt; is reparented such that it becomes the child of
 the {@link RGGRoot} of this graph, the connection being established
 by an edge of type {@link Graph#MARK_EDGE}. This makes the subgraph
 invisible. Afterwards, {@link #moveToExtent} is invoked
 in order to move the subgraph to the last list of the type extent. Under
 normal operation, this excludes the subgraph from being returned
 as part of graph queries.
 &lt;p&gt;
 The modifications are made as part of the
 {@linkplain de.grogra.persistence.PersistenceManager#getActiveTransaction()
 active transaction} of the graph.</description>
					<attribute name="@param">
						<description>root root node of subgraph</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Node" comment="root node of subgraph" fulltype="Node" />
				</params>
			</method>
			<method name="mergeTransformations" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>This method replaces chains of transformation nodes
 with single {@link Null} nodes which perform
 the aggregated transformation of the chains. This is the same
 as &lt;code&gt;mergeTransformations(root, null)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>root root node of subgraph where chains should be replaced</description>
					</attribute>
					<attribute name="@param">
						<description>allowShape store aggregated transformation in shape node at
 chain end if possible</description>
					</attribute>
					<attribute name="@see">
						<description>#mergeTransformations(Node, ObjectToBoolean, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Node" comment="root node of subgraph where chains should be replaced" fulltype="Node" />
					<param name="allowShape" type="boolean" comment="store aggregated transformation in shape node at
 chain end if possible" fulltype="boolean" />
				</params>
			</method>
			<method name="mergeNonTropismTransformations" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>This method replaces chains of transformation nodes
 with single {@link Null} node which perform
 the aggregated transformation of the chain; however, transformation
 nodes which are tropisms are not allowed to be part of the chains.
 This is the same
 as &lt;code&gt;mergeNonTropismTransformations(root, null)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>root root node of subgraph where chains should be replaced</description>
					</attribute>
					<attribute name="@param">
						<description>allowShape store aggregated transformation in shape node at
 chain end if possible</description>
					</attribute>
					<attribute name="@see">
						<description>#mergeNonTropismTransformations(Node, ObjectToBoolean, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Node" comment="root node of subgraph where chains should be replaced" fulltype="Node" />
					<param name="allowShape" type="boolean" comment="store aggregated transformation in shape node at
 chain end if possible" fulltype="boolean" />
				</params>
			</method>
			<method name="mergeNonTropismTransformations" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>This method replaces chains of transformation nodes passing
 &lt;code&gt;filter&lt;/code&gt; with single {@link Null} nodes which perform
 the aggregated transformation of the chains; however, transformation
 nodes which are tropisms are not allowed to be part of the chains.
 Tropisms are defined by the subclasses of {@link Tropism}.</description>
					<attribute name="@param">
						<description>root root node of subgraph where chains should be replaced</description>
					</attribute>
					<attribute name="@param">
						<description>filter only merge nodes which pass this filter. If &lt;code&gt;null&lt;/code&gt;
 is specified, every non-tropism transformation node is considered for merging</description>
					</attribute>
					<attribute name="@see">
						<description>#mergeTransformations(Node, ObjectToBoolean, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Node" comment="root node of subgraph where chains should be replaced" fulltype="Node" />
					<param name="filter" type="&lt;any&gt;" comment="only merge nodes which pass this filter. If &lt;code&gt;null&lt;/code&gt;
 is specified, every non-tropism transformation node is considered for merging" fulltype="&lt;any&gt;" />
					<param name="allowShape" type="boolean" fulltype="boolean" />
				</params>
			</method>
			<method name="mergeTransformations" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>This method replaces chains of transformation nodes passing
 &lt;code&gt;filter&lt;/code&gt; with single {@link Null} nodes which perform
 the aggregated transformation of the chains. A node is considered to be
 a transformation node if it has a
 {@linkplain de.grogra.imp3d.objects.Attributes#TRANSFORMATION transformation attribute},
 but no
 {@linkplain de.grogra.imp3d.objects.Attributes#SHAPE shape attribute}.
 If it additionally passes &lt;code&gt;filter&lt;/code&gt; and is part of a chain of
 such nodes, this chain will be replaced by an equivalent single node of class
 {@link Null}.</description>
					<attribute name="@param">
						<description>root root node of subgraph where chains should be replaced</description>
					</attribute>
					<attribute name="@param">
						<description>filter only merge nodes which pass this filter. If &lt;code&gt;null&lt;/code&gt;
 is specified, every transformation node is considered for merging</description>
					</attribute>
					<attribute name="@param">
						<description>allowShape if possible, store aggregated transformation in
 existing shape node at chain end
 (instead of creating a new &lt;code&gt;Null&lt;/code&gt; node)</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Node" comment="root node of subgraph where chains should be replaced" fulltype="Node" />
					<param name="filter" type="&lt;any&gt;" comment="only merge nodes which pass this filter. If &lt;code&gt;null&lt;/code&gt;
 is specified, every transformation node is considered for merging" fulltype="&lt;any&gt;" />
					<param name="allowShape" type="boolean" comment="if possible, store aggregated transformation in
 existing shape node at chain end
 (instead of creating a new &lt;code&gt;Null&lt;/code&gt; node)" fulltype="boolean" />
				</params>
			</method>
			<method name="removeTransformationLeaves" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Removes all leaf nodes from the graph which are pure transformation
 nodes (see {@link #removeTransformationLeaves(Node, ObjectToBoolean)}).</description>
					<attribute name="@param">
						<description>root root node of subgraph whose leaves shall be removed</description>
					</attribute>
					<attribute name="@see">
						<description>#removeLeaves</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Node" comment="root node of subgraph whose leaves shall be removed" fulltype="Node" />
				</params>
			</method>
			<method name="removeTransformationLeaves" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Removes all leaf nodes from the graph which are pure transformation
 nodes and which pass &lt;code&gt;filter&lt;/code&gt;,
 starting at &lt;code&gt;root&lt;/code&gt; (see {@link #removeLeaves}).
 A node is considered to be a pure transformation node if it has a
 {@linkplain de.grogra.imp3d.objects.Attributes#TRANSFORMATION transformation attribute},
 but no
 {@linkplain de.grogra.imp3d.objects.Attributes#SHAPE shape attribute}.</description>
					<attribute name="@param">
						<description>root root node of subgraph whose leaves shall be removed</description>
					</attribute>
					<attribute name="@param">
						<description>filter only leaf nodes which pass this filter are removed.
 If &lt;code&gt;null&lt;/code&gt;, all transformation nodes are considered</description>
					</attribute>
					<attribute name="@see">
						<description>#removeLeaves</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Node" comment="root node of subgraph whose leaves shall be removed" fulltype="Node" />
					<param name="filter" type="&lt;any&gt;" comment="only leaf nodes which pass this filter are removed.
 If &lt;code&gt;null&lt;/code&gt;, all transformation nodes are considered" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="removeLeaves" static="true" type="void" visibility="public" fulltype="void">
				<comment>
					<description>Removes all leaf nodes from the graph which pass
 &lt;code&gt;filter&lt;/code&gt;, starting at &lt;code&gt;root&lt;/code&gt;. A leaf is a node
 which can be reached from the &lt;code&gt;root&lt;/code&gt; by traversing
 {@link #branch} or {@link #successor} edges in forward direction and
 which has no outgoing edge. If a node which passes &lt;code&gt;filter&lt;/code&gt;
 is no leaf initially, but becomes a leaf due to the removal of its
 children, it is also removed itself. As a result, the graph finally
 does not contain any leaves which pass &lt;code&gt;filter&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>root root node of subgraph whose leaves shall be removed</description>
					</attribute>
					<attribute name="@param">
						<description>filter only leaf nodes which pass this filter are removed</description>
					</attribute>
				</comment>
				<params>
					<param name="root" type="Node" comment="root node of subgraph whose leaves shall be removed" fulltype="Node" />
					<param name="filter" type="&lt;any&gt;" comment="only leaf nodes which pass this filter are removed" fulltype="&lt;any&gt;" />
				</params>
			</method>
			<method name="statistics" returncomment="statistics of the series of values" static="true" type="Statistics" visibility="public" fulltype="Statistics">
				<comment>
					<description>This aggregate method computes a &lt;code&gt;Statistics&lt;/code&gt;
 object for a series of values &lt;code&gt;a&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>a aggregate instance (provided by the XL compiler)</description>
					</attribute>
					<attribute name="@param">
						<description>value a value of the sequence of values</description>
					</attribute>
					<attribute name="@return">
						<description>statistics of the series of values</description>
					</attribute>
				</comment>
				<params>
					<param name="a" type="Aggregate" comment="aggregate instance (provided by the XL compiler)" fulltype="Aggregate" />
					<param name="value" type="double" comment="a value of the sequence of values" fulltype="double" />
				</params>
			</method>
			<method name="defer" static="true" type="void" visibility="public" fulltype="void">
				<params>
					<param name="r" type="Runnable" fulltype="java.lang.Runnable" />
				</params>
			</method>
		</methods>
	</jelclass>
</java-to-xml>
