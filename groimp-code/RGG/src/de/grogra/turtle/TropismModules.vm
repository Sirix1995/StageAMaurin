#if (!$generate)
	#set ($generate = true)
	#foreach ($t in ["RD", "RP", "RN", "RO"])
		#set ($out = "de/grogra/turtle/${t}.java")
		$generator.parse("de/grogra/turtle/TropismModules.vm", $out)
	#end
#else

$pp.autogenerated

/*
 * Copyright (C) 2002 - 2007 Lehrstuhl Grafische Systeme, BTU Cottbus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package de.grogra.turtle;

import javax.vecmath.*;

import de.grogra.graph.Graph;
import de.grogra.graph.GraphState;
import de.grogra.math.*;
import de.grogra.vecmath.*;
import de.grogra.graph.impl.*;
import de.grogra.imp3d.objects.*;
import de.grogra.rgg.Library;

/**
 * An <code>$t(x,s)</code> node represents a rotation which
 * implements
#if ($t == "RD")
 * a directional tropism towards the direction
#elseif ($t == "RP")
 * a positional tropism towards the point
#elseif ($t == "RN")
 * a positional tropism towards the
 * {@link de.grogra.rgg.Library#location(Node) location} of node
#else
 * an orthogonal tropism which moves away from a given direction
#end
 * <code>x</code>.
 * The {@link #strength} of the tropism is given by <code>s</code>.
 * <br>
 * This class declares the predicate
 * {@link ${t}.Pattern} to allow one to write
 * <code>$t(x,s)</code> in a pattern of an XL query.
 *
 * @author Ole Kniemeyer
 *
#if ($t == "RD")
 * @see de.grogra.rgg.Library#directionalTropism(Matrix34d, Tuple3d, float, Matrix4d)
#elseif ($t == "RO")
 * @see de.grogra.rgg.Library#orthogonalTropism(Matrix34d, Tuple3d, float, Matrix4d)
#else
 * @see de.grogra.rgg.Library#positionalTropism(Matrix34d, Tuple3d, float, Matrix4d)
#end
 */
public class $t extends Tropism
#if ($t == "RN")
	implements de.grogra.graph.AttributeChangeListener
#end
{
#if (($t == "RD") || ($t == "RO"))
	#set ($dest = "direction")
#else
	#set ($dest = "target")
#end


#if ($t == "RN")
	/**
	 * The node <code>target</code> defines the
	 * {@link de.grogra.rgg.Library#location(Node) location}
	 * to which this tropism tends.
	 */
	public Node target;
	//enh:field fco setmethod=setTarget
	#set ($desttype = "Node")
#elseif ($t == "RP")
	/**
	 * This defines the position to which this tropism tends.
	 */
	public Point3d $dest;
	//enh:field type=Tuple3dType.POINT
	#set ($desttype = "Point3d")
#else
	/**
#if ($t == "RD")
	 * This defines the direction to which this tropism tends.
#else
	 * This defines the normal vector of the plane to which this tropism tends.
#end
	 */
	public Vector3d $dest;
	//enh:field type=Tuple3dType.VECTOR
	#set ($desttype = "Vector3d")
#end


	private static void initType ()
	{
		$TYPE.setDependentAttribute (${dest}$FIELD, Attributes.TRANSFORMATION);
	}


	public static class Pattern extends de.grogra.xl.impl.base.FieldListPattern
	{
		public Pattern ()
		{
			super (null, ${t}.$TYPE, new NType.Field[] {${dest}$FIELD, strength$FIELD});
		}

		public static void signature (@In @Out ${t} n, $desttype d, float s)
		{
		}
	}


	public $t ()
	{
		this (null, 0.01f);
	}


	public $t ($desttype $dest, float strength)
	{
		super ();
#if ($t == "RN")
		setTarget ($dest);
#else
		this.$dest = $dest;
#end
		this.strength = strength;
	}


	public void preTransform (Object object, boolean asNode, Matrix4d in, Matrix4d out, GraphState gs)
	{
		out.set (in);
	}


	public void postTransform (Object object, boolean asNode, Matrix4d in, Matrix4d out, Matrix4d pre,
							   GraphState gs)
	{
		Matrix34d r = GlobalTransformation.getParentValue (object, asNode, gs, true);
#if ($t == "RD")
		if (Library.directionalTropism (r, direction, strength, out))
#elseif ($t == "RO")
		if (Library.orthogonalTropism (r, direction, strength, out))
#elseif ($t == "RP")
		if (Library.positionalTropism (r, target, strength, out))
#else
		synchronized (this)
		{
			if (listenerTarget != target)
			{
				resetListenerTarget ();
			}
			Graph g = target.getGraph ();
			if (g != null)
			{
				g.addAttributeChangeListener (target, true, this);
				listenerTarget = target;
			}
		}
		Matrix34d t = GlobalTransformation.get (target, true, gs, true);
		if (Library.positionalTropism (r, new Point3d (t.m03, t.m13, t.m23), strength, out))
#end
		{
			Math2.mulAffine (out, in, out);
		}
		else if (out != pre)
		{
			out.set (pre);
		}
	}

#if ($t == "RN")
	private transient Node listenerTarget;

	private synchronized void resetListenerTarget ()
	{
		if (listenerTarget != null)
		{
			Graph g = listenerTarget.getGraph ();
			if (g != null)
			{
				g.removeAttributeChangeListener (listenerTarget, true, this);
			}
			listenerTarget = null;
		}
	}

	public void setTarget (Node t)
	{
		resetListenerTarget ();
		target = t;
	}


	public void attributeChanged (de.grogra.graph.AttributeChangeEvent event)
	{
		if (GlobalTransformation.ATTRIBUTE.isContained (event.getDependentAttributes()))
		{
			event.getGraphState ().fireAttributeChanged
				(this, true, Attributes.TRANSFORMATION, null, null);
		}
	}

#end

	//enh:insert initType ();

}
#end
