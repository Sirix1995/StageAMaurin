#if (!$generate)

	#macro (typeEquals $t $u)
		((($t) == ($u))
		 || (($t).getImplementationClass ()
			 == ($u).getImplementationClass ())
		 || de.grogra.reflect.Reflection.equal ($t, $u))
	#end

	#set ($generate = true)
	#foreach ($d in ["2", "3"])
		#foreach ($p in ["d", "f"])
			#set ($ttype = "Tuple${d}${p}")
			#foreach ($t in ["Vector", "Point"])
				#set ($vtype = "${t}${d}${p}")
				#set ($type = "${vtype}Attribute")
				#set ($out = "de/grogra/imp/objects/${type}.java")
				$generator.parse("de/grogra/imp/objects/Attribute_VP.vm", $out)
			#end
		#end
	#end
#else

$pp.autogenerated

/*
 * Copyright (C) 2002 - 2007 Lehrstuhl Grafische Systeme, BTU Cottbus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


package de.grogra.imp.objects;

import javax.vecmath.*;
import de.grogra.reflect.*;
import de.grogra.util.Quantity;

public class $type extends ${ttype}Attribute
{
	public static final Type TYPE
		= de.grogra.math.${ttype}Type.${t.toUpperCase()};


	public $type (Quantity quantity)
	{
		super (TYPE, quantity);
	}


	public $type ()
	{
		super (TYPE, Quantity.LENGTH);
	}


	@Override
	public Object toType (Object value, Type t)
	{
		if (#typeEquals("t" "TYPE"))
		{
			return value;
		}
		else if (#typeEquals("t" "Vector${d}fAttribute.TYPE"))
		{
			return new Vector${d}f (($ttype) value);
		}
		else if (#typeEquals("t" "Vector${d}dAttribute.TYPE"))
		{
			return new Vector${d}d (($ttype) value);
		}
		else if (#typeEquals("t" "Point${d}fAttribute.TYPE"))
		{
			return new Point${d}f (($ttype) value);
		}
		else if (#typeEquals("t" "Point${d}dAttribute.TYPE"))
		{
			return new Point${d}d (($ttype) value);
		}
		else
		{
			return super.toType (value, t);
		}
	}


	@Override
	public Object valueOf (Object value)
	{
		if (value instanceof $vtype)
		{
			return value;
		}
		else if (value instanceof Tuple${d}f)
		{
			return new $vtype ((Tuple${d}f) value);
		}
		else if (value instanceof Tuple${d}d)
		{
			return new $vtype ((Tuple${d}d) value);
		}
		else
		{
			return super.valueOf (value);
		}
	}


	public Object cloneValue (Object value)
	{
		return new $vtype (($ttype) value);
	}

}

#end
