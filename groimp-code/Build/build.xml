<project name="GroIMP" default="app" basedir="..">

  <description>
	Ant build file for the de.grogra Platform
  </description>

  <property name="groimp.version" value="1.6"/>

  <!-- Customize this for your system -->

  <!-- path to makensis executable (NSIS installer) -->
  <property name="makensis" value="/home/mhenke/.wine/drive_c/Program Files (x86)/NSIS/makensis"/>    <!-- ufgb966 -->

  <property name="javadoc6" value="/usr/lib/jvm/java-6-openjdk-amd64/bin/javadoc"/>    <!-- for the javadoc help within GroIMP we need the classic javadoc -->
  <!-- End of settings which have to be customized -->

  <target name="doc" depends="-createdeps">
  	<ant antfile="Build/.dependencies.xml" target="projects">
	  <property name="target" value="doc"/>
	</ant>
  </target>

	<target name="xmldoc" description="Builds XML Documentation using JELDoclet of some classes (for list and help commands).">
		<javadoc destdir="Platform-Core" package="true" docletpath="Build/lib/jeldoclet-2.0.jar">
		<fileset dir=".">
			<include name="RGG/src/de/grogra/rgg/Library.java"/>
			<include name="Graph/src/de/grogra/graph/Graph.java"/>
			<include name="Graph/src/de/grogra/graph/impl/GraphManager.java"/>
		</fileset>
		<doclet name="com.jeldoclet.JELDoclet"/>
		</javadoc>
		<copy file="Platform-Core/jel.xml" todir="Platform-Core/build"/>
	</target>

	<target name="builddate" description="updates the build date">
		<tstamp>
			<format property="TODAY" pattern="yyyy-MM-dd" locale="en,UK"/>
		</tstamp>
		<replaceregexp file="Platform-Core/src/grogra.de-platform.properties" match="build-date =(.*)" replace="build-date = ${TODAY}" flags="g" byline="true"/>
		<copy file="Platform-Core/src/grogra.de-platform.properties" todir="Platform-Core/build"/>
		<replaceregexp file="IMP/src/plugin.properties" match="build-date =(.*)" replace="build-date = ${TODAY}" flags="g" byline="true"/>
		<copy file="IMP/src/plugin.properties" todir="IMP/build"/>
	</target>
	
  <target name="compile_nosrc" depends="-createdeps">
	<ant antfile="Build/.dependencies.xml" target="projects">
	  <property name="target" value="compile_nosrc"/>
	</ant>
  </target>

  <target name="compile" depends="-createdeps">
  	<ant antfile="Build/.dependencies.xml" target="projects">
	  <property name="target" value="compile"/>
	</ant>
  </target>

  <target name="src" depends="-createdeps">
  	<ant antfile="Build/.dependencies.xml" target="projects">
	  <property name="target" value="src"/>
	</ant>
  </target>

  <target name="app" depends="-createdeps">
	<mkdir dir="app/plugins"/>
	<mkdir dir="app/plugins/Textures"/>
  	<ant antfile="Build/.dependencies.xml" target="projects">
	  <property name="target" value="app"/>
	</ant>
	<antcall target="-app"/>
  </target>

  <target name="app_nodoc" depends="-createdeps">
	<mkdir dir="app/plugins"/>
	<mkdir dir="app/plugins/Textures"/>
  	<ant antfile="Build/.dependencies.xml" target="projects">
	  <property name="target" value="app_nodoc"/>
	</ant>
	<antcall target="-app"/>
  </target>

  <target name="-appenddeps"/>

  <target name="-createdeps">
	<mkdir dir="Build/build"/>

	<taskdef name="antlr0" classname="org.apache.tools.ant.taskdefs.optional.ANTLR">
		<classpath>
		  <pathelement location="Build/lib/antlr.jar"/>
		  <pathelement location="Build/lib/ant-antlr.jar"/>
		</classpath>
	</taskdef>

  	<antlr0 target="Build/src/de/grogra/tools/vocabulary.g">
		<classpath location="Build/lib/antlr.jar"/>
	</antlr0>
  	<delete failonerror="false" file="Build/src/de/grogra/tools/TokenizerBuilder.smap"/>
  	<delete failonerror="false" file="Build/src/de/grogra/tools/VocabularyLexer.smap"/>

	<javac srcdir="Build/src" destdir="Build/build" source="1.6">
	  <classpath>
		<pathelement location="Build/lib/ant.jar"/>
		<pathelement location="Build/lib/antlr.jar"/>
		<pathelement location="Build/lib/ant-antlr.jar"/>
		<pathelement location="Build/lib/velocity-dep.jar"/>
	  </classpath>
	</javac>

	<copy file="Build/src/enhance.pl" todir="Build/build"/>

	<echo file="Build/.projects.tmp" append="false" message="dummy"/>
	<echo file="Build/.javadocpath" append="false" message=""/>
	<echo file="Build/.dependencies.tmp" append="false"
	  message="&lt;project name=&quot;deps&quot; default=&quot;dummy&quot;&gt;${line.separator}
 &lt;target name=&quot;dummy&quot;/&gt;${line.separator}"/>
	<subant target="-appenddeps">
	  <fileset dir=".">
		<include name="*/build.xml"/>
		<contains text="buildproject.xml" casesensitive="true"/>
	  </fileset>
	</subant>
	<delete>
	  <fileset dir="." includes="*/.libs"/>
	</delete>
	<echo file="Build/.dependencies.tmp" append="true"
	  message="  &lt;target name=&quot;projects&quot; depends=&quot;"/>
	<concat destfile="Build/.dependencies.tmp" append="true">
	  <fileset file="Build/.projects.tmp"/>
	</concat>
	<delete file="Build/.projects.tmp"/>
	<echo file="Build/.dependencies.tmp" append="true"
	  message="&quot;/&gt;${line.separator}&lt;/project&gt;${line.separator}"/>
	<move file="Build/.dependencies.tmp" tofile="Build/.dependencies.xml"/>
  </target>

  <target name="copydoc" depends="xmldoc">
	<copy file="Build/LICENSE" todir="app"/>
	<copy file="Build/README" todir="app"/>
	<copy file="Build/INSTALL_BINARY" tofile="app/INSTALL"/>
	<copy todir="app">
	  <fileset dir="app" includes="LICENSE README INSTALL"/>
	  <mapper type="glob" from="*" to="*.txt"/>
	</copy>
	<fixcrlf srcdir="app" includes="*.txt" eol="dos"/>
  </target>

  <target name="-app" depends="copydoc">
	<copy todir="app/plugins" failonerror="false">
	  <fileset dir="plugins"/>
	</copy>
	<copy todir="app/plugins/Textures" failonerror="false">
	  <fileset dir="Textures/src"/>
	</copy>
	<jar destfile="app/core.jar" compress="false">
	  <manifest>
		<attribute name="Main-Class" value="de.grogra.pf.boot.Main"/>
	  </manifest>
	  <fileset dir="XL-Core/build"/>
	  <fileset dir="Utilities/build"/>
	  <fileset dir="Graph/build"/>
	  <fileset dir="Platform-Core/build" includes="de/** gpl.html"/>
	</jar>
	<copy todir="app" includeEmptyDirs="false">
	  <fileset dir="Platform-Core/build" includes="*" excludes="gpl.html"/>
	</copy>
  </target>
	
	<target name="javadoc" depends="-createdeps">
	  	<delete dir="javadoc" failonerror="false"/>
		<mkdir dir="javadoc"/>
		<loadfile property="srcpath" srcFile="Build/.javadocpath"/>
		<javadoc access="protected" maxmemory="600m"
			sourcepath="${srcpath}"
			source="7"
			destdir="javadoc"
			overview="Build/overview.html"
			doctitle="GroIMP ${groimp.version} API"
			nodeprecated="true" nodeprecatedlist="true" noindex="false" nonavbar="false" notree="false"
			splitindex="true" use="false" author="true" version="false"
			packagenames="de.grogra.*,javax.*,org.*,net.*">
			<classpath>
				<fileset dir=".">
					<include name="*/lib/*.jar"/>
				</fileset>
			</classpath>
		</javadoc>
	</target>
	
	<target name="APIDoc" depends="-createdeps">
	  	<delete dir="plugins/APIDoc/javadoc" failonerror="false"/>
		<mkdir dir="plugins/APIDoc/javadoc"/>
		<loadfile property="srcpath" srcFile="Build/.javadocpath"/>
		<javadoc access="protected" maxmemory="600m"
			sourcepath="${srcpath}"
			source="7"
			destdir="plugins/APIDoc/javadoc"
			overview="Build/overview.html"
			doctitle="GroIMP ${groimp.version} API"
			nodeprecated="true" nodeprecatedlist="true" noindex="false" nonavbar="false" notree="false"
			splitindex="true" use="false" author="true" version="false"
			packagenames="de.grogra.*,javax.*"
			excludepackagenames="de.grogra.imp2d.*,de.grogra.xl.compiler,de.grogra.xl.compiler.*,de.grogra.xl.parser">
			<classpath>
				<fileset dir=".">
					<include name="*/lib/*.jar"/>
				</fileset>
			</classpath>
		</javadoc>
	</target>

  <target name="zip">
  	<zip destfile="GroIMP-${groimp.version}.zip">
  	  <zipfileset dir="app" prefix="GroIMP-${groimp.version}"/>
  	</zip>
  </target>

  <target name="maczip">
  	<zip destfile="GroIMP-${groimp.version}-MacOS.zip">
  	  <zipfileset dir="app" prefix="GroIMP-${groimp.version}" excludes="**/*.dll **/*.so"/>
  	</zip>
  </target>

  <target name="winexe">
<!--
	  <exec executable="${makensis}" dir="Build" input="Build/install_win32.nsi">
  	  <arg value="/DVERSION=${groimp.version}"/>
  	  <arg value="-"/>
  	</exec>
-->
<!--
	<exec executable="wine" dir="Build" input="Build/install_win32.nsi">
		<arg value="${makensis}"/>
		<arg value="/DVERSION=${groimp.version}"/>
		<arg value="-"/>
	</exec>
  	<move file="Build/GroIMP-${groimp.version}-win32.exe" todir="."/>
-->
	<exec executable="wine" dir="Build" input="Build/install_win64.nsi">
		<arg value="${makensis}"/>
		<arg value="/DVERSION=${groimp.version}"/>
		<arg value="-"/>
	</exec>
  	<move file="Build/GroIMP-${groimp.version}-win64.exe" todir="."/>

  </target>

  <target name="cleantmp">
	<delete>
		<fileset dir="." includes="*/*.stamp */.libs Build/.dependencies.xml */*.log"/>
	</delete>
  </target>

  <target name="clean" depends="cleantmp">
	<delete includeEmptyDirs="true">
		<fileset dir="." followsymlinks="false"
		includes="*/dist/ */build/ app/ deb/"/>
	</delete>
  </target>

  <target name="srczip">
	<zip destfile="GroIMP-${groimp.version}-src.zip">
	  <zipfileset dir="." prefix="GroIMP-${groimp.version}"
		includes="Build/INSTALL* Build/LICENSE Build/README Build/changelog Build/control Build/copyright
		Build/groimp Build/groimp.xpm Build/groimp.desktop Build/*.nsi Build/*.ini Build/*.ico 
		Build/overview.html Platform-Core/jel.xml */build*.xml */.project */.classpath */src/ */lib/ plugins/ Textures/"
		excludes="plugins/APIDoc/javadoc/ ChemSim/ Chem/ cells/"/>
		<zipfileset dir="Build" prefix="GroIMP-${groimp.version}"
		includes="INSTALL LICENSE README"/>
	</zip>
  </target>

  <target name="release" depends="builddate,xmldoc,srczip,javadoc">
  	<zip destfile="GroIMP-${groimp.version}-javadoc.zip">
  	  <zipfileset dir="javadoc"/>
  	</zip>
  	<mkdir dir="tmp"/>
  	<delete dir="tmp/GroIMP-${groimp.version}" failonerror="false"/>
  	<unzip src="GroIMP-${groimp.version}-src.zip" dest="tmp"/>
  	<ant antfile="tmp/GroIMP-${groimp.version}/Build/build.xml" inheritAll="false" target="-release"/>
  	<move todir=".">
	  <fileset dir="tmp/GroIMP-${groimp.version}">
	  	<include name="*.zip"/>
	  	<include name="*.tgz"/>
	  	<include name="*.exe"/>
	  	<include name="*.deb"/>
	  </fileset>
  	</move>
  </target>

  <target name="-release" depends="app">
	<antcall target="APIDoc"/>
	<move file="plugins/APIDoc" todir="app/plugins" failonerror="false"/>
	<antcall target="zip"/>
	<antcall target="maczip"/>
	<antcall target="winexe"/>
	<antcall target="deb"/>
  </target>

  <target name="setversion">
	<replaceregexp match='xml version\=".*?"' replace='xml version = "1.6"'>
	  <fileset dir="." includes="*/src/plugin.xml plugins/*/plugin.xml"/>
	</replaceregexp>
	<replaceregexp match='version\=".*"' replace='version="${groimp.version}"'>
	  <fileset dir="." includes="*/src/plugin.xml plugins/*/plugin.xml"/>
	</replaceregexp>
  </target>

  <target name="xlc" depends="compile_nosrc">
	<jar destfile="xlc.jar" filesonly="true">
		<manifest>
		  <attribute name="Main-Class" value="de.grogra.xl.compiler.Main"/>
		</manifest>
		<fileset dir="XL-Core/build" excludes="**/*.vm **/*.html"/>
		<fileset dir="Utilities/build" excludes="**/*.vm"/>
		<fileset dir="Graph/build" excludes="**/*.vm"/>
		<fileset dir="Platform-Core/build" includes="de/** gpl.html"/>
		<fileset dir="Grammar/build" excludes="plugin.* **/*.vm **/*.txt"/>
		<fileset dir="XL/build" excludes="plugin.* doc/**"/>
		<fileset dir="XL-VMX/build" excludes="plugin.*"/>
		<fileset dir="XL-Compiler/build" excludes="plugin.* **/*.g **/*.vm **/*.txt **/*.inc"/>
		<zipfileset src="Grammar/lib/antlr-rt.jar"/>
	</jar>
  </target>


	<!-- create a deb-package for Ubuntu/Debian -->
	<!-- depends="app" -->
	<target name="deb" description="create a deb-package for Ubuntu/Debian">
		<!-- delete old folders -->
		<delete dir="deb" failonerror="false"/>
		<!-- make folders -->
		<mkdir dir="deb"/>
		<mkdir dir="deb/GroIMP/DEBIAN"/>
		<mkdir dir="deb/GroIMP/usr/bin"/>
		<mkdir dir="deb/GroIMP/usr/share"/>
		<mkdir dir="deb/GroIMP/usr/share/pixmaps"/>
		<mkdir dir="deb/GroIMP/usr/share/GroIMP"/>
		<mkdir dir="deb/GroIMP/usr/share/applications"/>
		<mkdir dir="deb/GroIMP/usr/share/app-install/icons"/>

		<!-- copy info file: contol -->
		<copy file="Build/control" todir="deb/GroIMP/DEBIAN"/>
		<!-- copy info file: changelog -->
		<copy file="Build/changelog" todir="deb/GroIMP/DEBIAN"/>
		<!-- copy info file: copyright -->
		<copy file="Build/copyright" todir="deb/GroIMP/DEBIAN"/>

		<!-- copy run script -->
		<copy file="Build/groimp" todir="deb/GroIMP/usr/bin"/>

		<!-- make run script executable -->
		<chmod file="deb/GroIMP/usr/bin/groimp" perm="ugo+rx"/>

		<!-- copy icon TODO file format should be xpm-->
		<copy file="Build/groimp.xpm" todir="deb/GroIMP/usr/share/pixmaps"/>
		<copy file="Build/groimp.xpm" todir="deb/GroIMP/usr/share/app-install/icons"/>

		<!-- copy application desktop file -->
		<copy file="Build/groimp.desktop" todir="deb/GroIMP/usr/share/applications"/>
		
		<!-- copy application files -->
		<copy todir="deb/GroIMP/usr/share/GroIMP/">
			<fileset dir="app" excludes="**/*.dll **/*.jnilib"/>
		</copy>

		<!-- make the deb -->
		<exec executable="dpkg" dir="deb">
			<arg value="-b"/>
			<arg value="GroIMP"/>
			<arg value="GroIMP-${groimp.version}-all.deb"/>
		</exec>

		<!-- move it -->
		<move file="deb/GroIMP-${groimp.version}-all.deb" todir=""/>

	</target>

</project>
